#ifndef __usb_driver_IF_H
#define __usb_driver_IF_H 1
/*
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * INTERFACE NAME: usb_driver
 * INTEFACE FILE: /home/andreas/barrelfish/new_test2/if/usb_driver.if
 * INTERFACE DESCRIPTION: Generic USB driver interface
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr.6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY FLOUNDER: DO NOT EDIT!
 */

#include <flounder/flounder.h>

/*
 * Concrete type definitions
 */
typedef uint64_t usb_driver_genpaddr_t;
typedef uint64_t usb_driver_genvaddr_t;
typedef uint32_t usb_driver_rsrcid_t;
typedef uint32_t usb_driver_errval_t;
typedef uint32_t usb_driver_cycles_t;
typedef uint32_t usb_driver_iref_t;
typedef uint8_t usb_driver_coreid_t;
typedef uint32_t usb_driver_domainid_t;
struct _usb_driver_scsi_dev__struct {
    uint8_t llb;
    uint8_t size;
    uint8_t usb_add;
    uint8_t valid;
};
typedef struct _usb_driver_scsi_dev__struct usb_driver_scsi_dev_t;

/*
 * Forward declaration of binding type
 */
struct usb_driver_binding;

/*
 * Contination (callback) and control function types
 */
typedef  void usb_driver_bind_continuation_fn(void *st, errval_t err, struct usb_driver_binding *_binding);
typedef  bool usb_driver_can_send_fn(struct usb_driver_binding *_binding);
typedef  errval_t usb_driver_register_send_fn(struct usb_driver_binding *_binding, struct waitset *ws, struct event_closure _continuation);
typedef  errval_t usb_driver_change_waitset_fn(struct usb_driver_binding *_binding, struct waitset *ws);
typedef  errval_t usb_driver_control_fn(struct usb_driver_binding *_binding, idc_control_t control);
typedef  void usb_driver_error_handler_fn(struct usb_driver_binding *_binding, errval_t err);

/*
 * Enumeration for message numbers
 */
typedef enum usb_driver_msg_enum {
    usb_driver___dummy__msgnum = 0,
    usb_driver_probe__msgnum = 1,
    usb_driver_probe_done__msgnum = 2,
    usb_driver_disconnect__msgnum = 3,
    usb_driver_disconnect_done__msgnum = 4,
    usb_driver_get_scsi_dev__msgnum = 5,
    usb_driver_send_dev__msgnum = 6,
    usb_driver_read_scsi__msgnum = 7,
    usb_driver_resp_read_scsi__msgnum = 8,
    usb_driver_write_scsi__msgnum = 9,
    usb_driver_resp_write_scsi__msgnum = 10,
    usb_driver_sync_cache__msgnum = 11,
    usb_driver_resp_sync__msgnum = 12
} usb_driver_msg_enum;

/*
 * Message type signatures (transmit)
 */
typedef  errval_t usb_driver_probe__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t dev, uint8_t class, uint8_t subclass, uint8_t protocol);
typedef  errval_t usb_driver_probe_done__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp, uint8_t address);
typedef  errval_t usb_driver_disconnect__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t dev);
typedef  errval_t usb_driver_disconnect_done__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp);
typedef  errval_t usb_driver_get_scsi_dev__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation);
typedef  errval_t usb_driver_send_dev__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev);
typedef  errval_t usb_driver_read_scsi__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num, uint32_t buff, uint8_t cache);
typedef  errval_t usb_driver_resp_read_scsi__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp);
typedef  errval_t usb_driver_write_scsi__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num, uint32_t buff, uint8_t cache);
typedef  errval_t usb_driver_resp_write_scsi__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp);
typedef  errval_t usb_driver_sync_cache__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num);
typedef  errval_t usb_driver_resp_sync__tx_method_fn(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp);

/*
 * Message type signatures (receive)
 */
typedef  void usb_driver_probe__rx_method_fn(struct usb_driver_binding *_binding, uint8_t dev, uint8_t class, uint8_t subclass, uint8_t protocol);
typedef  void usb_driver_probe_done__rx_method_fn(struct usb_driver_binding *_binding, uint8_t resp, uint8_t address);
typedef  void usb_driver_disconnect__rx_method_fn(struct usb_driver_binding *_binding, uint8_t dev);
typedef  void usb_driver_disconnect_done__rx_method_fn(struct usb_driver_binding *_binding, uint8_t resp);
typedef  void usb_driver_get_scsi_dev__rx_method_fn(struct usb_driver_binding *_binding);
typedef  void usb_driver_send_dev__rx_method_fn(struct usb_driver_binding *_binding, usb_driver_scsi_dev_t dev);
typedef  void usb_driver_read_scsi__rx_method_fn(struct usb_driver_binding *_binding, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num, uint32_t buff, uint8_t cache);
typedef  void usb_driver_resp_read_scsi__rx_method_fn(struct usb_driver_binding *_binding, uint8_t resp);
typedef  void usb_driver_write_scsi__rx_method_fn(struct usb_driver_binding *_binding, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num, uint32_t buff, uint8_t cache);
typedef  void usb_driver_resp_write_scsi__rx_method_fn(struct usb_driver_binding *_binding, uint8_t resp);
typedef  void usb_driver_sync_cache__rx_method_fn(struct usb_driver_binding *_binding, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num);
typedef  void usb_driver_resp_sync__rx_method_fn(struct usb_driver_binding *_binding, uint8_t resp);

/*
 * Struct type for holding the args for each msg
 */
struct usb_driver_probe__args {
    uint8_t dev;
    uint8_t class;
    uint8_t subclass;
    uint8_t protocol;
};
struct usb_driver_probe_done__args {
    uint8_t resp;
    uint8_t address;
};
struct usb_driver_disconnect__args {
    uint8_t dev;
};
struct usb_driver_disconnect_done__args {
    uint8_t resp;
};
struct usb_driver_send_dev__args {
    usb_driver_scsi_dev_t dev;
};
struct usb_driver_read_scsi__args {
    usb_driver_scsi_dev_t dev;
    uint32_t start;
    uint16_t num;
    uint32_t buff;
    uint8_t cache;
};
struct usb_driver_resp_read_scsi__args {
    uint8_t resp;
};
struct usb_driver_write_scsi__args {
    usb_driver_scsi_dev_t dev;
    uint32_t start;
    uint16_t num;
    uint32_t buff;
    uint8_t cache;
};
struct usb_driver_resp_write_scsi__args {
    uint8_t resp;
};
struct usb_driver_sync_cache__args {
    usb_driver_scsi_dev_t dev;
    uint32_t start;
    uint16_t num;
};
struct usb_driver_resp_sync__args {
    uint8_t resp;
};

/*
 * Union type for all message arguments
 */
union usb_driver_arg_union {
    struct usb_driver_probe__args probe;
    struct usb_driver_probe_done__args probe_done;
    struct usb_driver_disconnect__args disconnect;
    struct usb_driver_disconnect_done__args disconnect_done;
    struct usb_driver_send_dev__args send_dev;
    struct usb_driver_read_scsi__args read_scsi;
    struct usb_driver_resp_read_scsi__args resp_read_scsi;
    struct usb_driver_write_scsi__args write_scsi;
    struct usb_driver_resp_write_scsi__args resp_write_scsi;
    struct usb_driver_sync_cache__args sync_cache;
    struct usb_driver_resp_sync__args resp_sync;
};

/*
 * VTable struct definition for the interface (transmit)
 */
struct usb_driver_tx_vtbl {
    usb_driver_probe__tx_method_fn *probe;
    usb_driver_probe_done__tx_method_fn *probe_done;
    usb_driver_disconnect__tx_method_fn *disconnect;
    usb_driver_disconnect_done__tx_method_fn *disconnect_done;
    usb_driver_get_scsi_dev__tx_method_fn *get_scsi_dev;
    usb_driver_send_dev__tx_method_fn *send_dev;
    usb_driver_read_scsi__tx_method_fn *read_scsi;
    usb_driver_resp_read_scsi__tx_method_fn *resp_read_scsi;
    usb_driver_write_scsi__tx_method_fn *write_scsi;
    usb_driver_resp_write_scsi__tx_method_fn *resp_write_scsi;
    usb_driver_sync_cache__tx_method_fn *sync_cache;
    usb_driver_resp_sync__tx_method_fn *resp_sync;
};

/*
 * VTable struct definition for the interface (receive)
 */
struct usb_driver_rx_vtbl {
    usb_driver_probe__rx_method_fn *probe;
    usb_driver_probe_done__rx_method_fn *probe_done;
    usb_driver_disconnect__rx_method_fn *disconnect;
    usb_driver_disconnect_done__rx_method_fn *disconnect_done;
    usb_driver_get_scsi_dev__rx_method_fn *get_scsi_dev;
    usb_driver_send_dev__rx_method_fn *send_dev;
    usb_driver_read_scsi__rx_method_fn *read_scsi;
    usb_driver_resp_read_scsi__rx_method_fn *resp_read_scsi;
    usb_driver_write_scsi__rx_method_fn *write_scsi;
    usb_driver_resp_write_scsi__rx_method_fn *resp_write_scsi;
    usb_driver_sync_cache__rx_method_fn *sync_cache;
    usb_driver_resp_sync__rx_method_fn *resp_sync;
};

/*
 * Incoming connect callback type
 */
typedef  errval_t usb_driver_connect_fn(void *st, struct usb_driver_binding *binding);

/*
 * Export state struct
 */
struct usb_driver_export {
    struct idc_export common;
    usb_driver_connect_fn *connect_cb;
    struct waitset *waitset;
    void *st;
};

/*
 * Export function
 */
extern  errval_t usb_driver_export(void *st, idc_export_callback_fn *export_cb, usb_driver_connect_fn *connect_cb, struct waitset *ws, idc_export_flags_t flags);

/*
 * The Binding structure
 */
struct usb_driver_binding {
    /* Arbitrary user state pointer */
    void *st;
    
    /* Waitset used for receive handlers and send continuations */
    struct waitset *waitset;
    
    /* Mutex for the use of user code. */
    /* Must be held before any operation where there is a possibility of */
    /* concurrent access to the same binding (eg. multiple threads, or */
    /* asynchronous event handlers that use the same binding object). */
    struct event_mutex mutex;
    
    /* returns true iff a message could currently be accepted by the binding */
    usb_driver_can_send_fn *can_send;
    
    /* register an event for when a message is likely to be able to be sent */
    usb_driver_register_send_fn *register_send;
    
    /* change the waitset used by a binding */
    usb_driver_change_waitset_fn *change_waitset;
    
    /* perform control operations */
    usb_driver_control_fn *control;
    
    /* error handler for any async errors associated with this binding */
    /* must be filled-in by user */
    usb_driver_error_handler_fn *error_handler;
    
    /* Message send functions (filled in by binding) */
    struct usb_driver_tx_vtbl tx_vtbl;
    
    /* Incoming message handlers (filled in by user) */
    struct usb_driver_rx_vtbl rx_vtbl;
    
    /* Private state belonging to the binding implementation */
    union usb_driver_arg_union tx_union;
    union usb_driver_arg_union rx_union;
    struct waitset_chanstate register_chanstate;
    struct waitset_chanstate tx_cont_chanstate;
    enum usb_driver_msg_enum tx_msgnum;
    enum usb_driver_msg_enum rx_msgnum;
    int tx_msg_fragment;
    int rx_msg_fragment;
    size_t tx_str_pos;
    size_t rx_str_pos;
    size_t tx_str_len;
    size_t rx_str_len;
    struct event_queue_node event_qnode;
    usb_driver_bind_continuation_fn *bind_cont;
};

/*
 * Generic bind function
 */
extern  errval_t usb_driver_bind(iref_t i, usb_driver_bind_continuation_fn *_continuation, void *st, struct waitset *waitset, idc_bind_flags_t flags);

/*
 * Send wrappers
 */
static inline errval_t usb_driver_probe__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t dev, uint8_t class, uint8_t subclass, uint8_t protocol) __attribute__ ((always_inline));
static inline errval_t usb_driver_probe__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t dev, uint8_t class, uint8_t subclass, uint8_t protocol)
{
    return(((_binding->tx_vtbl).probe)(_binding, _continuation, dev, class, subclass, protocol));
}

static inline errval_t usb_driver_probe_done__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp, uint8_t address) __attribute__ ((always_inline));
static inline errval_t usb_driver_probe_done__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp, uint8_t address)
{
    return(((_binding->tx_vtbl).probe_done)(_binding, _continuation, resp, address));
}

static inline errval_t usb_driver_disconnect__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t dev) __attribute__ ((always_inline));
static inline errval_t usb_driver_disconnect__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t dev)
{
    return(((_binding->tx_vtbl).disconnect)(_binding, _continuation, dev));
}

static inline errval_t usb_driver_disconnect_done__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp) __attribute__ ((always_inline));
static inline errval_t usb_driver_disconnect_done__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp)
{
    return(((_binding->tx_vtbl).disconnect_done)(_binding, _continuation, resp));
}

static inline errval_t usb_driver_get_scsi_dev__tx(struct usb_driver_binding *_binding, struct event_closure _continuation) __attribute__ ((always_inline));
static inline errval_t usb_driver_get_scsi_dev__tx(struct usb_driver_binding *_binding, struct event_closure _continuation)
{
    return(((_binding->tx_vtbl).get_scsi_dev)(_binding, _continuation));
}

static inline errval_t usb_driver_send_dev__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev) __attribute__ ((always_inline));
static inline errval_t usb_driver_send_dev__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev)
{
    return(((_binding->tx_vtbl).send_dev)(_binding, _continuation, dev));
}

static inline errval_t usb_driver_read_scsi__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num, uint32_t buff, uint8_t cache) __attribute__ ((always_inline));
static inline errval_t usb_driver_read_scsi__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num, uint32_t buff, uint8_t cache)
{
    return(((_binding->tx_vtbl).read_scsi)(_binding, _continuation, dev, start, num, buff, cache));
}

static inline errval_t usb_driver_resp_read_scsi__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp) __attribute__ ((always_inline));
static inline errval_t usb_driver_resp_read_scsi__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp)
{
    return(((_binding->tx_vtbl).resp_read_scsi)(_binding, _continuation, resp));
}

static inline errval_t usb_driver_write_scsi__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num, uint32_t buff, uint8_t cache) __attribute__ ((always_inline));
static inline errval_t usb_driver_write_scsi__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num, uint32_t buff, uint8_t cache)
{
    return(((_binding->tx_vtbl).write_scsi)(_binding, _continuation, dev, start, num, buff, cache));
}

static inline errval_t usb_driver_resp_write_scsi__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp) __attribute__ ((always_inline));
static inline errval_t usb_driver_resp_write_scsi__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp)
{
    return(((_binding->tx_vtbl).resp_write_scsi)(_binding, _continuation, resp));
}

static inline errval_t usb_driver_sync_cache__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num) __attribute__ ((always_inline));
static inline errval_t usb_driver_sync_cache__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, usb_driver_scsi_dev_t dev, uint32_t start, uint16_t num)
{
    return(((_binding->tx_vtbl).sync_cache)(_binding, _continuation, dev, start, num));
}

static inline errval_t usb_driver_resp_sync__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp) __attribute__ ((always_inline));
static inline errval_t usb_driver_resp_sync__tx(struct usb_driver_binding *_binding, struct event_closure _continuation, uint8_t resp)
{
    return(((_binding->tx_vtbl).resp_sync)(_binding, _continuation, resp));
}


/*
 * Backend-specific includes
 */
#ifdef CONFIG_FLOUNDER_BACKEND_LMP
#include <if/usb_driver_lmp_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_LMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP
#include <if/usb_driver_ump_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP
#ifdef CONFIG_FLOUNDER_BACKEND_UMP_IPI
#include <if/usb_driver_ump_ipi_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UMP_IPI
#ifdef CONFIG_FLOUNDER_BACKEND_MULTIHOP
#include <if/usb_driver_multihop_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_MULTIHOP
#ifdef CONFIG_FLOUNDER_BACKEND_UDN
#include <if/usb_driver_udn_defs.h>
#endif // CONFIG_FLOUNDER_BACKEND_UDN
/*
 * And we're done
 */
#endif // __usb_driver_IF_H
