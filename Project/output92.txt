tile-monitor --simulator --functional --console --config tile64 --sim-args -+- --symbols tilepro/sbin/bootloader --symbols tilepro/sbin/cpu -+- --wait --bootrom-file tilepro/sbin/cpu.bin
(0,3) Tilera Hypervisor, version 3.0.1.125620 2011-04-09 21:57:10
Bootloader starting.
Called hv_init.
Got a valid ASID range.
Successfully installed boot-up context.
cpu_id: 0
Installed page table!
base: 0xFD000000; size: 0x30F0; flags: 0x5; ret: 0xFD000000
base: 0xFD030000; size: 0x18E38; flags: 0x7; ret: 0xFD030000
base: 0xF00000; size: 0x8300; flags: 0x6; ret: 0xF00000
entry_point: 0xFD034F28
[Tile 0 coordinate; BSP: 1] : (0,0)
[Tile 0 initial SP] : 0xFCFFCF38
[Tile 0 initial LR] : 0xFD035068
[Physical memory range 1] : 0x0_00000000 to 0x0_3B000000
Physical Memory for core 0 - start: 0x0_13000000; end: 0x0_23000000; free: 0x0_10000000
Physical Memory for core 1 - start: 0x0_23000000; end: 0x0_27000000; free: 0x0_04000000
Physical Memory for core 2 - start: 0x0_27000000; end: 0x0_2B000000; free: 0x0_04000000
Physical Memory for core 3 - start: 0x0_2B000000; end: 0x0_2F000000; free: 0x0_04000000
Physical Memory for core 4 - start: 0x0_2F000000; end: 0x0_33000000; free: 0x0_04000000
Physical Memory for core 5 - start: 0x0_33000000; end: 0x0_37000000; free: 0x0_04000000
Physical Memory for core 6 - start: 0x0_37000000; end: 0x0_3B000000; free: 0x0_04000000
[Physical memory range 2] : 0x4_00000000 to 0x4_40000000
Physical Memory for core 7 - start: 0x4_00000000; end: 0x4_04000000; free: 0x0_04000000
Physical Memory for core 8 - start: 0x4_04000000; end: 0x4_08000000; free: 0x0_04000000
Physical Memory for core 9 - start: 0x4_08000000; end: 0x4_0C000000; free: 0x0_04000000
Physical Memory for core 10 - start: 0x4_0C000000; end: 0x4_10000000; free: 0x0_04000000
Physical Memory for core 11 - start: 0x4_10000000; end: 0x4_14000000; free: 0x0_04000000
Physical Memory for core 12 - start: 0x4_14000000; end: 0x4_18000000; free: 0x0_04000000
Physical Memory for core 13 - start: 0x4_18000000; end: 0x4_1C000000; free: 0x0_04000000
Physical Memory for core 14 - start: 0x4_1C000000; end: 0x4_20000000; free: 0x0_04000000
Physical Memory for core 15 - start: 0x4_20000000; end: 0x4_24000000; free: 0x0_04000000
Physical Memory for core 16 - start: 0x4_24000000; end: 0x4_28000000; free: 0x0_04000000
Physical Memory for core 17 - start: 0x4_28000000; end: 0x4_2C000000; free: 0x0_04000000
Physical Memory for core 18 - start: 0x4_2C000000; end: 0x4_30000000; free: 0x0_04000000
Physical Memory for core 19 - start: 0x4_30000000; end: 0x4_34000000; free: 0x0_04000000
Physical Memory for core 20 - start: 0x4_34000000; end: 0x4_38000000; free: 0x0_04000000
Physical Memory for core 21 - start: 0x4_38000000; end: 0x4_3C000000; free: 0x0_04000000
Physical Memory for core 22 - start: 0x4_3C000000; end: 0x4_40000000; free: 0x0_04000000
[Physical memory range 3] : 0x8_00000000 to 0x8_40000000
Physical Memory for core 23 - start: 0x8_00000000; end: 0x8_04000000; free: 0x0_04000000
Physical Memory for core 24 - start: 0x8_04000000; end: 0x8_08000000; free: 0x0_04000000
Physical Memory for core 25 - start: 0x8_08000000; end: 0x8_0C000000; free: 0x0_04000000
Physical Memory for core 26 - start: 0x8_0C000000; end: 0x8_10000000; free: 0x0_04000000
Physical Memory for core 27 - start: 0x8_10000000; end: 0x8_14000000; free: 0x0_04000000
Physical Memory for core 28 - start: 0x8_14000000; end: 0x8_18000000; free: 0x0_04000000
Physical Memory for core 29 - start: 0x8_18000000; end: 0x8_1C000000; free: 0x0_04000000
Physical Memory for core 30 - start: 0x8_1C000000; end: 0x8_20000000; free: 0x0_04000000
Physical Memory for core 31 - start: 0x8_20000000; end: 0x8_24000000; free: 0x0_04000000
Physical Memory for core 32 - start: 0x8_24000000; end: 0x8_28000000; free: 0x0_04000000
Physical Memory for core 33 - start: 0x8_28000000; end: 0x8_2C000000; free: 0x0_04000000
Physical Memory for core 34 - start: 0x8_2C000000; end: 0x8_30000000; free: 0x0_04000000
Physical Memory for core 35 - start: 0x8_30000000; end: 0x8_34000000; free: 0x0_04000000
Physical Memory for core 36 - start: 0x8_34000000; end: 0x8_38000000; free: 0x0_04000000
Physical Memory for core 37 - start: 0x8_38000000; end: 0x8_3C000000; free: 0x0_04000000
Physical Memory for core 38 - start: 0x8_3C000000; end: 0x8_40000000; free: 0x0_04000000
[Physical memory range 4] : 0xC_00000000 to 0xC_40000000
Physical Memory for core 39 - start: 0xC_00000000; end: 0xC_04000000; free: 0x0_04000000
Physical Memory for core 40 - start: 0xC_04000000; end: 0xC_08000000; free: 0x0_04000000
Physical Memory for core 41 - start: 0xC_08000000; end: 0xC_0C000000; free: 0x0_04000000
Physical Memory for core 42 - start: 0xC_0C000000; end: 0xC_10000000; free: 0x0_04000000
Physical Memory for core 43 - start: 0xC_10000000; end: 0xC_14000000; free: 0x0_04000000
Physical Memory for core 44 - start: 0xC_14000000; end: 0xC_18000000; free: 0x0_04000000
Physical Memory for core 45 - start: 0xC_18000000; end: 0xC_1C000000; free: 0x0_04000000
Physical Memory for core 46 - start: 0xC_1C000000; end: 0xC_20000000; free: 0x0_04000000
Physical Memory for core 47 - start: 0xC_20000000; end: 0xC_24000000; free: 0x0_04000000
Physical Memory for core 48 - start: 0xC_24000000; end: 0xC_28000000; free: 0x0_04000000
Physical Memory for core 49 - start: 0xC_28000000; end: 0xC_2C000000; free: 0x0_04000000
Physical Memory for core 50 - start: 0xC_2C000000; end: 0xC_30000000; free: 0x0_04000000
Physical Memory for core 51 - start: 0xC_30000000; end: 0xC_34000000; free: 0x0_04000000
Physical Memory for core 52 - start: 0xC_34000000; end: 0xC_38000000; free: 0x0_04000000
Physical Memory for core 53 - start: 0xC_38000000; end: 0xC_3C000000; free: 0x0_04000000
Physical Memory for core 54 - start: 0xC_3C000000; end: 0xC_40000000; free: 0x0_04000000
No more memory to serve core 55
Tile 0 is starting...
[Tile width]  : 8
[Tile height] : 8
Tile 0 is starting init...
Allocated physical - start: 0x0_13000000; size: 0x00800000; requested: 0x00800000; end: 0x0_13800000
Virtual address of page tables for init : 0x80000000
Allocated physical - start: 0x0_13800000; size: 0x00040000; requested: 0x00040000; end: 0x0_13840000
Calling spawn_module(...)...
spawn module: ./tilepro/sbin/init
Allocated physical - start: 0x0_13840000; size: 0x00010000; requested: 0x00010000; end: 0x0_13850000
Allocated physical - start: 0x0_13850000; size: 0x00010000; requested: 0x00010000; end: 0x0_13860000
Allocated physical - start: 0x0_13860000; size: 0x00010000; requested: 0x00010000; end: 0x0_13870000
Allocated physical - start: 0x0_13870000; size: 0x00010000; requested: 0x00010000; end: 0x0_13880000
Allocated physical - start: 0x0_13880000; size: 0x00010000; requested: 0x00010000; end: 0x0_13890000
Allocated physical - start: 0x0_13890000; size: 0x00010000; requested: 0x00010000; end: 0x0_138A0000
Allocated physical - start: 0x0_138A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_138B0000
Allocated physical - start: 0x0_138B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_138C0000
Allocated physical - start: 0x0_138C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_138D0000
Allocated physical - start: 0x0_138D0000; size: 0x00040000; requested: 0x00040000; end: 0x0_13910000
Allocated physical - start: 0x0_13910000; size: 0x00400000; requested: 0x00400000; end: 0x0_13D10000
Allocated physical - start: 0x0_13D10000; size: 0x00010000; requested: 0x00000800; end: 0x0_13D20000
Allocated physical - start: 0x0_13D20000; size: 0x00200000; requested: 0x00200000; end: 0x0_13F20000
Allocated physical - start: 0x0_13F20000; size: 0x00020000; requested: 0x00020000; end: 0x0_13F40000
Allocated physical - start: 0x0_13F40000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F50000
Allocated physical - start: 0x0_13F50000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F60000
Allocated physical - start: 0x0_13F60000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F70000
Allocated physical - start: 0x0_13F70000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F80000
Allocated physical - start: 0x0_13F80000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F90000
Allocated physical - start: 0x0_13F90000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FA0000
Allocated physical - start: 0x0_13FA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FB0000
Allocated physical - start: 0x0_13FB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FC0000
Allocated physical - start: 0x0_13FC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FD0000
Allocated physical - start: 0x0_13FD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FE0000
Allocated physical - start: 0x0_13FE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FF0000
Allocated physical - start: 0x0_13FF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14000000
Allocated physical - start: 0x0_14000000; size: 0x00010000; requested: 0x00010000; end: 0x0_14010000
Allocated physical - start: 0x0_14010000; size: 0x00010000; requested: 0x00010000; end: 0x0_14020000
Allocated physical - start: 0x0_14020000; size: 0x00010000; requested: 0x00010000; end: 0x0_14030000
Allocated physical - start: 0x0_14030000; size: 0x00010000; requested: 0x00010000; end: 0x0_14040000
Allocated physical - start: 0x0_14040000; size: 0x00010000; requested: 0x00010000; end: 0x0_14050000
Allocated physical - start: 0x0_14050000; size: 0x00010000; requested: 0x00010000; end: 0x0_14060000
Allocated physical - start: 0x0_14060000; size: 0x00010000; requested: 0x00010000; end: 0x0_14070000
Allocated physical - start: 0x0_14070000; size: 0x00010000; requested: 0x00010000; end: 0x0_14080000
Allocated physical - start: 0x0_14080000; size: 0x00010000; requested: 0x00010000; end: 0x0_14090000
Allocated physical - start: 0x0_14090000; size: 0x00010000; requested: 0x00010000; end: 0x0_140A0000
Allocated physical - start: 0x0_140A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140B0000
Allocated physical - start: 0x0_140B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140C0000
Allocated physical - start: 0x0_140C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140D0000
Allocated physical - start: 0x0_140D0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140E0000
Allocated physical - start: 0x0_140E0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140F0000
Allocated physical - start: 0x0_140F0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14100000
Allocated physical - start: 0x0_14100000; size: 0x00010000; requested: 0x00010000; end: 0x0_14110000
Allocated physical - start: 0x0_14110000; size: 0x00010000; requested: 0x00010000; end: 0x0_14120000
Allocated physical - start: 0x0_14120000; size: 0x00010000; requested: 0x00010000; end: 0x0_14130000
Allocated physical - start: 0x0_14130000; size: 0x00010000; requested: 0x00010000; end: 0x0_14140000
Allocated physical - start: 0x0_14140000; size: 0x00010000; requested: 0x00010000; end: 0x0_14150000
Allocated physical - start: 0x0_14150000; size: 0x00010000; requested: 0x00010000; end: 0x0_14160000
Allocated physical - start: 0x0_14160000; size: 0x00010000; requested: 0x00010000; end: 0x0_14170000
Allocated physical - start: 0x0_14170000; size: 0x00010000; requested: 0x00010000; end: 0x0_14180000
Allocated physical - start: 0x0_14180000; size: 0x00010000; requested: 0x00010000; end: 0x0_14190000
Allocated physical - start: 0x0_14190000; size: 0x00010000; requested: 0x00010000; end: 0x0_141A0000
Allocated physical - start: 0x0_141A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141B0000
Allocated physical - start: 0x0_141B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141C0000
Allocated physical - start: 0x0_141C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141D0000
Allocated physical - start: 0x0_141D0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141E0000
Allocated physical - start: 0x0_141E0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141F0000
Allocated physical - start: 0x0_141F0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14200000
Allocated physical - start: 0x0_14200000; size: 0x00010000; requested: 0x00010000; end: 0x0_14210000
Allocated physical - start: 0x0_14210000; size: 0x00010000; requested: 0x00010000; end: 0x0_14220000
Allocated physical - start: 0x0_14220000; size: 0x00010000; requested: 0x00010000; end: 0x0_14230000
Allocated physical - start: 0x0_14230000; size: 0x00010000; requested: 0x00010000; end: 0x0_14240000
Allocated physical - start: 0x0_14240000; size: 0x00010000; requested: 0x00010000; end: 0x0_14250000
Allocated physical - start: 0x0_14250000; size: 0x00010000; requested: 0x00010000; end: 0x0_14260000
Allocated physical - start: 0x0_14260000; size: 0x00010000; requested: 0x00010000; end: 0x0_14270000
Allocated physical - start: 0x0_14270000; size: 0x00010000; requested: 0x00010000; end: 0x0_14280000
Allocated physical - start: 0x0_14280000; size: 0x00010000; requested: 0x00010000; end: 0x0_14290000
Allocated physical - start: 0x0_14290000; size: 0x00010000; requested: 0x00010000; end: 0x0_142A0000
Allocated physical - start: 0x0_142A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142B0000
Allocated physical - start: 0x0_142B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142C0000
Allocated physical - start: 0x0_142C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142D0000
Allocated physical - start: 0x0_142D0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142E0000
Allocated physical - start: 0x0_142E0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142F0000
Allocated physical - start: 0x0_142F0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14300000
Allocated physical - start: 0x0_14300000; size: 0x00010000; requested: 0x00010000; end: 0x0_14310000
Allocated physical - start: 0x0_14310000; size: 0x00010000; requested: 0x00010000; end: 0x0_14320000
Allocated physical - start: 0x0_14320000; size: 0x00010000; requested: 0x00010000; end: 0x0_14330000
Allocated physical - start: 0x0_14330000; size: 0x00010000; requested: 0x00010000; end: 0x0_14340000
spawn_module(...) completed.
Creating page table caps...
Page table caps are done.
Creating module caps...
Allocated physical - start: 0x0_14340000; size: 0x00010000; requested: 0x00010000; end: 0x0_14350000
menulist_va : 0x81340000
Reading menu list...
Menu list content : 
./tilepro/menu.lst.modules
./tilepro/sbin/cpu loglevel=4
./tilepro/sbin/init
./tilepro/sbin/mem_serv
./tilepro/sbin/monitor
./tilepro/sbin/ramfsd boot
./tilepro/sbin/skb boot
./tilepro/sbin/spawnd boot boottilepro=1-5
./tilepro/sbin/startd boot

Loading module: ./tilepro/sbin/cpu loglevel=4
Allocated physical - start: 0x0_14350000; size: 0x00030000; requested: 0x00021424; end: 0x0_14380000
Loading module: ./tilepro/sbin/init 
Allocated physical - start: 0x0_14380000; size: 0x00120000; requested: 0x0011B540; end: 0x0_144A0000
Loading module: ./tilepro/sbin/mem_serv 
Allocated physical - start: 0x0_144A0000; size: 0x00110000; requested: 0x0010B430; end: 0x0_145B0000
Loading module: ./tilepro/sbin/monitor 
Allocated physical - start: 0x0_145B0000; size: 0x00170000; requested: 0x0016B840; end: 0x0_14720000
Loading module: ./tilepro/sbin/ramfsd boot
Allocated physical - start: 0x0_14720000; size: 0x00130000; requested: 0x0012B4C0; end: 0x0_14850000
Loading module: ./tilepro/sbin/skb boot
Allocated physical - start: 0x0_14850000; size: 0x00130000; requested: 0x0012B56C; end: 0x0_14980000
Loading module: ./tilepro/sbin/spawnd boot boottilepro=1-5
Allocated physical - start: 0x0_14980000; size: 0x001D0000; requested: 0x001CC9FC; end: 0x0_14B50000
Loading module: ./tilepro/sbin/startd boot
Allocated physical - start: 0x0_14B50000; size: 0x001B0000; requested: 0x001AC9E8; end: 0x0_14D00000
Module caps are done.
init virtual address : 0x81380000
Got command line: loglevel=4
Allocated physical - start: 0x0_14D00000; size: 0x000E0000; requested: 0x000E0000; end: 0x0_14DE0000
Allocated physical - start: 0x0_14DE0000; size: 0x00020000; requested: 0x00020000; end: 0x0_14E00000
Allocated physical - start: 0x0_14E00000; size: 0x00010000; requested: 0x00010000; end: 0x0_14E10000
Allocated physical - start: 0x0_14E10000; size: 0x00040000; requested: 0x00040000; end: 0x0_14E50000
init image load is done
init entry point: 0x01000020
Allocated physical - start: 0x0_14E50000; size: 0x00100000; requested: 0x00100000; end: 0x0_14F50000
Creating unused ram caps...
Unused RAM caps are done.
init kernel is ready.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Got a valid ASID range.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Successfully installed boot-up context.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Successfully installed boot-up context.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Successfully installed boot-up context.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Successfully installed boot-up context.
Got a valid ASID range.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
cpu_id: 1Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: cpu_id: Successfully installed boot-up context.
cpu_id: cpu_id: 2cpu_id: cpu_id: cpu_id: cpu_id: cpu_id: cpu_id: 3cpu_id: cpu_id: cpu_id: cpu_id: 4cpu_id: 5
cpu_id: cpu_id: 6cpu_id: cpu_id: 78cpu_id: 910
111213141516
17181920
21
2223
2425

26

















Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Got a valid ASID range.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Called hv_init.
Called hv_init.
Called hv_init.
Installed page table!
Called hv_init.
Got a valid ASID range.
Called hv_init.
Installed page table!
Called hv_init.
Installed page table!
Called hv_init.
Installed page table!
Installed page table!
Called hv_init.
Installed page table!
Installed page table!
Got a valid ASID range.
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Called hv_init.
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Successfully installed boot-up context.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
base: Got a valid ASID range.
Successfully installed boot-up context.
Got a valid ASID range.
base: Got a valid ASID range.
Successfully installed boot-up context.
base: Got a valid ASID range.
base: base: Got a valid ASID range.
Successfully installed boot-up context.
base: base: base: base: base: base: base: base: base: Successfully installed boot-up context.
base: base: base: base: base: base: Got a valid ASID range.
base: base: base: base: base: base: Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
0xFD000000Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
0xFD000000Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: 0xFD000000Successfully installed boot-up context.
0xFD0000000xFD000000Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: 0xFD0000000xFD0000000xFD0000000xFD000000Successfully installed boot-up context.
0xFD0000000xFD0000000xFD0000000xFD0000000xFD000000Successfully installed boot-up context.
cpu_id: 0xFD0000000xFD0000000xFD0000000xFD000000Successfully installed boot-up context.
0xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD00000027Successfully installed boot-up context.
cpu_id: cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: ; Successfully installed boot-up context.
cpu_id: 28cpu_id: ; cpu_id: cpu_id: cpu_id: 29; cpu_id: ; ; cpu_id: cpu_id: 30; ; ; ; cpu_id: ; ; ; ; ; cpu_id: 31; ; ; ; cpu_id: ; ; ; ; ; ; ; ; 
cpu_id: 3233cpu_id: cpu_id: 34cpu_id: cpu_id: 35size: cpu_id: 36
37size: 383940
size: 41size: size: 4243
size: size: size: size: 44size: size: size: size: size: 45
size: size: size: size: 46size: size: size: size: size: size: size: size: 47

4849
5051
0x30F052

0x30F0


0x30F0
0x30F00x30F0

0x30F00x30F00x30F00x30F0
0x30F00x30F00x30F00x30F00x30F0
0x30F00x30F00x30F00x30F0
0x30F00x30F00x30F00x30F00x30F00x30F00x30F00x30F0




; 
; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: 0x50x50x50x50x50x50x50x50x50x50x50x50x5Installed page table!
0x50x50x50x50x50x50x50x50x50x5Installed page table!
0x50x50x5Installed page table!
; ; ; ; ; ; ; Installed page table!
; ; ; ; ; ; ; ; base: ; ; ; Installed page table!
; ; ; ; ; ; ; base: ; ret: ret: ret: base: Installed page table!
ret: Installed page table!
ret: ret: Installed page table!
ret: Installed page table!
Installed page table!
Installed page table!
ret: Installed page table!
ret: base: Installed page table!
ret: Installed page table!
ret: ret: Installed page table!
ret: ret: ret: Installed page table!
Installed page table!
0xFD000000ret: ret: ret: Installed page table!
ret: ret: ret: base: ret: ret: ret: ret: Installed page table!
ret: 0xFD0000000xFD0000000xFD0000000xFD000000Installed page table!
0xFD0000000xFD000000base: 0xFD000000Installed page table!
base: 0xFD000000Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
0xFD000000base: base: base: 0xFD000000base: 0xFD000000base: 0xFD0000000xFD000000base: 0xFD000000base: 0xFD0000000xFD000000base: 0xFD0000000xFD000000base: ; base: 0xFD0000000xFD0000000xFD0000000xFD000000base: 0xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD000000base: ; 


; base: 
0xFD000000
0xFD000000base: 
base: base: base: base: 
base: 0xFD0000000xFD0000000xFD000000
0xFD000000
0xFD000000; 
0xFD000000
0xFD000000

0xFD000000

size: 0xFD0000000xFD000000



0xFD000000

; 




size: 0xFD000000size: 0xFD000000; ; 0xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD000000; ; ; ; ; size: ; ; ; 0x30F0; ; ; size: 0x30F0; 0x30F0; size: size: ; ; ; ; ; ; size: size: size: size: size: 0x30F0size: size: size: ; size: size: size: 0x30F0; size: ; size: 0x30F00x30F0size: size: size: size: size: size: 0x30F00x30F00x30F00x30F00x30F0; 0x30F00x30F00x30F0flags: 0x30F00x30F00x30F0; flags: 0x30F0flags: 0x30F0; ; 0x30F00x30F00x30F00x30F00x30F00x30F0; ; ; ; ; flags: ; ; ; 0x5; ; ; flags: 0x5; 0x5; flags: flags: ; ; ; ; ; ; flags: flags: flags: flags: flags: 0x5flags: flags: flags: ; flags: flags: flags: 0x5; flags: ; flags: 0x50x5flags: flags: flags: flags: flags: flags: 0x50x50x50x50x5; 0x50x50x5ret: 0x50x50x5; ret: 0x5ret: 0x5; ; 0x50x50x50x50x50x5; ; ; ; ; ret: ; ; ; 0xFD000000; ; ; ret: 0xFD000000; 0xFD000000; ret: ret: ; ; ; ; ; ; ret: ret: ret: ret: ret: ret: 0xFD000000ret: ret: 
ret: ret: ret: 0xFD000000
ret: 
ret: 0xFD0000000xFD000000ret: ret: ret: ret: ret: ret: 0xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD000000
0xFD0000000xFD0000000xFD0000000xFD0000000xFD000000
0xFD0000000xFD000000

0xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD000000

















base: base: 
base: base: base: base: 0xFD0300000xFD030000base: 0xFD0300000xFD0300000xFD0300000xFD030000; base: ; 0xFD030000base: ; base: ; ; base: ; size: base: base: size: 0xFD030000base: base: ; size: 0xFD030000size: 0xFD030000size: base: base: base: base: 0xFD030000size: base: base: 0x18E38base: base: 0xFD030000base: base: base: 0xFD0300000x18E38; 0xFD0300000xFD030000size: 0x18E38; 0x18E38; 0x18E380xFD0300000xFD0300000xFD0300000xFD030000; 0x18E380xFD0300000xFD030000; 0xFD0300000xFD030000; 0xFD0300000xFD0300000xFD030000; ; size: ; ; 0x18E38; size: ; size: ; ; ; ; ; size: ; ; ; flags: ; ; size: ; ; ; size: flags: 0x18E38size: size: ; flags: 0x18E38flags: 0x18E38flags: size: size: size: size: 0x18E38flags: size: size: 0x7size: size: 0x18E38size: size: size: 0x18E380x7; 0x18E380x18E38flags: 0x7; 0x7; 0x70x18E380x18E380x18E380x18E38; 0x70x18E380x18E38; 0x18E380x18E38; 0x18E380x18E380x18E38; ; flags: ; ; 0x7; flags: ; flags: ; ; ; ; ; flags: ; ; ; ret: ; ; flags: ; ; ; flags: ret: 0x7flags: flags: ; ret: 0x7ret: 0x7ret: flags: flags: flags: flags: 0x7ret: flags: flags: flags: 0xFD030000flags: 0x7flags: flags: flags: 0x70xFD030000; 0x70x7ret: 0xFD030000; 0xFD030000; 0xFD0300000x70x70x70x7; 0xFD0300000x70x70x7
0x7; 0x70x7base: 0x7; 
ret: ; base: ; base: 0xFD030000
ret: 
ret: 
; ; ; ; ret: 
; ; ; ; ret: ; ; 0xFD030000; ret: base: ret: 0xFD030000ret: 0xFD0300000xFD030000
0xFD0300000xFD030000base: ret: ret: ret: ret: 0xFD030000base: ret: base: ret: ret: ret: ret: 0xFD030000ret: ; ret: 0xFD0300000xFD0300000xFD030000base: 
base: base: base: base: base: 0xFD030000base: base: base: base: base: ; base: base: base: base: base: base: ; base: 
base: 
0xFD0300000xFD0300000xFD0300000xFD0300000xFD030000
0xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD030000
size: 0xFD0300000xFD030000
; 
0xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD030000
0xFD0300000xFD0300000xFD0300000xFD030000size: 0xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD030000size: 0xFD0300000xFD030000; 



; 
; 



0x18E38

size: ; ; ; ; ; ; ; ; ; ; 0x18E38; ; ; ; ; ; ; 0x18E38; ; size: size: size: ; 0x18E38size: size: size: size: size: size: size: size: size: size: ; size: size: size: size: size: size: size: ; size: size: 0x18E380x18E380x18E38flags: ; 0x18E380x18E380x18E380x18E380x18E380x18E380x18E380x18E380x18E380x18E38flags: 0x18E380x18E380x18E380x18E380x18E380x18E380x18E38flags: 0x18E380x18E38; ; ; 0x7flags: ; ; ; ; ; ; ; ; ; ; 0x7; ; ; ; ; ; ; 0x7; ; flags: flags: flags: ; 0x7flags: flags: flags: flags: flags: flags: flags: flags: flags: flags: ; flags: flags: flags: flags: flags: flags: flags: ; flags: flags: 0x70x70x7ret: ; 0x70x70x70x70x70x70x70x70x70x7ret: 0x70x70x70x70x70x70x7ret: 0x70x7; ; ; ret: 0xFD030000; ; ; ; ; ; ; ; ; ; 0xFD030000; ; ; ; ; ; ; 0xFD030000; ; ret: ret: ret: 0xFD030000
ret: ret: ret: ret: ret: ret: ret: ret: ret: ret: 
ret: ret: ret: ret: ret: ret: ret: 
ret: ret: 0xFD0300000xFD0300000xFD030000
0xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD030000





















dispatch it baby!
resume(pc=0x01000020, sp=0x80000000, tp=0x00070000, r0=0x00000000)
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: 53Successfully installed boot-up context.
cpu_id: cpu_id: 54cpu_id: cpu_id: 55cpu_id: cpu_id: 56
cpu_id: 5758
5960
6162
63






init: invoked as: init 65536
Installed page table!
Installed page table!
Installed page table!
base: Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
Installed page table!
base: 0xFD000000base: base: base: base: base: base: base: base: 0xFD000000base: ; 0xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD000000; size: 0xFD000000; ; ; ; ; ; ; ; size: 0x30F0; size: size: size: size: size: size: size: size: 0x30F0; size: 0x30F00x30F00x30F00x30F00x30F00x30F00x30F00x30F0; flags: 0x30F0; ; ; ; ; ; ; ; flags: 0x5; flags: flags: flags: flags: flags: flags: flags: flags: 0x5; flags: 0x50x50x50x50x50x50x50x5; ret: 0x5; ; ; ; ; ; ; ; ret: 0xFD000000; ret: ret: ret: ret: ret: ret: ret: ret: 0xFD000000
ret: 0xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD000000
0xFD000000








base: 0xFD030000; size: 0x18E38; flags: 0x7; base: ret: base: 0xFD030000base: base: 0xFD030000base: base: base: base: base: 0xFD030000base: ; 0xFD0300000xFD030000
0xFD0300000xFD0300000xFD0300000xFD0300000xFD030000; size: 0xFD030000; ; ; ; ; ; ; size: 0x18E38; size: size: size: size: size: size: size: 0x18E38; size: 0x18E380x18E380x18E380x18E380x18E380x18E380x18E38; flags: 0x18E38; ; ; ; ; ; ; flags: 0x7; flags: flags: flags: flags: flags: flags: flags: 0x7; flags: 0x70x70x70x70x70x70x7; ret: 0x7; ; ; ; ; ; ; ret: 0xFD030000; ret: ret: ret: ret: ret: ret: ret: 0xFD030000
ret: 0xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD030000
0xFD030000







base: 0xF00000; size: base: 0x83000xF00000; ; flags: base: size: base: 0x6base: 0xF000000x83000xF00000; base: 0xF00000; ; ; ret: 0xF00000; size: flags: size: 0xF00000; size: 0x83000x60x8300
size: 0x8300base: ; ; ; 0x8300; 0xF00000flags: ret: flags: ; flags: ; 0x60xF000000x6flags: 0x6size: ; 
; 0x6; 0x8300ret: ret: ; ret: ; base: 0xF000000xF00000ret: 0xF00000flags: 0xF00000

0xF00000
0x6; 
; size: ret: 0x83000xF00000; 
flags: base: base: 0x60xF000000xF00000; ; ; ret: size: size: base: 0xF000000x83000x83000xF00000
; ; ; flags: flags: size: base: 0x60x60x83000xF00000; base: ; base: ; ; ret: 0xF00000ret: 0xF00000flags: size: 0xF00000; base: 0xF00000; 0x60x8300
size: 0xF00000
size: ; ; 0x8300; 0x8300ret: flags: ; size: ; 0xF000000x6flags: 0x8300flags: 
base: ; base: base: base: base: 0x6base: ; base: base: base: 0x6base: base: 0xF00000ret: 0xF000000xF000000xF000000xF00000; 0xF00000flags: 0xF000000xF000000xF00000; 0xF000000xF00000; 0xF00000; ; ; ; ret: ; 0x6; ; ; ret: ; ; size: 
size: size: size: size: 0xF00000size: ; size: size: size: 0xF00000size: size: 0x83000x83000x83000x83000x8300
0x8300ret: 0x83000x83000x8300
0x83000x8300; ; ; ; ; ; 0xF00000; ; ; ; ; flags: flags: flags: flags: flags: flags: 
flags: flags: flags: flags: flags: 0x60x60x60x60x60x60x60x60x60x60x6; ; ; ; ; ; ; ; ; ; ; ret: ret: ret: ret: ret: ret: ret: ret: ret: ret: ret: 0xF000000xF000000xF000000xF000000xF000000xF000000xF000000xF000000xF000000xF000000xF00000










base: 0xF00000; size: 0x8300; flags: base: 0x60xF00000; ; ret: size: base: 0xF000000x83000xF00000
; ; base: flags: size: 0xF000000x60x8300; ; ; size: ret: flags: 0x83000xF000000x6; 
; flags: ret: 0x60xF00000; 
ret: 0xF00000
base: base: base: base: base: base: base: 0xF00000base: base: base: base: base: 0xF00000base: base: base: base: 0xF00000base: base: base: base: base: 0xF00000base: 0xF000000xF000000xF00000; 0xF000000xF000000xF000000xF000000xF00000; 0xF000000xF000000xF000000xF00000; 0xF000000xF000000xF000000xF000000xF00000; 0xF00000; ; ; size: ; ; ; ; ; size: ; ; ; ; size: ; ; ; ; ; size: ; size: size: size: 0x8300size: size: size: size: size: 0x8300size: size: size: size: 0x8300size: size: size: size: size: 0x8300size: 0x83000x83000x8300; 0x83000x83000x83000x83000x8300; 0x83000x83000x83000x8300; 0x83000x83000x83000x83000x8300; 0x8300; ; ; flags: ; ; ; ; ; flags: ; ; ; ; flags: ; ; ; ; ; flags: ; flags: flags: flags: 0x6flags: flags: flags: flags: flags: 0x6flags: flags: flags: flags: 0x6flags: flags: flags: flags: flags: 0x6flags: 0x60x60x6; 0x60x60x60x60x6; 0x60x60x60x6; 0x60x60x60x60x6; 0x6; ; ; ret: ; ; ; ; ; ret: ; ; ; ; ret: ; ; ; ; ; ret: ; ret: ret: ret: 0xF00000ret: ret: ret: ret: ret: 0xF00000ret: ret: ret: ret: 0xF00000ret: ret: ret: ret: ret: 0xF00000ret: 0xF000000xF000000xF00000
0xF000000xF000000xF000000xF000000xF00000
0xF000000xF000000xF000000xF00000
0xF000000xF000000xF000000xF000000xF00000
0xF00000

















entry_point: 0xFD034F28
[Tile 1 coordinate; BSP: 0] : (1,0)
[Tile 1 initial SP] : 0xFCFECF38
entry_point: [Tile 1 initial LR] : 0xFD035068
0xFD034F28Core 1 waiting for startup

[Tile 2 coordinate; BSP: 0] : (2,0)
entry_point: entry_point: entry_point: entry_point: [Tile 2 initial SP] : 0xFCFDCF38
0xFD034F280xFD034F28entry_point: 0xFD034F280xFD034F28[Tile 2 initial LR] : 0xFD035068


0xFD034F28

entry_point: Core 2 waiting for startup
[Tile 3 coordinate; BSP: 0] : (3,0)
[Tile 4 coordinate; BSP: 0] : (4,0)

[Tile 5 coordinate; BSP: 0] : (5,0)
[Tile 6 coordinate; BSP: 0] : (6,0)
0xFD034F28[Tile 3 initial SP] : 0xFCFCCF38
[Tile 4 initial SP] : 0xFCFBCF38
[Tile 7 coordinate; BSP: 0] : (7,0)
entry_point: [Tile 5 initial SP] : 0xFCFACF38
entry_point: [Tile 6 initial SP] : 0xFCF9CF38

[Tile 3 initial LR] : 0xFD035068
[Tile 4 initial LR] : 0xFD035068
entry_point: [Tile 7 initial SP] : 0xFCF8CF38
0xFD034F28[Tile 5 initial LR] : 0xFD035068
0xFD034F28[Tile 6 initial LR] : 0xFD035068
[Tile 8 coordinate; BSP: 0] : (0,1)
Core 3 waiting for startup
Core 4 waiting for startup
0xFD034F28[Tile 7 initial LR] : 0xFD035068

Core 5 waiting for startup

entry_point: Core 6 waiting for startup
[Tile 8 initial SP] : 0xFCF7CF38

entry_point: Core 7 waiting for startup
[Tile 9 coordinate; BSP: 0] : (1,1)
entry_point: [Tile 10 coordinate; BSP: 0] : (2,1)
0xFD034F28[Tile 8 initial LR] : 0xFD035068
[Tile 11 coordinate; BSP: 0] : (3,1)
0xFD034F28entry_point: [Tile 9 initial SP] : 0xFCF6CF38
0xFD034F28[Tile 10 initial SP] : 0xFCF5CF38

Core 8 waiting for startup
[Tile 11 initial SP] : 0xFCF4CF38

0xFD034F28[Tile 9 initial LR] : 0xFD035068

[Tile 10 initial LR] : 0xFD035068
[Tile 12 coordinate; BSP: 0] : (4,1)
entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: [Tile 11 initial LR] : 0xFD035068
entry_point: entry_point: [Tile 13 coordinate; BSP: 0] : (5,1)
entry_point: entry_point: 
Core 9 waiting for startup
[Tile 14 coordinate; BSP: 0] : (6,1)
Core 10 waiting for startup
[Tile 12 initial SP] : 0xFCF3CF38
0xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F28Core 11 waiting for startup
0xFD034F280xFD034F28[Tile 13 initial SP] : 0xFCF2CF38
entry_point: 0xFD034F280xFD034F28[Tile 15 coordinate; BSP: 0] : (7,1)
[Tile 14 initial SP] : 0xFCF1CF38
entry_point: [Tile 12 initial LR] : 0xFD035068

entry_point: 


entry_point: 




[Tile 13 initial LR] : 0xFD035068
0xFD034F28

[Tile 15 initial SP] : 0xFCF0CF38
[Tile 14 initial LR] : 0xFD035068
0xFD034F28Core 12 waiting for startup
[Tile 16 coordinate; BSP: 0] : (0,2)
0xFD034F28[Tile 17 coordinate; BSP: 0] : (1,2)
[Tile 18 coordinate; BSP: 0] : (2,2)
[Tile 19 coordinate; BSP: 0] : (3,2)
0xFD034F28[Tile 20 coordinate; BSP: 0] : (4,2)
[Tile 21 coordinate; BSP: 0] : (5,2)
[Tile 22 coordinate; BSP: 0] : (6,2)
[Tile 23 coordinate; BSP: 0] : (7,2)
[Tile 24 coordinate; BSP: 0] : (0,3)
Core 13 waiting for startup

[Tile 25 coordinate; BSP: 0] : (1,3)
[Tile 26 coordinate; BSP: 0] : (2,3)
[Tile 15 initial LR] : 0xFD035068
Core 14 waiting for startup

[Tile 16 initial SP] : 0xFCEFCF38

[Tile 17 initial SP] : 0xFCEECF38
[Tile 18 initial SP] : 0xFCEDCF38
[Tile 19 initial SP] : 0xFCECCF38

[Tile 20 initial SP] : 0xFCEBCF38
[Tile 21 initial SP] : 0xFCEACF38
[Tile 22 initial SP] : 0xFCE9CF38
[Tile 23 initial SP] : 0xFCE8CF38
[Tile 24 initial SP] : 0xFCE7CF38
base: [Tile 27 coordinate; BSP: 0] : (3,3)
[Tile 25 initial SP] : 0xFCE6CF38
[Tile 26 initial SP] : 0xFCE5CF38
Core 15 waiting for startup
[Tile 28 coordinate; BSP: 0] : (4,3)
[Tile 16 initial LR] : 0xFD035068
[Tile 29 coordinate; BSP: 0] : (5,3)
[Tile 17 initial LR] : 0xFD035068
[Tile 18 initial LR] : 0xFD035068
[Tile 19 initial LR] : 0xFD035068
[Tile 30 coordinate; BSP: 0] : (6,3)
[Tile 20 initial LR] : 0xFD035068
[Tile 21 initial LR] : 0xFD035068
[Tile 22 initial LR] : 0xFD035068
[Tile 23 initial LR] : 0xFD035068
[Tile 24 initial LR] : 0xFD035068
0xF00000[Tile 27 initial SP] : 0xFCE4CF38
[Tile 25 initial LR] : 0xFD035068
base: [Tile 26 initial LR] : 0xFD035068
[Tile 28 initial SP] : 0xFCE3CF38
base: entry_point: base: base: base: base: base: base: base: base: Core 16 waiting for startup
entry_point: [Tile 29 initial SP] : 0xFCE2CF38
entry_point: Core 17 waiting for startup
entry_point: Core 18 waiting for startup
entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: Core 19 waiting for startup
entry_point: entry_point: entry_point: entry_point: [Tile 30 initial SP] : 0xFCE1CF38
Core 20 waiting for startup
Core 21 waiting for startup
Core 22 waiting for startup
Core 23 waiting for startup
Core 24 waiting for startup
; [Tile 27 initial LR] : 0xFD035068
Core 25 waiting for startup
0xF00000Core 26 waiting for startup
[Tile 28 initial LR] : 0xFD035068
0xF000000xFD034F280xF000000xF000000xF000000xF000000xF000000xF000000xF000000xF000000xFD034F28[Tile 29 initial LR] : 0xFD035068
0xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F28[Tile 30 initial LR] : 0xFD035068
size: Core 27 waiting for startup
; Core 28 waiting for startup
; 
; ; ; ; ; ; ; ; 
Core 29 waiting for startup




















Core 30 waiting for startup
0x8300size: size: size: size: [Tile 31 coordinate; BSP: 0] : (7,3)
size: size: size: size: size: size: [Tile 32 coordinate; BSP: 0] : (0,4)
[Tile 33 coordinate; BSP: 0] : (1,4)
[Tile 34 coordinate; BSP: 0] : (2,4)
[Tile 35 coordinate; BSP: 0] : (3,4)
[Tile 36 coordinate; BSP: 0] : (4,4)
[Tile 37 coordinate; BSP: 0] : (5,4)
[Tile 38 coordinate; BSP: 0] : (6,4)
[Tile 39 coordinate; BSP: 0] : (7,4)
[Tile 40 coordinate; BSP: 0] : (0,5)
[Tile 41 coordinate; BSP: 0] : (1,5)
[Tile 42 coordinate; BSP: 0] : (2,5)
[Tile 43 coordinate; BSP: 0] : (3,5)
[Tile 44 coordinate; BSP: 0] : (4,5)
[Tile 45 coordinate; BSP: 0] : (5,5)
[Tile 46 coordinate; BSP: 0] : (6,5)
[Tile 47 coordinate; BSP: 0] : (7,5)
[Tile 48 coordinate; BSP: 0] : (0,6)
[Tile 49 coordinate; BSP: 0] : (1,6)
[Tile 50 coordinate; BSP: 0] : (2,6)
[Tile 51 coordinate; BSP: 0] : (3,6)
[Tile 52 coordinate; BSP: 0] : (4,6)
; 0x83000x83000x83000x8300[Tile 31 initial SP] : 0xFCE0CF38
0x83000x83000x83000x83000x83000x8300[Tile 32 initial SP] : 0xFCDFCF38
[Tile 33 initial SP] : 0xFCDECF38
[Tile 34 initial SP] : 0xFCDDCF38
[Tile 35 initial SP] : 0xFCDCCF38
[Tile 36 initial SP] : 0xFCDBCF38
[Tile 37 initial SP] : 0xFCDACF38
[Tile 38 initial SP] : 0xFCD9CF38
[Tile 39 initial SP] : 0xFCD8CF38
[Tile 40 initial SP] : 0xFCD7CF38
[Tile 41 initial SP] : 0xFCD6CF38
[Tile 42 initial SP] : 0xFCD5CF38
[Tile 43 initial SP] : 0xFCD4CF38
[Tile 44 initial SP] : 0xFCD3CF38
[Tile 45 initial SP] : 0xFCD2CF38
[Tile 46 initial SP] : 0xFCD1CF38
[Tile 47 initial SP] : 0xFCD0CF38
[Tile 48 initial SP] : 0xFCCFCF38
[Tile 49 initial SP] : 0xFCCECF38
[Tile 50 initial SP] : 0xFCCDCF38
[Tile 51 initial SP] : 0xFCCCCF38
flags: [Tile 52 initial SP] : 0xFCCBCF38
; ; ; ; ; [Tile 31 initial LR] : 0xFD035068
; ; ; ; ; [Tile 32 initial LR] : 0xFD035068
[Tile 33 initial LR] : 0xFD035068
[Tile 34 initial LR] : 0xFD035068
[Tile 35 initial LR] : 0xFD035068
[Tile 36 initial LR] : 0xFD035068
[Tile 37 initial LR] : 0xFD035068
[Tile 38 initial LR] : 0xFD035068
[Tile 39 initial LR] : 0xFD035068
[Tile 40 initial LR] : 0xFD035068
[Tile 41 initial LR] : 0xFD035068
[Tile 42 initial LR] : 0xFD035068
[Tile 43 initial LR] : 0xFD035068
[Tile 44 initial LR] : 0xFD035068
[Tile 45 initial LR] : 0xFD035068
[Tile 46 initial LR] : 0xFD035068
[Tile 47 initial LR] : 0xFD035068
[Tile 48 initial LR] : 0xFD035068
[Tile 49 initial LR] : 0xFD035068
[Tile 50 initial LR] : 0xFD035068
[Tile 51 initial LR] : 0xFD035068
0x6flags: flags: [Tile 52 initial LR] : 0xFD035068
flags: flags: flags: flags: flags: Core 31 waiting for startup
flags: flags: flags: Core 32 waiting for startup
Core 33 waiting for startup
Core 34 waiting for startup
Core 35 waiting for startup
Core 36 waiting for startup
Core 37 waiting for startup
Core 38 waiting for startup
Core 39 waiting for startup
Core 40 waiting for startup
Core 41 waiting for startup
Core 42 waiting for startup
Core 43 waiting for startup
Core 44 waiting for startup
Core 45 waiting for startup
Core 46 waiting for startup
Core 47 waiting for startup
Core 48 waiting for startup
Core 49 waiting for startup
Core 50 waiting for startup
; Core 51 waiting for startup
0x60x6Core 52 waiting for startup
0x60x60x60x60x60x60x60x6ret: ; ; ; ; ; ; ; ; ; ; 0xF00000ret: ret: ret: ret: ret: ret: ret: ret: ret: ret: 
0xF000000xF000000xF000000xF000000xF000000xF000000xF000000xF000000xF000000xF00000









entry_point: 0xFD034F28
[Tile 53 coordinate; BSP: 0] : (5,6)
entry_point: [Tile 53 initial SP] : 0xFCCACF38
entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: 0xFD034F28[Tile 53 initial LR] : 0xFD035068
0xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F28
Core 53 waiting for startup









[Tile 54 coordinate; BSP: 0] : (6,6)
[Tile 55 coordinate; BSP: 0] : (7,6)
[Tile 56 coordinate; BSP: 0] : (0,7)
[Tile 57 coordinate; BSP: 0] : (1,7)
[Tile 58 coordinate; BSP: 0] : (2,7)
[Tile 59 coordinate; BSP: 0] : (3,7)
[Tile 60 coordinate; BSP: 0] : (4,7)
[Tile 61 coordinate; BSP: 0] : (5,7)
[Tile 62 coordinate; BSP: 0] : (6,7)
[Tile 63 coordinate; BSP: 0] : (7,7)
[Tile 54 initial SP] : 0xFCC9CF38
[Tile 55 initial SP] : 0xFCC8CF38
[Tile 56 initial SP] : 0xFCC7CF38
[Tile 57 initial SP] : 0xFCC6CF38
[Tile 58 initial SP] : 0xFCC5CF38
[Tile 59 initial SP] : 0xFCC4CF38
[Tile 60 initial SP] : 0xFCC3CF38
[Tile 61 initial SP] : 0xFCC2CF38
[Tile 62 initial SP] : 0xFCC1CF38
[Tile 63 initial SP] : 0xFCC0CF38
[Tile 54 initial LR] : 0xFD035068
[Tile 55 initial LR] : 0xFD035068
[Tile 56 initial LR] : 0xFD035068
[Tile 57 initial LR] : 0xFD035068
[Tile 58 initial LR] : 0xFD035068
[Tile 59 initial LR] : 0xFD035068
[Tile 60 initial LR] : 0xFD035068
[Tile 61 initial LR] : 0xFD035068
[Tile 62 initial LR] : 0xFD035068
[Tile 63 initial LR] : 0xFD035068
Core 54 waiting for startup
Core 55 waiting for startup
Core 56 waiting for startup
Core 57 waiting for startup
Core 58 waiting for startup
Core 59 waiting for startup
Core 60 waiting for startup
Core 61 waiting for startup
Core 62 waiting for startup
Core 63 waiting for startup
Spawning memory server (tilepro/sbin/mem_serv)...
Spawning monitor (tilepro/sbin/monitor)...
ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000020, sp=0x02123518, tp=0x02120000, r0=0x00000000)
argc value: 2
monitor: invoked as: tilepro/sbin/monitor 36831232
monitor.0: WARNING: bench_arch_init() have not been implemented!

set core id:0 
resume(pc=0x01000020, sp=0x02023518, tp=0x02020000, r0=0x00000000)
RAM allocator initialised, 192 MB (of 224 MB) available
mem_serv.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

mem_serv.0: lmp RX monitor.alloc_iref_reply

mem_serv.0: lmp TX monitor.set_mem_iref_request

monitor.0: lmp RX monitor.set_mem_iref_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

Spawning ramfsd on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000000, sp=0x02023518, tp=0x02020000, r0=0x00000000)
ramfsd.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

ramfsd.0: lmp RX monitor.get_monitor_rpc_iref_reply

ramfsd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

ramfsd.0: lmp RX monitor.bind_lmp_reply_client

ramfsd.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

ramfsd.0: lmp RX monitor.get_mem_iref_reply

ramfsd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

ramfsd.0: lmp RX monitor.bind_lmp_reply_client

ramfsd.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

ramfsd.0: lmp RX monitor.get_name_iref_reply

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd is starting!!!
ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor_blocking.get_bootinfo_call

monitor.0: lmp RX monitor_blocking.get_bootinfo_call

monitor.0: lmp TX monitor_blocking.get_bootinfo_response

ramfsd.0: lmp RX monitor_blocking.get_bootinfo_response

ramfsd.0: pre-populating from boot image...

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: ready

ramfsd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

ramfsd.0: lmp RX monitor.alloc_iref_reply

ramfsd.0: lmp TX monitor.set_ramfs_iref_request

monitor.0: lmp RX monitor.set_ramfs_iref_request

Spawning skb on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000000, sp=0x02033518, tp=0x02030000, r0=0x00000000)
skb.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

skb.0: lmp RX monitor.get_monitor_rpc_iref_reply

skb.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

skb.0: lmp RX monitor.bind_lmp_reply_client

skb.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

skb.0: lmp RX monitor.get_mem_iref_reply

skb.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

skb.0: lmp RX monitor.bind_lmp_reply_client

skb.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

skb.0: lmp RX monitor.get_name_iref_reply

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

skb.0: lmp RX monitor.alloc_iref_reply

skb.0: octopus_service: octopus rpc iref is: 5

skb.0: lmp TX monitor.set_name_iref_request

monitor.0: lmp RX monitor.set_name_iref_request

Spawning ./tilepro/sbin/spawnd on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

Spawning ./tilepro/sbin/startd on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000000, sp=0x02033518, tp=0x02030000, r0=0x00000000)
startd.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

startd.0: lmp RX monitor.get_monitor_rpc_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

startd.0: lmp RX monitor.get_mem_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

startd.0: lmp RX monitor.get_name_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

skb.0: lmp RX monitor.bind_lmp_service_request

skb.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX octopus.get_call

skb.0: lmp RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: lmp TX octopus.get_response

startd.0: lmp RX octopus.get_response

startd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

startd.0: lmp RX monitor.alloc_iref_reply

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX monitor.get_ramfs_iref_request

monitor.0: lmp RX monitor.get_ramfs_iref_request

monitor.0: lmp TX monitor.get_ramfs_iref_reply

startd.0: lmp RX monitor.get_ramfs_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

ramfsd.0: lmp RX monitor.bind_lmp_service_request

ramfsd.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX trivfs.getroot_call

ramfsd.0: lmp RX trivfs.getroot_call

ramfsd.0: lmp TX trivfs.getroot_response

startd.0: lmp RX trivfs.getroot_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX trivfs.bulk_init_call

ramfsd.0: lmp RX trivfs.bulk_init_call

ramfsd.0: lmp TX trivfs.bulk_init_response

startd.0: lmp RX trivfs.bulk_init_response

startd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

startd.0: lmp RX trivfs.lookup_response

startd.0: lmp TX trivfs.getattr_call

ramfsd.0: lmp RX trivfs.getattr_call

ramfsd.0: lmp TX trivfs.getattr_response

startd.0: lmp RX trivfs.getattr_response

startd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

startd.0: lmp RX trivfs.read_bulk_response

startd.0: lmp TX octopus.wait_for_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record all_spawnds_up

skb.0: waiting for: all_spawnds_up

skb.0: octopus_service: set_watch all_spawnds_up

resume(pc=0x01000000, sp=0x02043518, tp=0x02040000, r0=0x00000000)
spawnd.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

spawnd.0: lmp RX monitor.get_monitor_rpc_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

spawnd.0: lmp RX monitor.get_mem_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

spawnd.0: lmp RX monitor.get_name_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

skb.0: lmp RX monitor.bind_lmp_service_request

skb.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX octopus.get_call

skb.0: lmp RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: lmp TX octopus.get_response

spawnd.0: lmp RX octopus.get_response

spawnd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

spawnd.0: lmp RX monitor.alloc_iref_reply

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX monitor.get_ramfs_iref_request

monitor.0: lmp RX monitor.get_ramfs_iref_request

monitor.0: lmp TX monitor.get_ramfs_iref_reply

spawnd.0: lmp RX monitor.get_ramfs_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

ramfsd.0: lmp RX monitor.bind_lmp_service_request

ramfsd.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX trivfs.getroot_call

ramfsd.0: lmp RX trivfs.getroot_call

ramfsd.0: lmp TX trivfs.getroot_response

spawnd.0: lmp RX trivfs.getroot_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX trivfs.bulk_init_call

ramfsd.0: lmp RX trivfs.bulk_init_call

ramfsd.0: lmp TX trivfs.bulk_init_response

spawnd.0: lmp RX trivfs.bulk_init_response

spawnd.0: spawnd invoked on core 0 as:
 spawnd boot boottilepro=1-5 apicid=0
spawnd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

spawnd.0: lmp RX trivfs.lookup_response

spawnd.0: lmp TX trivfs.getattr_call

ramfsd.0: lmp RX trivfs.getattr_call

ramfsd.0: lmp TX trivfs.getattr_response

spawnd.0: lmp RX trivfs.getattr_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: gbootmodules is:
/tilepro/sbin/cpu loglevel=4
/tilepro/sbin/init
/tilepro/sbin/mem_serv
/tilepro/sbin/monitor
/tilepro/sbin/ramfsd boot
/tilepro/sbin/skb boot
/tilepro/sbin/spawnd boot boottilepro=1-5
/tilepro/sbin/startd boot


cmd line : boottilepro=1-5
spawnd.0: coreid 0 is arch id 0

spawnd.0: coreid 1 is arch id 1

spawnd.0: coreid 2 is arch id 2

spawnd.0: coreid 3 is arch id 3

spawnd.0: coreid 4 is arch id 4

spawnd.0: coreid 5 is arch id 5

id_from: 1 id_to: 5
 test1 case 0 max core id:255 

 test1 case 1 max core id:255 
aaa boot_core_request coreid: 1
spawnd.0: lmp TX monitor.boot_core_request

monitor.0: lmp RX monitor.boot_core_request

Monitor 0: booting tilepro core 1 as '/tilepro/sbin/cpu loglevel=4'

 aa my_core_id: 0 coreid:1 asid:2
aa intermon udn init on core: 0
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 0 dest_asid: 1 
monitor.0: udn_impl.c out_chan_id: 0

Core 1 received startup: 626F6F74
forloop i:0 cpu_id:1 chanid::0
aa core: 0 setup new binding id: 1
forloop i:1 cpu_id:1 chanid::0
forloop i:2 cpu_id:1 chanid::0

forloop i:3 cpu_id:1 chanid::0
 intermon_init coreid: 1
cpu_id:1 chanid::0
Allocated physical - start: 0x0_23000000; size: 0x00800000; requested: 0x00800000; end: 0x0_23800000
udn_intermon_init aa on core:0
inter.c arch_intermon_init my_core_id:0
aa test debugpoint boot.c
Virtual address of page tables for init : 0x90000000
Calling spawn_module(...)...
spawn module: monitor
Allocated physical - start: 0x0_23800000; size: 0x00010000; requested: 0x00010000; end: 0x0_23810000
Allocated physical - start: 0x0_23810000; size: 0x00010000; requested: 0x00010000; end: 0x0_23820000
Allocated physical - start: 0x0_23820000; size: 0x00010000; requested: 0x00010000; end: 0x0_23830000
Allocated physical - start: 0x0_23830000; size: 0x00010000; requested: 0x00010000; end: 0x0_23840000
Allocated physical - start: 0x0_23840000; size: 0x00010000; requested: 0x00010000; end: 0x0_23850000
Allocated physical - start: 0x0_23850000; size: 0x00010000; requested: 0x00010000; end: 0x0_23860000
Allocated physical - start: 0x0_23860000; size: 0x00010000; requested: 0x00010000; end: 0x0_23870000
Allocated physical - start: 0x0_23870000; size: 0x00010000; requested: 0x00010000; end: 0x0_23880000
Allocated physical - start: 0x0_23880000; size: 0x00010000; requested: 0x00010000; end: 0x0_23890000
Allocated physical - start: 0x0_23890000; size: 0x00040000; requested: 0x00040000; end: 0x0_238D0000
Allocated physical - start: 0x0_238D0000; size: 0x00010000; requested: 0x00000800; end: 0x0_238E0000
Allocated physical - start: 0x0_238E0000; size: 0x00200000; requested: 0x00200000; end: 0x0_23AE0000
Allocated physical - start: 0x0_23AE0000; size: 0x00020000; requested: 0x00020000; end: 0x0_23B00000
Allocated physical - start: 0x0_23B00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B10000
Allocated physical - start: 0x0_23B10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B20000
Allocated physical - start: 0x0_23B20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B30000
Allocated physical - start: 0x0_23B30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B40000
Allocated physical - start: 0x0_23B40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B50000
Allocated physical - start: 0x0_23B50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B60000
Allocated physical - start: 0x0_23B60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B70000
Allocated physical - start: 0x0_23B70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B80000
Allocated physical - start: 0x0_23B80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B90000
Allocated physical - start: 0x0_23B90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BA0000
Allocated physical - start: 0x0_23BA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BB0000
Allocated physical - start: 0x0_23BB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BC0000
Allocated physical - start: 0x0_23BC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BD0000
Allocated physical - start: 0x0_23BD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BE0000
Allocated physical - start: 0x0_23BE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BF0000
Allocated physical - start: 0x0_23BF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C00000
Allocated physical - start: 0x0_23C00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C10000
Allocated physical - start: 0x0_23C10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C20000
Allocated physical - start: 0x0_23C20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C30000
Allocated physical - start: 0x0_23C30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C40000
Allocated physical - start: 0x0_23C40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C50000
Allocated physical - start: 0x0_23C50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C60000
Allocated physical - start: 0x0_23C60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C70000
Allocated physical - start: 0x0_23C70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C80000
Allocated physical - start: 0x0_23C80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C90000
Allocated physical - start: 0x0_23C90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CA0000
Allocated physical - start: 0x0_23CA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CB0000
Allocated physical - start: 0x0_23CB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CC0000
Allocated physical - start: 0x0_23CC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CD0000
Allocated physical - start: 0x0_23CD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CE0000
Allocated physical - start: 0x0_23CE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CF0000
Allocated physical - start: 0x0_23CF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D00000
Allocated physical - start: 0x0_23D00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D10000
Allocated physical - start: 0x0_23D10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D20000
Allocated physical - start: 0x0_23D20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D30000
Allocated physical - start: 0x0_23D30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D40000
Allocated physical - start: 0x0_23D40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D50000
Allocated physical - start: 0x0_23D50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D60000
Allocated physical - start: 0x0_23D60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D70000
Allocated physical - start: 0x0_23D70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D80000
Allocated physical - start: 0x0_23D80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D90000
Allocated physical - start: 0x0_23D90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DA0000
Allocated physical - start: 0x0_23DA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DB0000
Allocated physical - start: 0x0_23DB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DC0000
Allocated physical - start: 0x0_23DC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DD0000
Allocated physical - start: 0x0_23DD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DE0000
Allocated physical - start: 0x0_23DE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DF0000
Allocated physical - start: 0x0_23DF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E00000
Allocated physical - start: 0x0_23E00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E10000
Allocated physical - start: 0x0_23E10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E20000
Allocated physical - start: 0x0_23E20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E30000
Allocated physical - start: 0x0_23E30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E40000
Allocated physical - start: 0x0_23E40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E50000
Allocated physical - start: 0x0_23E50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E60000
Allocated physical - start: 0x0_23E60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E70000
Allocated physical - start: 0x0_23E70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E80000
Allocated physical - start: 0x0_23E80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E90000
Allocated physical - start: 0x0_23E90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EA0000
Allocated physical - start: 0x0_23EA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EB0000
Allocated physical - start: 0x0_23EB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EC0000
Allocated physical - start: 0x0_23EC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23ED0000
Allocated physical - start: 0x0_23ED0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EE0000
Allocated physical - start: 0x0_23EE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EF0000
Allocated physical - start: 0x0_23EF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23F00000
spawn_module(...) completed.
Creating page table caps...
Page table caps are done.
load_init_image
Allocated physical - start: 0x0_23F00000; size: 0x00120000; requested: 0x00120000; end: 0x0_24020000
Allocated physical - start: 0x0_24020000; size: 0x00030000; requested: 0x00030000; end: 0x0_24050000
Allocated physical - start: 0x0_24050000; size: 0x00010000; requested: 0x00010000; end: 0x0_24060000
Allocated physical - start: 0x0_24060000; size: 0x00120000; requested: 0x00120000; end: 0x0_24180000
init image load is done
done
Allocated physical - start: 0x0_24180000; size: 0x00100000; requested: 0x00100000; end: 0x0_24280000
dispatch it baby!
resume(pc=0x01000020, sp=0x80000000, tp=0x00070000, r0=0x00000000)
argc value: 4
monitor: invoked as: monitor 0 chanid=0 archid=0
monitor.0: WARNING: bench_arch_init() have not been implemented!

set core id:1 
starting appcore
boot_arch_app_core argc value: 4
monitor: invoked as: monitor 0 chanid=0 archid=0
aa core id of the core that booted: 0 
outchan_id 0
aa intermon udn init2 on core: 1 src_core_id: 0 out_chan_id:0
aaa udn_endpoint_init 
monitor.1: create new incoming channel id : 0

 udn channel init, dest_core_id: 0, out_chan_id: 0 dest_asid: 2 
monitor.1: udn_impl.c out_chan_id: 0

aa test (core 1 ) to print binding pointer: 1145934776 

 intermon_init coreid: 0
udn_intermon_init aa on core:1
inter.c arch_intermon_init my_core_id:1

 aa debugpointer0 on core: 1 
 core:1
aaa request_mem_serv_iref on core: 1
monitor.1: udn TX intermon.mem_serv_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.mem_serv_iref_request

reques mem_serv_iref: 1
request core id 0 
request binding: 1145905792 
monitor.0: udn TX intermon.mem_serv_iref_reply

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.mem_serv_iref_reply

aatest iref: 1 and mem_serv_iref: 0
reply core id 1 
reply binding: 1145934776 

core (1) receiving udn message from chan 0... 

 aa debugpointer1
monitor.1: udn TX intermon.name_serv_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.name_serv_iref_request

monitor.0: udn TX intermon.name_serv_iref_reply

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.name_serv_iref_reply


core (1) receiving udn message from chan 0... 

 aa debugpointer2
monitor.1: udn TX intermon.ramfs_serv_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.ramfs_serv_iref_request

monitor.0: udn TX intermon.ramfs_serv_iref_reply

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.ramfs_serv_iref_reply


core (1) receiving udn message from chan 0... 
monitor.1: udn TX intermon.monitor_mem_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.monitor_mem_iref_request

monitor.0: udn TX intermon.monitor_mem_iref_reply

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.monitor_mem_iref_reply


core (1) receiving udn message from chan 0... 
aaa udn_endpoint_init 
monitor.1: create new incoming channel id : 1
monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
server received channel id 1 and destination core id 1 from the client
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 1

 udn channel init, dest_core_id: 1, out_chan_id: 1 dest_asid: 1 
monitor.0: udn_impl.c out_chan_id: 1

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)


core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
client received channel id 1 and destination core id 0 from the server
monitor.1: udn_impl.c out_chan_id: 1


core (1) receiving udn message from chan 0... 
monitor.1: udn TX intermon.spawnd_image_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.spawnd_image_request

monitor.0: udn TX intermon.spawnd_image_reply

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.spawnd_image_reply


core (1) receiving udn message from chan 0... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
Spawning spawnd on core 1
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
ERROR: monitor.1 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.1 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

monitor.1: udn TX intermon.monitor_initialized

monitor.1: sending udn message to core(0,0)
aaa core:1 booted app core
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
resume(pc=0x01000000, sp=0x02043518, tp=0x02040000, r0=0x00000000)
monitor.0: udn RX intermon.monitor_initialized

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX monitor.boot_core_reply

spawnd.0: lmp RX monitor.boot_core_reply


 test1 case 1 max core id:255 
aaa boot_core_request coreid: 2
spawnd.0: lmp TX monitor.boot_core_request


spawnd.1: lmp TX monitor.get_monitor_rpc_iref_request

core (0) receiving udn message from chan 0... 
monitor.1: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.boot_core_request
monitor.1: lmp TX monitor.get_monitor_rpc_iref_reply


Monitor 0: booting tilepro core 2 as '/tilepro/sbin/cpu loglevel=4'
spawnd.1: lmp RX monitor.get_monitor_rpc_iref_reply


 aa my_core_id: 0 coreid:2 asid:2
spawnd.1: lmp TX monitor.bind_lmp_client_request

aa intermon udn init on core: 0
aaa udn_endpoint_init 
monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX mem.allocate_call

monitor.1: lmp TX monitor.bind_lmp_reply_client

mem_serv.0: lmp RX mem.allocate_call

spawnd.1: lmp RX monitor.bind_lmp_reply_client

spawnd.1: lmp TX monitor.get_mem_iref_request

monitor.1: lmp RX monitor.get_mem_iref_request

monitor.1: lmp TX monitor.get_mem_iref_reply

spawnd.1: lmp RX monitor.get_mem_iref_reply

spawnd.1: lmp TX monitor.bind_lmp_client_request

mem_serv.0: lmp TX mem.allocate_response
monitor.1: lmp RX monitor.bind_lmp_client_request


monitor.1: lmp TX monitor.bind_lmp_reply_client

monitor.0: lmp RX mem.allocate_response
spawnd.1: lmp RX monitor.bind_lmp_reply_client


spawnd.1: lmp TX monitor.new_monitor_binding_request

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

spawnd.1: lmp RX monitor.new_monitor_binding_reply

monitor.0: create new incoming channel id : 2aaa udn_endpoint_init 


spawnd.1: create new incoming channel id : 0
 udn channel init, dest_core_id: 2, out_chan_id: 0 dest_asid: 1 
spawnd.1: lmp TX monitor.bind_udn_client_request

monitor.0: udn_impl.c out_chan_id: 0

monitor.1: lmp RX monitor.bind_udn_client_request

Core 2 received startup: 626F6F74
monitor.1: udn TX intermon.bind_udn_request
forloop i:0 cpu_id:2 chanid::0

forloop i:1 cpu_id:2 chanid::0
monitor.1: sending udn message to core(0,0)forloop i:2 cpu_id:2 chanid::2

forloop i:3 cpu_id:2 chanid::0
aa core: 0 setup new binding id: 2
cpu_id:2 chanid::2

 intermon_init coreid: 2
Allocated physical - start: 0x0_27000000; size: 0x00800000; requested: 0x00800000; end: 0x0_27800000
udn_intermon_init aa on core:0
inter.c arch_intermon_init my_core_id:0
aa test debugpoint boot.c
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

mem_serv.0: lmp RX monitor.bind_udn_service_request

server received channel id 0 and destination core id 1 from the client
aaa udn_endpoint_init 
mem_serv.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 0 dest_asid: 2 
mem_serv.0: udn_impl.c out_chan_id: 0

mem_serv.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

spawnd.1: lmp RX monitor.bind_udn_reply_client

client received channel id 0 and destination core id 0 from the server
spawnd.1: udn_impl.c out_chan_id: 0

spawnd.1: lmp TX monitor.get_name_iref_request


core (1) receiving udn message from chan 0... 
monitor.1: lmp RX monitor.get_name_iref_request

monitor.1: lmp TX monitor.get_name_iref_reply

spawnd.1: lmp RX monitor.get_name_iref_reply

spawnd.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

spawnd.1: lmp RX monitor.bind_lmp_reply_client

spawnd.1: lmp TX monitor.new_monitor_binding_request

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

spawnd.1: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.1: create new incoming channel id : 1
spawnd.1: lmp TX monitor.bind_udn_client_request

monitor.1: lmp RX monitor.bind_udn_client_request

monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

skb.0: lmp RX monitor.bind_udn_service_request

server received channel id 1 and destination core id 1 from the client
aaa udn_endpoint_init 
skb.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 1 dest_asid: 2 
skb.0: udn_impl.c out_chan_id: 1

skb.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

spawnd.1: lmp RX monitor.bind_udn_reply_client

client received channel id 0 and destination core id 0 from the server
spawnd.1: udn_impl.c out_chan_id: 0

spawnd.1: udn TX octopus.get_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(1,0)
skb.0: sending udn message to core(1,0)udn backend received message chan_id : 1



core (1) receiving udn message from chan 1... 
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.1: udn RX octopus.get_response


core (1) receiving udn message from chan 1... 
spawnd.1: lmp TX monitor.alloc_iref_request

monitor.1: lmp RX monitor.alloc_iref_request

monitor.1: lmp TX monitor.alloc_iref_reply

spawnd.1: lmp RX monitor.alloc_iref_reply

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

monitor.1: udn RX intermon.cap_send_request
core (0) receiving udn message from chan 0... 

monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

monitor.1: udn RX intermon.cap_send_request
core (0) receiving udn message from chan 0... 

monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

monitor.1: udn RX intermon.cap_send_request

core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

monitor.1: udn RX intermon.cap_send_request
core (0) receiving udn message from chan 0... 

monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: lmp TX monitor.get_ramfs_iref_request


core (1) receiving udn message from chan 0... 
monitor.1: lmp RX monitor.get_ramfs_iref_request

monitor.1: lmp TX monitor.get_ramfs_iref_reply

spawnd.1: lmp RX monitor.get_ramfs_iref_reply

spawnd.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

spawnd.1: lmp RX monitor.bind_lmp_reply_client

spawnd.1: lmp TX monitor.new_monitor_binding_request

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

spawnd.1: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.1: create new incoming channel id : 2
spawnd.1: lmp TX monitor.bind_udn_client_request

monitor.1: lmp RX monitor.bind_udn_client_request

monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

ramfsd.0: lmp RX monitor.bind_udn_service_request

server received channel id 2 and destination core id 1 from the client
aaa udn_endpoint_init 
ramfsd.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 2 dest_asid: 2 
ramfsd.0: udn_impl.c out_chan_id: 2

ramfsd.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

spawnd.1: lmp RX monitor.bind_udn_reply_client

client received channel id 0 and destination core id 0 from the server
spawnd.1: udn_impl.c out_chan_id: 0

spawnd.1: udn TX trivfs.getroot_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.getroot_call

ramfsd.0: udn TX trivfs.getroot_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.getroot_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
Virtual address of page tables for init : 0x90000000
monitor.1: udn RX intermon.cap_send_request
Calling spawn_module(...)...

spawn module: monitor
Allocated physical - start: 0x0_27800000; size: 0x00010000; requested: 0x00010000; end: 0x0_27810000
monitor.1: lmp TX monitor.cap_receive_request


core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response
Allocated physical - start: 0x0_27810000; size: 0x00010000; requested: 0x00010000; end: 0x0_27820000

Allocated physical - start: 0x0_27820000; size: 0x00010000; requested: 0x00010000; end: 0x0_27830000
spawnd.1: udn TX trivfs.bulk_init_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
Allocated physical - start: 0x0_27830000; size: 0x00010000; requested: 0x00010000; end: 0x0_27840000
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

Allocated physical - start: 0x0_27840000; size: 0x00010000; requested: 0x00010000; end: 0x0_27850000
core (1) receiving udn message from chan 2... 
spawnd.1: lmp TX monitor.cap_send_request

monitor.1: lmp RX monitor.cap_send_request
Allocated physical - start: 0x0_27850000; size: 0x00010000; requested: 0x00010000; end: 0x0_27860000

monitor.1: udn TX intermon.cap_send_request

monitor.1: sending udn message to core(0,0)
monitor.1: sending udn message to core(0,0)Allocated physical - start: 0x0_27860000; size: 0x00010000; requested: 0x00010000; end: 0x0_27870000

udn backend received message chan_id : 0

udn backend received message chan_id : 0
core (1) receiving udn message from chan 2... 

core (0) receiving udn message from chan 0... 
Allocated physical - start: 0x0_27870000; size: 0x00010000; requested: 0x00010000; end: 0x0_27880000

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.cap_send_request

monitor.0: lmp TX monitor.cap_receive_request
Allocated physical - start: 0x0_27880000; size: 0x00010000; requested: 0x00010000; end: 0x0_27890000

ramfsd.0: lmp RX monitor.cap_receive_request

ramfsd.0: udn RX trivfs.bulk_init_call

Allocated physical - start: 0x0_27890000; size: 0x00040000; requested: 0x00040000; end: 0x0_278D0000
ramfsd.0: udn TX trivfs.bulk_init_response

ramfsd.0: sending udn message to core(1,0)
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.bulk_init_response


core (1) receiving udn message from chan 2... 

core (0) receiving udn message from chan 0... 
spawnd.1: spawnd invoked on core 1 as:
 spawnd
spawnd.1: udn TX trivfs.lookup_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
Allocated physical - start: 0x0_278D0000; size: 0x00010000; requested: 0x00000800; end: 0x0_278E0000
udn backend received message chan_id : 0
Allocated physical - start: 0x0_278E0000; size: 0x00200000; requested: 0x00200000; end: 0x0_27AE0000

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.lookup_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.getattr_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.getattr_call

ramfsd.0: udn TX trivfs.getattr_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.getattr_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: gbootmodules is:
/tilepro/sbin/cpu loglevel=4
/tilepro/sbin/init
/tilepro/sbin/mem_serv
/tilepro/sbin/monitor
/tilepro/sbin/ramfsd boot
/tilepro/sbin/skb boot
/tilepro/sbin/spawnd boot boottilepro=1-5
/tilepro/sbin/startd boot


spawnd.1: lmp TX monitor.alloc_iref_request

monitor.1: lmp RX monitor.alloc_iref_request

monitor.1: lmp TX monitor.alloc_iref_reply

spawnd.1: lmp RX monitor.alloc_iref_reply

spawnd.1: udn TX octopus.set_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.1 { iref: 259 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: udn TX octopus.set_response

skb.0: sending udn message to core(1,0)
skb.0: sending udn message to core(1,0)udn backend received message chan_id : 1



core (1) receiving udn message from chan 1... 

core (0) receiving udn message from chan 0... 
core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.1: udn RX octopus.set_response


core (1) receiving udn message from chan 1... 
spawnd.1: udn TX octopus.set_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.1.ready { iref: 0 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1

skb.0: udn TX octopus.set_response

skb.0: sending udn message to core(1,0)
skb.0: sending udn message to core(1,0)udn backend received message chan_id : 1



core (1) receiving udn message from chan 1... 

core (0) receiving udn message from chan 0... 
core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.1: udn RX octopus.set_response


core (1) receiving udn message from chan 1... 
spawnd.1: udn TX octopus.wait_for_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.wait_for_call

skb.0: octopus_service: get record all_spawnds_up
Allocated physical - start: 0x0_27AE0000; size: 0x00020000; requested: 0x00020000; end: 0x0_27B00000

skb.0: waiting for: all_spawnds_up

skb.0: octopus_service: set_watch all_spawnds_up


core (0) receiving udn message from chan 0... 
Allocated physical - start: 0x0_27B00000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B10000
Allocated physical - start: 0x0_27B10000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B20000
Allocated physical - start: 0x0_27B20000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B30000
Allocated physical - start: 0x0_27B30000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B40000
Allocated physical - start: 0x0_27B40000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B50000
Allocated physical - start: 0x0_27B50000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B60000
Allocated physical - start: 0x0_27B60000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B70000
Allocated physical - start: 0x0_27B70000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B80000
Allocated physical - start: 0x0_27B80000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B90000
Allocated physical - start: 0x0_27B90000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BA0000
Allocated physical - start: 0x0_27BA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BB0000
Allocated physical - start: 0x0_27BB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BC0000
Allocated physical - start: 0x0_27BC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BD0000
Allocated physical - start: 0x0_27BD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BE0000
Allocated physical - start: 0x0_27BE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BF0000
Allocated physical - start: 0x0_27BF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C00000
Allocated physical - start: 0x0_27C00000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C10000
Allocated physical - start: 0x0_27C10000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C20000
Allocated physical - start: 0x0_27C20000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C30000
Allocated physical - start: 0x0_27C30000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C40000
Allocated physical - start: 0x0_27C40000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C50000
Allocated physical - start: 0x0_27C50000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C60000
Allocated physical - start: 0x0_27C60000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C70000
Allocated physical - start: 0x0_27C70000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C80000
Allocated physical - start: 0x0_27C80000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C90000
Allocated physical - start: 0x0_27C90000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CA0000
Allocated physical - start: 0x0_27CA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CB0000
Allocated physical - start: 0x0_27CB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CC0000
Allocated physical - start: 0x0_27CC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CD0000
Allocated physical - start: 0x0_27CD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CE0000
Allocated physical - start: 0x0_27CE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CF0000
Allocated physical - start: 0x0_27CF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D00000
Allocated physical - start: 0x0_27D00000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D10000
Allocated physical - start: 0x0_27D10000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D20000
Allocated physical - start: 0x0_27D20000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D30000
Allocated physical - start: 0x0_27D30000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D40000
Allocated physical - start: 0x0_27D40000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D50000
Allocated physical - start: 0x0_27D50000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D60000
Allocated physical - start: 0x0_27D60000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D70000
Allocated physical - start: 0x0_27D70000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D80000
Allocated physical - start: 0x0_27D80000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D90000
Allocated physical - start: 0x0_27D90000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DA0000
Allocated physical - start: 0x0_27DA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DB0000
Allocated physical - start: 0x0_27DB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DC0000
Allocated physical - start: 0x0_27DC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DD0000
Allocated physical - start: 0x0_27DD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DE0000
Allocated physical - start: 0x0_27DE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DF0000
Allocated physical - start: 0x0_27DF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E00000
Allocated physical - start: 0x0_27E00000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E10000
Allocated physical - start: 0x0_27E10000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E20000
Allocated physical - start: 0x0_27E20000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E30000
Allocated physical - start: 0x0_27E30000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E40000
Allocated physical - start: 0x0_27E40000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E50000
Allocated physical - start: 0x0_27E50000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E60000
Allocated physical - start: 0x0_27E60000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E70000
Allocated physical - start: 0x0_27E70000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E80000
Allocated physical - start: 0x0_27E80000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E90000
Allocated physical - start: 0x0_27E90000; size: 0x00010000; requested: 0x00010000; end: 0x0_27EA0000
Allocated physical - start: 0x0_27EA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27EB0000
Allocated physical - start: 0x0_27EB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27EC0000
Allocated physical - start: 0x0_27EC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27ED0000
Allocated physical - start: 0x0_27ED0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27EE0000
Allocated physical - start: 0x0_27EE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27EF0000
Allocated physical - start: 0x0_27EF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27F00000
spawn_module(...) completed.
Creating page table caps...
Page table caps are done.
load_init_image
Allocated physical - start: 0x0_27F00000; size: 0x00120000; requested: 0x00120000; end: 0x0_28020000
Allocated physical - start: 0x0_28020000; size: 0x00030000; requested: 0x00030000; end: 0x0_28050000
Allocated physical - start: 0x0_28050000; size: 0x00010000; requested: 0x00010000; end: 0x0_28060000
Allocated physical - start: 0x0_28060000; size: 0x00120000; requested: 0x00120000; end: 0x0_28180000
init image load is done
done
Allocated physical - start: 0x0_28180000; size: 0x00100000; requested: 0x00100000; end: 0x0_28280000
dispatch it baby!
resume(pc=0x01000020, sp=0x80000000, tp=0x00070000, r0=0x00000000)
argc value: 4
monitor: invoked as: monitor 0 chanid=2 archid=0
monitor.0: WARNING: bench_arch_init() have not been implemented!

set core id:2 
starting appcore
boot_arch_app_core argc value: 4
monitor: invoked as: monitor 0 chanid=2 archid=0
aa core id of the core that booted: 0 
outchan_id 2
aa intermon udn init2 on core: 2 src_core_id: 0 out_chan_id:2
aaa udn_endpoint_init 
monitor.2: create new incoming channel id : 0

 udn channel init, dest_core_id: 0, out_chan_id: 2 dest_asid: 2 
monitor.2: udn_impl.c out_chan_id: 2

aa test (core 2 ) to print binding pointer: 1145934776 

 intermon_init coreid: 0
udn_intermon_init aa on core:2
inter.c arch_intermon_init my_core_id:2

 aa debugpointer0 on core: 2 
 core:2
aaa request_mem_serv_iref on core: 2
monitor.2: udn TX intermon.mem_serv_iref_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.mem_serv_iref_request

reques mem_serv_iref: 1
request core id 0 
request binding: 1145898736 
monitor.0: udn TX intermon.mem_serv_iref_reply

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.mem_serv_iref_reply

aatest iref: 1 and mem_serv_iref: 0
reply core id 2 
reply binding: 1145934776 

core (2) receiving udn message from chan 0... 

 aa debugpointer1
monitor.2: udn TX intermon.name_serv_iref_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.name_serv_iref_request

monitor.0: udn TX intermon.name_serv_iref_reply

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.name_serv_iref_reply


core (2) receiving udn message from chan 0... 

 aa debugpointer2
monitor.2: udn TX intermon.ramfs_serv_iref_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.ramfs_serv_iref_request

monitor.0: udn TX intermon.ramfs_serv_iref_reply

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.ramfs_serv_iref_reply


core (2) receiving udn message from chan 0... 
monitor.2: udn TX intermon.monitor_mem_iref_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.monitor_mem_iref_request

monitor.0: udn TX intermon.monitor_mem_iref_reply

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.monitor_mem_iref_reply


core (2) receiving udn message from chan 0... 
aaa udn_endpoint_init 
monitor.2: create new incoming channel id : 1
monitor.2: udn TX intermon.bind_udn_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 2 
server received channel id 1 and destination core id 2 from the client
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 3

 udn channel init, dest_core_id: 2, out_chan_id: 1 dest_asid: 1 
monitor.0: udn_impl.c out_chan_id: 1

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(2,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(2,0)


core (2) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:2 server_core_id:0
client received channel id 3 and destination core id 0 from the server
monitor.2: udn_impl.c out_chan_id: 3


core (2) receiving udn message from chan 0... 
monitor.2: udn TX intermon.spawnd_image_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.spawnd_image_request

monitor.0: udn TX intermon.spawnd_image_reply

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.spawnd_image_reply


core (2) receiving udn message from chan 0... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1

core (0) receiving udn message from chan 3... 
core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
Spawning spawnd on core 2
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
ERROR: monitor.2 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.2 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

monitor.2: udn TX intermon.monitor_initialized

monitor.2: sending udn message to core(0,0)
aaa core:2 booted app core
udn backend received message chan_id : 2
resume(pc=0x01000000, sp=0x02043518, tp=0x02040000, r0=0x00000000)

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.monitor_initialized

while(1) id:2
monitor.0: udn TX intermon.new_monitor_notify

monitor.0: sending udn message to core(1,0)
break my_core_id:0 id=2 i=1
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.new_monitor_notify
monitor.0: lmp TX monitor.boot_core_reply


inter.c new_monitor_notify my_core_id:1 function got core_id:2
monitor.1: udn TX monitor_mem.alloc_call

spawnd.0: lmp RX monitor.boot_core_reply
monitor.1: sending udn message to core(0,0)


 test1 case 1 max core id:255 
aaa boot_core_request coreid: 3
spawnd.0: lmp TX monitor.boot_core_request


core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 1
monitor.0: lmp RX monitor.boot_core_request

Monitor 0: booting tilepro core 3 as '/tilepro/sbin/cpu loglevel=4'

 aa my_core_id: 0 coreid:3 asid:2
aa intermon udn init on core: 0
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 4

 udn channel init, dest_core_id: 3, out_chan_id: 0 dest_asid: 1 
spawnd.2: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: udn_impl.c out_chan_id: 0

monitor.2: lmp RX monitor.get_monitor_rpc_iref_request

Core 3 received startup: 626F6F74
monitor.2: lmp TX monitor.get_monitor_rpc_iref_reply
forloop i:0 cpu_id:3 chanid::0

forloop i:1 cpu_id:3 chanid::0
forloop i:2 cpu_id:3 chanid::2
spawnd.2: lmp RX monitor.get_monitor_rpc_iref_reply
forloop i:3 cpu_id:3 chanid::4

aa core: 0 setup new binding id: 3
cpu_id:3 chanid::4

 intermon_init coreid: 3
spawnd.2: lmp TX monitor.bind_lmp_client_request
Allocated physical - start: 0x0_2B000000; size: 0x00800000; requested: 0x00800000; end: 0x0_2B800000

udn_intermon_init aa on core:0
inter.c arch_intermon_init my_core_id:0
monitor.2: lmp RX monitor.bind_lmp_client_request

aa test debugpoint boot.c

core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.bind_lmp_reply_client

monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call
spawnd.2: lmp RX monitor.bind_lmp_reply_client


mem_serv.0: lmp RX mem.allocate_call

spawnd.2: lmp TX monitor.get_mem_iref_request

monitor.2: lmp RX monitor.get_mem_iref_request

monitor.2: lmp TX monitor.get_mem_iref_reply

mem_serv.0: lmp TX mem.allocate_response
spawnd.2: lmp RX monitor.get_mem_iref_reply


spawnd.2: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response
monitor.2: lmp RX monitor.bind_lmp_client_request


monitor.0: sending udn message to core(1,0)monitor.2: lmp TX monitor.bind_lmp_reply_client



core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.2: lmp RX monitor.bind_lmp_reply_client


core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response
spawnd.2: lmp TX monitor.new_monitor_binding_request



core (1) receiving udn message from chan 1... 
monitor.2: lmp RX monitor.new_monitor_binding_request

monitor.2: lmp TX monitor.new_monitor_binding_reply

spawnd.2: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.2: create new incoming channel id : 0
spawnd.2: lmp TX monitor.bind_udn_client_request
bindcores1 core_id:2 my_core_id:1 out_chan_id:2

aaa udn_endpoint_init 
monitor.2: lmp RX monitor.bind_udn_client_request
monitor.1: create new incoming channel id : 3


monitor.2: udn TX intermon.bind_udn_request
 udn channel init, dest_core_id: 1, out_chan_id: 2 dest_asid: 2 

monitor.1: udn_impl.c out_chan_id: 2
monitor.2: sending udn message to core(0,0)


 intermon_init coreid: 2
udn_intermon_init aa on core:1
inter.c arch_intermon_init my_core_id:1
udn backend received message chan_id : 2
monitor.1: udn TX intermon.bind_monitor_proxy

monitor.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_monitor_proxy


inter.c bind_monitor_proxy my_core_id:0
monitor.0: udn TX intermon.bind_monitor_request

monitor.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 


core (2) receiving udn message from chan 0... 
core (0) receiving udn message from chan 2... 
monitor.2: udn RX intermon.bind_monitor_request

monitor.0: udn RX intermon.bind_udn_request


inter.c bind_monitor_request my_core_id:2 core_id:1
aaa udn_support get core id: 2 
monitor.0: lmp TX monitor.bind_udn_service_request
2my_core_id: 2 get_new_in_chan: 3

bindcores2 core_id:1 my_core_id:2 out_chan_id:2
aaa udn_endpoint_init 
mem_serv.0: lmp RX monitor.bind_udn_service_request
monitor.2: create new incoming channel id : 4


server received channel id 0 and destination core id 2 from the client
 udn channel init, dest_core_id: 1, out_chan_id: 2 dest_asid: 2 
aaa udn_endpoint_init 
monitor.2: udn_impl.c out_chan_id: 2


 intermon_init coreid: 1
mem_serv.0: create new incoming channel id : 1udn_intermon_init aa on core:2

inter.c arch_intermon_init my_core_id:2

monitor.2: udn TX intermon.bind_monitor_reply

 udn channel init, dest_core_id: 2, out_chan_id: 0 dest_asid: 2 
monitor.2: sending udn message to core(0,0)

mem_serv.0: udn_impl.c out_chan_id: 0
core (2) receiving udn message from chan 0... 

mem_serv.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2
monitor.0: udn RX intermon.bind_monitor_reply


inter.c bind_monitor_reply my_core_id:0 seen_connections: 0

core (0) receiving udn message from chan 2... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(2,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(2,0)

core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:2 server_core_id:0
monitor.2: lmp TX monitor.bind_udn_reply_client

spawnd.2: lmp RX monitor.bind_udn_reply_client

client received channel id 1 and destination core id 0 from the server
spawnd.2: udn_impl.c out_chan_id: 1

spawnd.2: lmp TX monitor.get_name_iref_request


core (2) receiving udn message from chan 0... 
monitor.2: lmp RX monitor.get_name_iref_request

monitor.2: lmp TX monitor.get_name_iref_reply

spawnd.2: lmp RX monitor.get_name_iref_reply

spawnd.2: lmp TX monitor.bind_lmp_client_request

monitor.2: lmp RX monitor.bind_lmp_client_request

monitor.2: lmp TX monitor.bind_lmp_reply_client

spawnd.2: lmp RX monitor.bind_lmp_reply_client

spawnd.2: lmp TX monitor.new_monitor_binding_request

monitor.2: lmp RX monitor.new_monitor_binding_request

monitor.2: lmp TX monitor.new_monitor_binding_reply

spawnd.2: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.2: create new incoming channel id : 1
spawnd.2: lmp TX monitor.bind_udn_client_request

monitor.2: lmp RX monitor.bind_udn_client_request

monitor.2: udn TX intermon.bind_udn_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 2 
monitor.0: lmp TX monitor.bind_udn_service_request

skb.0: lmp RX monitor.bind_udn_service_request

server received channel id 1 and destination core id 2 from the client
aaa udn_endpoint_init 
skb.0: create new incoming channel id : 1

 udn channel init, dest_core_id: 2, out_chan_id: 1 dest_asid: 2 
skb.0: udn_impl.c out_chan_id: 1

skb.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 2... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(2,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(2,0)

core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:2 server_core_id:0
monitor.2: lmp TX monitor.bind_udn_reply_client

spawnd.2: lmp RX monitor.bind_udn_reply_client

client received channel id 1 and destination core id 0 from the server
spawnd.2: udn_impl.c out_chan_id: 1

spawnd.2: udn TX octopus.get_call

spawnd.2: sending udn message to core(0,0)
spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 

core (0) receiving udn message from chan 1... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(2,0)
skb.0: sending udn message to core(2,0)udn backend received message chan_id : 1



core (2) receiving udn message from chan 1... 
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.2: udn RX octopus.get_response


core (2) receiving udn message from chan 1... 
spawnd.2: lmp TX monitor.alloc_iref_request

monitor.2: lmp RX monitor.alloc_iref_request

monitor.2: lmp TX monitor.alloc_iref_reply

spawnd.2: lmp RX monitor.alloc_iref_reply

spawnd.2: udn TX mem.allocate_call

spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(2,0)
monitor.0: sending udn message to core(2,0)udn backend received message chan_id : 0


core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.cap_receive_request

spawnd.2: lmp RX monitor.cap_receive_request

spawnd.2: udn RX mem.allocate_response

spawnd.2: udn TX mem.allocate_call

spawnd.2: sending udn message to core(0,0)

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(2,0)
monitor.0: sending udn message to core(2,0)udn backend received message chan_id : 0


core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.cap_receive_request

spawnd.2: lmp RX monitor.cap_receive_request

spawnd.2: udn RX mem.allocate_response

spawnd.2: udn TX mem.allocate_call

spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (2) receiving udn message from chan 0... 

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(2,0)
monitor.0: sending udn message to core(2,0)udn backend received message chan_id : 0


core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.cap_receive_request

spawnd.2: lmp RX monitor.cap_receive_request

spawnd.2: udn RX mem.allocate_response

spawnd.2: udn TX mem.allocate_call

spawnd.2: sending udn message to core(0,0)

udn backend received message chan_id : 1
core (2) receiving udn message from chan 0... 

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(2,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(2,0)

core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.cap_receive_request

spawnd.2: lmp RX monitor.cap_receive_request

spawnd.2: udn RX mem.allocate_response

spawnd.2: lmp TX monitor.get_ramfs_iref_request


core (2) receiving udn message from chan 0... 
monitor.2: lmp RX monitor.get_ramfs_iref_request

monitor.2: lmp TX monitor.get_ramfs_iref_reply

spawnd.2: lmp RX monitor.get_ramfs_iref_reply

spawnd.2: lmp TX monitor.bind_lmp_client_request

monitor.2: lmp RX monitor.bind_lmp_client_request

monitor.2: lmp TX monitor.bind_lmp_reply_client

spawnd.2: lmp RX monitor.bind_lmp_reply_client

spawnd.2: lmp TX monitor.new_monitor_binding_request

monitor.2: lmp RX monitor.new_monitor_binding_request

monitor.2: lmp TX monitor.new_monitor_binding_reply

spawnd.2: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
Virtual address of page tables for init : 0x90000000
spawnd.2: create new incoming channel id : 2Calling spawn_module(...)...

spawn module: monitor
spawnd.2: lmp TX monitor.bind_udn_client_request
Allocated physical - start: 0x0_2B800000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B810000

monitor.2: lmp RX monitor.bind_udn_client_request

monitor.2: udn TX intermon.bind_udn_request
Allocated physical - start: 0x0_2B810000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B820000

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2
Allocated physical - start: 0x0_2B820000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B830000

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 2 
monitor.0: lmp TX monitor.bind_udn_service_request
Allocated physical - start: 0x0_2B830000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B840000

ramfsd.0: lmp RX monitor.bind_udn_service_request

server received channel id 2 and destination core id 2 from the client
Allocated physical - start: 0x0_2B840000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B850000
aaa udn_endpoint_init 
ramfsd.0: create new incoming channel id : 1

 udn channel init, dest_core_id: 2, out_chan_id: 2 dest_asid: 2 
ramfsd.0: udn_impl.c out_chan_id: 2
Allocated physical - start: 0x0_2B850000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B860000

ramfsd.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 2... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor
Allocated physical - start: 0x0_2B860000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B870000

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(2,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(2,0)
Allocated physical - start: 0x0_2B870000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B880000
core (2) receiving udn message from chan 0... 


core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.bind_udn_reply
Allocated physical - start: 0x0_2B880000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B890000

aaa intermon_bind_udn_reply my_core_id:2 server_core_id:0
monitor.2: lmp TX monitor.bind_udn_reply_client

spawnd.2: lmp RX monitor.bind_udn_reply_client
Allocated physical - start: 0x0_2B890000; size: 0x00040000; requested: 0x00040000; end: 0x0_2B8D0000

client received channel id 1 and destination core id 0 from the server
spawnd.2: udn_impl.c out_chan_id: 1

spawnd.2: udn TX trivfs.getroot_call

spawnd.2: sending udn message to core(0,0)

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
ramfsd.0: udn RX trivfs.getroot_call

ramfsd.0: udn TX trivfs.getroot_response

ramfsd.0: sending udn message to core(2,0)

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 2
Allocated physical - start: 0x0_2B8D0000; size: 0x00010000; requested: 0x00000800; end: 0x0_2B8E0000

core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2B8E0000; size: 0x00200000; requested: 0x00200000; end: 0x0_2BAE0000
spawnd.2: udn RX trivfs.getroot_response


core (2) receiving udn message from chan 2... 
spawnd.2: udn TX mem.allocate_call

spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(2,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(2,0)
monitor.0: sending udn message to core(2,0)udn backend received message chan_id : 0


core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.cap_receive_request

spawnd.2: lmp RX monitor.cap_receive_request

spawnd.2: udn RX mem.allocate_response

spawnd.2: udn TX trivfs.bulk_init_call

spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (2) receiving udn message from chan 0... 

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 2

core (2) receiving udn message from chan 2... 
spawnd.2: lmp TX monitor.cap_send_request

monitor.2: lmp RX monitor.cap_send_request

monitor.2: udn TX intermon.cap_send_request

monitor.2: sending udn message to core(0,0)
monitor.2: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (2) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.cap_send_request

monitor.0: lmp TX monitor.cap_receive_request

ramfsd.0: lmp RX monitor.cap_receive_request

ramfsd.0: udn RX trivfs.bulk_init_call

ramfsd.0: udn TX trivfs.bulk_init_response

ramfsd.0: sending udn message to core(2,0)
udn backend received message chan_id : 2

core (2) receiving udn message from chan 2... 
spawnd.2: udn RX trivfs.bulk_init_response



core (2) receiving udn message from chan 2... 
core (0) receiving udn message from chan 2... 
spawnd.2: spawnd invoked on core 2 as:
 spawnd
spawnd.2: udn TX trivfs.lookup_call

spawnd.2: sending udn message to core(0,0)
spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 

core (0) receiving udn message from chan 1... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(2,0)

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 2

core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2BAE0000; size: 0x00020000; requested: 0x00020000; end: 0x0_2BB00000
spawnd.2: udn RX trivfs.lookup_response


core (2) receiving udn message from chan 2... 
spawnd.2: udn TX trivfs.getattr_call

spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BB00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB10000
Allocated physical - start: 0x0_2BB10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB20000

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BB20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB30000
ramfsd.0: udn RX trivfs.getattr_call
Allocated physical - start: 0x0_2BB30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB40000

ramfsd.0: udn TX trivfs.getattr_response
Allocated physical - start: 0x0_2BB40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB50000

ramfsd.0: sending udn message to core(2,0)Allocated physical - start: 0x0_2BB50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB60000


core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 2
Allocated physical - start: 0x0_2BB60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB70000

core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2BB70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB80000
spawnd.2: udn RX trivfs.getattr_response
Allocated physical - start: 0x0_2BB80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB90000


Allocated physical - start: 0x0_2BB90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBA0000
core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2BBA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBB0000
spawnd.2: udn TX trivfs.read_bulk_call
Allocated physical - start: 0x0_2BBB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBC0000

spawnd.2: sending udn message to core(0,0)Allocated physical - start: 0x0_2BBC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBD0000

Allocated physical - start: 0x0_2BBD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBE0000
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BBE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBF0000

Allocated physical - start: 0x0_2BBF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC00000
core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BC00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC10000
ramfsd.0: udn RX trivfs.read_bulk_call
Allocated physical - start: 0x0_2BC10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC20000

ramfsd.0: udn TX trivfs.read_bulk_response
Allocated physical - start: 0x0_2BC20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC30000

ramfsd.0: sending udn message to core(2,0)Allocated physical - start: 0x0_2BC30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC40000


udn backend received message chan_id : 2
Allocated physical - start: 0x0_2BC40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC50000

core (0) receiving udn message from chan 1... 
core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2BC50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC60000
spawnd.2: udn RX trivfs.read_bulk_response

Allocated physical - start: 0x0_2BC60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC70000

core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2BC70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC80000
spawnd.2: gbootmodules is:
/tilepro/sbin/cpu loglevel=4
/tilepro/sbin/init
/tilepro/sbin/mem_serv
/tilepro/sbin/monitor
/tilepro/sbin/ramfsd boot
/tilepro/sbin/skb boot
/tilepro/sbin/spawnd boot boottilepro=1-5
/tilepro/sbin/startd boot

Allocated physical - start: 0x0_2BC80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC90000

Allocated physical - start: 0x0_2BC90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCA0000
spawnd.2: lmp TX monitor.alloc_iref_request
Allocated physical - start: 0x0_2BCA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCB0000

Allocated physical - start: 0x0_2BCB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCC0000
monitor.2: lmp RX monitor.alloc_iref_request
Allocated physical - start: 0x0_2BCC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCD0000

monitor.2: lmp TX monitor.alloc_iref_reply
Allocated physical - start: 0x0_2BCD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCE0000

Allocated physical - start: 0x0_2BCE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCF0000
spawnd.2: lmp RX monitor.alloc_iref_reply
Allocated physical - start: 0x0_2BCF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD00000

Allocated physical - start: 0x0_2BD00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD10000
spawnd.2: udn TX octopus.set_call

Allocated physical - start: 0x0_2BD10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD20000
spawnd.2: sending udn message to core(0,0)
Allocated physical - start: 0x0_2BD20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD30000
spawnd.2: sending udn message to core(0,0)Allocated physical - start: 0x0_2BD30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD40000

Allocated physical - start: 0x0_2BD40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD50000
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BD50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD60000
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BD60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD70000

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BD70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD80000

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BD80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD90000
skb.0: udn RX octopus.set_call
Allocated physical - start: 0x0_2BD90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDA0000

skb.0: octopus_service:  set_handler: spawn.2 { iref: 515 }
Allocated physical - start: 0x0_2BDA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDB0000

Allocated physical - start: 0x0_2BDB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDC0000
skb.0: octopus_service: found record: all_spawnds_up
Allocated physical - start: 0x0_2BDC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDD0000

skb.0: octopus_service: found record: spawn.1
Allocated physical - start: 0x0_2BDD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDE0000

skb.0: octopus_service: found record: spawn.1.ready
Allocated physical - start: 0x0_2BDE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDF0000

Allocated physical - start: 0x0_2BDF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE00000
skb.0: udn TX octopus.set_response
Allocated physical - start: 0x0_2BE00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE10000

skb.0: sending udn message to core(2,0)Allocated physical - start: 0x0_2BE10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE20000

skb.0: sending udn message to core(2,0)udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BE20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE30000


core (2) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BE30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE40000


core (2) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BE40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE50000
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BE50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE60000
spawnd.2: udn RX octopus.set_response

Allocated physical - start: 0x0_2BE60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE70000

core (0) receiving udn message from chan 1... 
core (2) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BE70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE80000
spawnd.2: udn TX octopus.set_call

Allocated physical - start: 0x0_2BE80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE90000
spawnd.2: sending udn message to core(0,0)Allocated physical - start: 0x0_2BE90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BEA0000

udn backend received message chan_id : 1
spawnd.2: sending udn message to core(0,0)Allocated physical - start: 0x0_2BEA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BEB0000

Allocated physical - start: 0x0_2BEB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BEC0000
Allocated physical - start: 0x0_2BEC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BED0000
Allocated physical - start: 0x0_2BED0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BEE0000

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BEE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BEF0000

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BEF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BF00000
udn backend received message chan_id : 1
spawn_module(...) completed.
Creating page table caps...
skb.0: udn RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.2.ready { iref: 0 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1

skb.0: octopus_service: found record: spawn.1.ready

skb.0: octopus_service: found record: spawn.2

skb.0: udn TX octopus.set_response

skb.0: sending udn message to core(2,0)
skb.0: sending udn message to core(2,0)udn backend received message chan_id : 1



core (2) receiving udn message from chan 1... 

core (0) receiving udn message from chan 1... 
core (2) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.2: udn RX octopus.set_response


core (2) receiving udn message from chan 1... 
spawnd.2: udn TX octopus.wait_for_call

spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
skb.0: udn RX octopus.wait_for_call

skb.0: octopus_service: get record all_spawnds_up

skb.0: waiting for: all_spawnds_up

skb.0: octopus_service: set_watch all_spawnds_up


core (0) receiving udn message from chan 1... 
Page table caps are done.
load_init_image
Allocated physical - start: 0x0_2BF00000; size: 0x00120000; requested: 0x00120000; end: 0x0_2C020000
Allocated physical - start: 0x0_2C020000; size: 0x00030000; requested: 0x00030000; end: 0x0_2C050000
Allocated physical - start: 0x0_2C050000; size: 0x00010000; requested: 0x00010000; end: 0x0_2C060000
Allocated physical - start: 0x0_2C060000; size: 0x00120000; requested: 0x00120000; end: 0x0_2C180000
init image load is done
done
Allocated physical - start: 0x0_2C180000; size: 0x00100000; requested: 0x00100000; end: 0x0_2C280000
dispatch it baby!
resume(pc=0x01000020, sp=0x80000000, tp=0x00070000, r0=0x00000000)
argc value: 4
monitor: invoked as: monitor 0 chanid=4 archid=0
monitor.0: WARNING: bench_arch_init() have not been implemented!

set core id:3 
starting appcore
boot_arch_app_core argc value: 4
monitor: invoked as: monitor 0 chanid=4 archid=0
aa core id of the core that booted: 0 
outchan_id 4
aa intermon udn init2 on core: 3 src_core_id: 0 out_chan_id:4
aaa udn_endpoint_init 
monitor.3: create new incoming channel id : 0

 udn channel init, dest_core_id: 0, out_chan_id: 4 dest_asid: 2 
monitor.3: udn_impl.c out_chan_id: 4

aa test (core 3 ) to print binding pointer: 1145934776 

 intermon_init coreid: 0
udn_intermon_init aa on core:3
inter.c arch_intermon_init my_core_id:3

 aa debugpointer0 on core: 3 
 core:3
aaa request_mem_serv_iref on core: 3
monitor.3: udn TX intermon.mem_serv_iref_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.mem_serv_iref_request

reques mem_serv_iref: 1
request core id 0 
request binding: 1146087160 
monitor.0: udn TX intermon.mem_serv_iref_reply

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 4... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.mem_serv_iref_reply

aatest iref: 1 and mem_serv_iref: 0
reply core id 3 
reply binding: 1145934776 

core (3) receiving udn message from chan 0... 

 aa debugpointer1
monitor.3: udn TX intermon.name_serv_iref_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.name_serv_iref_request

monitor.0: udn TX intermon.name_serv_iref_reply

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 4... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.name_serv_iref_reply


core (3) receiving udn message from chan 0... 

 aa debugpointer2
monitor.3: udn TX intermon.ramfs_serv_iref_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.ramfs_serv_iref_request

monitor.0: udn TX intermon.ramfs_serv_iref_reply

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 4... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.ramfs_serv_iref_reply


core (3) receiving udn message from chan 0... 
monitor.3: udn TX intermon.monitor_mem_iref_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.monitor_mem_iref_request

monitor.0: udn TX intermon.monitor_mem_iref_reply

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 4... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.monitor_mem_iref_reply


core (3) receiving udn message from chan 0... 
aaa udn_endpoint_init 
monitor.3: create new incoming channel id : 1
monitor.3: udn TX intermon.bind_udn_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 3 
server received channel id 1 and destination core id 3 from the client
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 5

 udn channel init, dest_core_id: 3, out_chan_id: 1 dest_asid: 1 
monitor.0: udn_impl.c out_chan_id: 1

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(3,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(3,0)


core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 4... 
core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:3 server_core_id:0
client received channel id 5 and destination core id 0 from the server
monitor.3: udn_impl.c out_chan_id: 5


core (3) receiving udn message from chan 0... 
monitor.3: udn TX intermon.spawnd_image_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.spawnd_image_request

monitor.0: udn TX intermon.spawnd_image_reply

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 4... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.spawnd_image_reply


core (3) receiving udn message from chan 0... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
Spawning spawnd on core 3
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1

core (0) receiving udn message from chan 5... 
core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(3,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
ERROR: monitor.3 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.3 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

monitor.3: udn TX intermon.monitor_initialized

monitor.3: sending udn message to core(0,0)
aaa core:3 booted app core
udn backend received message chan_id : 4
resume(pc=0x01000000, sp=0x02043518, tp=0x02040000, r0=0x00000000)

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.monitor_initialized

while(1) id:3
monitor.0: udn TX intermon.new_monitor_notify

monitor.0: sending udn message to core(1,0)
break my_core_id:0 id=3 i=1
udn backend received message chan_id : 0
while(1) id:3

core (1) receiving udn message from chan 0... 
monitor.0: udn TX intermon.new_monitor_notify
monitor.1: udn RX intermon.new_monitor_notify


monitor.0: sending udn message to core(2,0)inter.c new_monitor_notify my_core_id:1 function got core_id:3

break my_core_id:0 id=3 i=2
monitor.1: udn TX monitor_mem.alloc_call
udn backend received message chan_id : 0


monitor.1: sending udn message to core(0,0)core (2) receiving udn message from chan 0... 

monitor.2: udn RX intermon.new_monitor_notify

monitor.0: lmp TX monitor.boot_core_reply
inter.c new_monitor_notify my_core_id:2 function got core_id:3

monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
spawnd.0: lmp RX monitor.boot_core_reply


 test1 case 1 max core id:255 
aaa boot_core_request coreid: 4
spawnd.0: lmp TX monitor.boot_core_request


core (0) receiving udn message from chan 4... 
spawnd.3: lmp TX monitor.get_monitor_rpc_iref_request
udn backend received message chan_id : 1

udn backend received message chan_id : 3
monitor.3: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.boot_core_request
monitor.3: lmp TX monitor.get_monitor_rpc_iref_reply


Monitor 0: booting tilepro core 4 as '/tilepro/sbin/cpu loglevel=4'
spawnd.3: lmp RX monitor.get_monitor_rpc_iref_reply


 aa my_core_id: 0 coreid:4 asid:2
spawnd.3: lmp TX monitor.bind_lmp_client_request

aa intermon udn init on core: 0
aaa udn_endpoint_init 
monitor.3: lmp RX monitor.bind_lmp_client_request

monitor.0: create new incoming channel id : 6
monitor.3: lmp TX monitor.bind_lmp_reply_client


 udn channel init, dest_core_id: 4, out_chan_id: 0 dest_asid: 1 
spawnd.3: lmp RX monitor.bind_lmp_reply_client

monitor.0: udn_impl.c out_chan_id: 0

Core 4 received startup: 626F6F74
forloop i:0 cpu_id:4 chanid::0
spawnd.3: lmp TX monitor.get_mem_iref_request
forloop i:1 cpu_id:4 chanid::0

forloop i:2 cpu_id:4 chanid::2
aa core: 0 setup new binding id: 4
forloop i:3 cpu_id:4 chanid::4
monitor.3: lmp RX monitor.get_mem_iref_request
cpu_id:4 chanid::6


 intermon_init coreid: 4
Allocated physical - start: 0x0_2F000000; size: 0x00800000; requested: 0x00800000; end: 0x0_2F800000
monitor.3: lmp TX monitor.get_mem_iref_reply

udn_intermon_init aa on core:0
spawnd.3: lmp RX monitor.get_mem_iref_reply

inter.c arch_intermon_init my_core_id:0
aa test debugpoint boot.c
spawnd.3: lmp TX monitor.bind_lmp_client_request


core (0) receiving udn message from chan 1... 
monitor.3: lmp RX monitor.bind_lmp_client_request

monitor.0: udn RX monitor_mem.alloc_call
monitor.3: lmp TX monitor.bind_lmp_reply_client


monitor.0: lmp TX mem.allocate_call
spawnd.3: lmp RX monitor.bind_lmp_reply_client


mem_serv.0: lmp RX mem.allocate_call

spawnd.3: lmp TX monitor.new_monitor_binding_request

monitor.3: lmp RX monitor.new_monitor_binding_request

mem_serv.0: lmp TX mem.allocate_response
monitor.3: lmp TX monitor.new_monitor_binding_reply


monitor.0: lmp RX mem.allocate_response
spawnd.3: lmp RX monitor.new_monitor_binding_reply


monitor.0: udn TX monitor_mem.alloc_response
aaa udn_endpoint_init 

spawnd.3: create new incoming channel id : 0monitor.0: sending udn message to core(1,0)


spawnd.3: lmp TX monitor.bind_udn_client_request
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 

monitor.3: lmp RX monitor.bind_udn_client_request
core (1) receiving udn message from chan 1... 


monitor.1: udn RX monitor_mem.alloc_response
monitor.3: udn TX intermon.bind_udn_request



core (0) receiving udn message from chan 3... 
monitor.3: sending udn message to core(0,0)core (1) receiving udn message from chan 1... 

monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response
bindcores1 core_id:3 my_core_id:1 out_chan_id:4

aaa udn_endpoint_init 
monitor.0: sending udn message to core(2,0)monitor.1: create new incoming channel id : 5



udn backend received message chan_id : 1
 udn channel init, dest_core_id: 1, out_chan_id: 4 dest_asid: 2 

core (0) receiving udn message from chan 3... 
monitor.1: udn_impl.c out_chan_id: 4
core (2) receiving udn message from chan 1... 


udn backend received message chan_id : 4
monitor.2: udn RX monitor_mem.alloc_response
 intermon_init coreid: 3



udn_intermon_init aa on core:1
core (2) receiving udn message from chan 1... 
inter.c arch_intermon_init my_core_id:1
core (0) receiving udn message from chan 4... 
monitor.1: udn TX intermon.bind_monitor_proxy

monitor.0: udn RX intermon.bind_udn_request
monitor.1: sending udn message to core(0,0)


aaa udn_support get core id: 3 
core (1) receiving udn message from chan 0... 
monitor.0: lmp TX monitor.bind_udn_service_request

mem_serv.0: lmp RX monitor.bind_udn_service_request

bindcores1 core_id:3 my_core_id:2 out_chan_id:5
server received channel id 0 and destination core id 3 from the client
aaa udn_endpoint_init 
aaa udn_endpoint_init 
monitor.2: create new incoming channel id : 6

mem_serv.0: create new incoming channel id : 2 udn channel init, dest_core_id: 2, out_chan_id: 5 dest_asid: 2 


monitor.2: udn_impl.c out_chan_id: 5

 udn channel init, dest_core_id: 3, out_chan_id: 0 dest_asid: 2 

 intermon_init coreid: 3
mem_serv.0: udn_impl.c out_chan_id: 0
udn_intermon_init aa on core:2

inter.c arch_intermon_init my_core_id:2
mem_serv.0: lmp TX monitor.bind_udn_reply_monitor
monitor.2: udn TX intermon.bind_monitor_proxy


monitor.2: sending udn message to core(0,0)


core (0) receiving udn message from chan 4... 
core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
udn backend received message chan_id : 2
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(3,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(3,0)


core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.0: udn RX intermon.bind_monitor_proxy
monitor.3: udn RX intermon.bind_udn_reply



inter.c bind_monitor_proxy my_core_id:0
aaa intermon_bind_udn_reply my_core_id:3 server_core_id:0
monitor.0: udn TX intermon.bind_monitor_request
monitor.3: lmp TX monitor.bind_udn_reply_client


monitor.0: sending udn message to core(3,0)spawnd.3: lmp RX monitor.bind_udn_reply_client



core (0) receiving udn message from chan 0... 
client received channel id 2 and destination core id 0 from the server

spawnd.3: udn_impl.c out_chan_id: 2

core (0) receiving udn message from chan 2... 
spawnd.3: lmp TX monitor.get_name_iref_request

monitor.0: udn RX intermon.bind_monitor_proxy



core (3) receiving udn message from chan 0... 
inter.c bind_monitor_proxy my_core_id:0
udn backend received message chan_id : 0
monitor.0: udn TX intermon.bind_monitor_request
monitor.3: udn RX intermon.bind_monitor_request



monitor.0: sending udn message to core(3,0)inter.c bind_monitor_request my_core_id:3 core_id:1


core (0) receiving udn message from chan 2... 
2my_core_id: 3 get_new_in_chan: 3
bindcores2 core_id:1 my_core_id:3 out_chan_id:2
aaa udn_endpoint_init 
monitor.3: create new incoming channel id : 4

 udn channel init, dest_core_id: 1, out_chan_id: 2 dest_asid: 2 
monitor.3: udn_impl.c out_chan_id: 2

udn backend received message chan_id : 0

 intermon_init coreid: 1
udn_intermon_init aa on core:3
inter.c arch_intermon_init my_core_id:3
monitor.3: udn TX intermon.bind_monitor_reply

monitor.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 4
monitor.3: udn RX intermon.bind_monitor_request


inter.c bind_monitor_request my_core_id:3 core_id:2
2my_core_id: 3 get_new_in_chan: 6
bindcores2 core_id:2 my_core_id:3 out_chan_id:5
aaa udn_endpoint_init 
monitor.3: create new incoming channel id : 7

 udn channel init, dest_core_id: 2, out_chan_id: 5 dest_asid: 2 
monitor.3: udn_impl.c out_chan_id: 5


 intermon_init coreid: 2

udn_intermon_init aa on core:3
inter.c arch_intermon_init my_core_id:3
core (0) receiving udn message from chan 4... 
monitor.3: udn TX intermon.bind_monitor_reply

monitor.0: udn RX intermon.bind_monitor_reply
monitor.3: sending udn message to core(0,0)



core (3) receiving udn message from chan 0... 
inter.c bind_monitor_reply my_core_id:0 seen_connections: 1
monitor.3: lmp RX monitor.get_name_iref_request


monitor.3: lmp TX monitor.get_name_iref_reply
core (0) receiving udn message from chan 4... 

udn backend received message chan_id : 4
spawnd.3: lmp RX monitor.get_name_iref_reply

monitor.0: udn RX intermon.bind_monitor_reply

spawnd.3: lmp TX monitor.bind_lmp_client_request


inter.c bind_monitor_reply my_core_id:0 seen_connections: 2
monitor.3: lmp RX monitor.bind_lmp_client_request


core (0) receiving udn message from chan 4... 
monitor.3: lmp TX monitor.bind_lmp_reply_client

spawnd.3: lmp RX monitor.bind_lmp_reply_client

spawnd.3: lmp TX monitor.new_monitor_binding_request

monitor.3: lmp RX monitor.new_monitor_binding_request

monitor.3: lmp TX monitor.new_monitor_binding_reply

spawnd.3: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.3: create new incoming channel id : 1
spawnd.3: lmp TX monitor.bind_udn_client_request

monitor.3: lmp RX monitor.bind_udn_client_request

monitor.3: udn TX intermon.bind_udn_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 3 
monitor.0: lmp TX monitor.bind_udn_service_request

skb.0: lmp RX monitor.bind_udn_service_request

server received channel id 1 and destination core id 3 from the client
aaa udn_endpoint_init 
skb.0: create new incoming channel id : 2

 udn channel init, dest_core_id: 3, out_chan_id: 1 dest_asid: 2 
skb.0: udn_impl.c out_chan_id: 1

skb.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 4... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(3,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(3,0)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:3 server_core_id:0
monitor.3: lmp TX monitor.bind_udn_reply_client

spawnd.3: lmp RX monitor.bind_udn_reply_client

client received channel id 2 and destination core id 0 from the server
spawnd.3: udn_impl.c out_chan_id: 2

spawnd.3: udn TX octopus.get_call

spawnd.3: sending udn message to core(0,0)
spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(3,0)
skb.0: sending udn message to core(3,0)udn backend received message chan_id : 1



core (3) receiving udn message from chan 1... 
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.3: udn RX octopus.get_response


core (3) receiving udn message from chan 1... 
spawnd.3: lmp TX monitor.alloc_iref_request

monitor.3: lmp RX monitor.alloc_iref_request

monitor.3: lmp TX monitor.alloc_iref_reply

spawnd.3: lmp RX monitor.alloc_iref_reply

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(3,0)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(3,0)
monitor.0: sending udn message to core(3,0)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(3,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(3,0)
monitor.0: sending udn message to core(3,0)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(3,0)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(3,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(3,0)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(3,0)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(3,0)
monitor.0: sending udn message to core(3,0)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
Virtual address of page tables for init : 0x90000000
monitor.3: lmp TX monitor.cap_receive_request
Calling spawn_module(...)...

spawn module: monitor
Allocated physical - start: 0x0_2F800000; size: 0x00010000; requested: 0x00010000; end: 0x0_2F810000
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

Allocated physical - start: 0x0_2F810000; size: 0x00010000; requested: 0x00010000; end: 0x0_2F820000
spawnd.3: lmp TX monitor.get_ramfs_iref_request

Allocated physical - start: 0x0_2F820000; size: 0x00010000; requested: 0x00010000; end: 0x0_2F830000

core (3) receiving udn message from chan 0... 
monitor.3: lmp RX monitor.get_ramfs_iref_request

monitor.3: lmp TX monitor.get_ramfs_iref_reply

Allocated physical - start: 0x0_2F830000; size: 0x00010000; requested: 0x00010000; end: 0x0_2F840000
spawnd.3: lmp RX monitor.get_ramfs_iref_reply

spawnd.3: lmp TX monitor.bind_lmp_client_request

Allocated physical - start: 0x0_2F840000; size: 0x00010000; requested: 0x00010000; end: 0x0_2F850000
monitor.3: lmp RX monitor.bind_lmp_client_request

monitor.3: lmp TX monitor.bind_lmp_reply_client

spawnd.3: lmp RX monitor.bind_lmp_reply_client
Allocated physical - start: 0x0_2F850000; size: 0x00010000; requested: 0x00010000; end: 0x0_2F860000

spawnd.3: lmp TX monitor.new_monitor_binding_request

Allocated physical - start: 0x0_2F860000; size: 0x00010000; requested: 0x00010000; end: 0x0_2F870000
monitor.3: lmp RX monitor.new_monitor_binding_request

monitor.3: lmp TX monitor.new_monitor_binding_reply

Allocated physical - start: 0x0_2F870000; size: 0x00010000; requested: 0x00010000; end: 0x0_2F880000
spawnd.3: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.3: create new incoming channel id : 2
Allocated physical - start: 0x0_2F880000; size: 0x00010000; requested: 0x00010000; end: 0x0_2F890000
spawnd.3: lmp TX monitor.bind_udn_client_request

monitor.3: lmp RX monitor.bind_udn_client_request

Allocated physical - start: 0x0_2F890000; size: 0x00040000; requested: 0x00040000; end: 0x0_2F8D0000
monitor.3: udn TX intermon.bind_udn_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 3 
monitor.0: lmp TX monitor.bind_udn_service_request

ramfsd.0: lmp RX monitor.bind_udn_service_request

server received channel id 2 and destination core id 3 from the client
aaa udn_endpoint_init 
Allocated physical - start: 0x0_2F8D0000; size: 0x00010000; requested: 0x00000800; end: 0x0_2F8E0000
ramfsd.0: create new incoming channel id : 2Allocated physical - start: 0x0_2F8E0000; size: 0x00200000; requested: 0x00200000; end: 0x0_2FAE0000


 udn channel init, dest_core_id: 3, out_chan_id: 2 dest_asid: 2 
ramfsd.0: udn_impl.c out_chan_id: 2

ramfsd.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 4... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(3,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(3,0)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:3 server_core_id:0
monitor.3: lmp TX monitor.bind_udn_reply_client

spawnd.3: lmp RX monitor.bind_udn_reply_client

client received channel id 2 and destination core id 0 from the server
spawnd.3: udn_impl.c out_chan_id: 2

spawnd.3: udn TX trivfs.getroot_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2


core (3) receiving udn message from chan 0... 
core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.getroot_call

ramfsd.0: udn TX trivfs.getroot_response

ramfsd.0: sending udn message to core(3,0)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.getroot_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(3,0)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(3,0)
monitor.0: sending udn message to core(3,0)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX trivfs.bulk_init_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: lmp TX monitor.cap_send_request

monitor.3: lmp RX monitor.cap_send_request

monitor.3: udn TX intermon.cap_send_request

monitor.3: sending udn message to core(0,0)
monitor.3: sending udn message to core(0,0)udn backend received message chan_id : 4

udn backend received message chan_id : 4

core (3) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FAE0000; size: 0x00020000; requested: 0x00020000; end: 0x0_2FB00000

core (0) receiving udn message from chan 4... 

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.cap_send_request

monitor.0: lmp TX monitor.cap_receive_request

ramfsd.0: lmp RX monitor.cap_receive_request

Allocated physical - start: 0x0_2FB00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FB10000
ramfsd.0: udn RX trivfs.bulk_init_call
Allocated physical - start: 0x0_2FB10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FB20000

Allocated physical - start: 0x0_2FB20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FB30000
ramfsd.0: udn TX trivfs.bulk_init_response
Allocated physical - start: 0x0_2FB30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FB40000

ramfsd.0: sending udn message to core(3,0)Allocated physical - start: 0x0_2FB40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FB50000

udn backend received message chan_id : 2
Allocated physical - start: 0x0_2FB50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FB60000

core (3) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FB60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FB70000
spawnd.3: udn RX trivfs.bulk_init_response
Allocated physical - start: 0x0_2FB70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FB80000


Allocated physical - start: 0x0_2FB80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FB90000
core (3) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FB90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FBA0000
spawnd.3: spawnd invoked on core 3 as:
Allocated physical - start: 0x0_2FBA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FBB0000
 spawnd
spawnd.3: udn TX trivfs.lookup_call
Allocated physical - start: 0x0_2FBB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FBC0000


spawnd.3: sending udn message to core(0,0)Allocated physical - start: 0x0_2FBC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FBD0000

core (0) receiving udn message from chan 4... 
spawnd.3: sending udn message to core(0,0)Allocated physical - start: 0x0_2FBD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FBE0000

Allocated physical - start: 0x0_2FBE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FBF0000
Allocated physical - start: 0x0_2FBF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FC00000
udn backend received message chan_id : 2
Allocated physical - start: 0x0_2FC00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FC10000
udn backend received message chan_id : 2
Allocated physical - start: 0x0_2FC10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FC20000
Allocated physical - start: 0x0_2FC20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FC30000
Allocated physical - start: 0x0_2FC30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FC40000
Allocated physical - start: 0x0_2FC40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FC50000

Allocated physical - start: 0x0_2FC50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FC60000
core (0) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FC60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FC70000

core (0) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FC70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FC80000
ramfsd.0: udn RX trivfs.lookup_call
Allocated physical - start: 0x0_2FC80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FC90000

ramfsd.0: udn TX trivfs.lookup_response
Allocated physical - start: 0x0_2FC90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FCA0000

ramfsd.0: sending udn message to core(3,0)Allocated physical - start: 0x0_2FCA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FCB0000


core (0) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FCB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FCC0000
udn backend received message chan_id : 2
Allocated physical - start: 0x0_2FCC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FCD0000

core (3) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FCD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FCE0000
spawnd.3: udn RX trivfs.lookup_response

Allocated physical - start: 0x0_2FCE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FCF0000

core (3) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FCF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FD00000
spawnd.3: udn TX trivfs.getattr_call

Allocated physical - start: 0x0_2FD00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FD10000
spawnd.3: sending udn message to core(0,0)Allocated physical - start: 0x0_2FD10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FD20000

Allocated physical - start: 0x0_2FD20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FD30000
Allocated physical - start: 0x0_2FD30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FD40000
udn backend received message chan_id : 2
Allocated physical - start: 0x0_2FD40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FD50000
Allocated physical - start: 0x0_2FD50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FD60000
Allocated physical - start: 0x0_2FD60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FD70000
Allocated physical - start: 0x0_2FD70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FD80000

core (0) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FD80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FD90000
ramfsd.0: udn RX trivfs.getattr_call
Allocated physical - start: 0x0_2FD90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FDA0000

ramfsd.0: udn TX trivfs.getattr_response
Allocated physical - start: 0x0_2FDA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FDB0000

ramfsd.0: sending udn message to core(3,0)Allocated physical - start: 0x0_2FDB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FDC0000


core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2
Allocated physical - start: 0x0_2FDC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FDD0000

core (3) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FDD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FDE0000
spawnd.3: udn RX trivfs.getattr_response

Allocated physical - start: 0x0_2FDE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FDF0000

core (3) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FDF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FE00000
spawnd.3: udn TX trivfs.read_bulk_call
Allocated physical - start: 0x0_2FE00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FE10000

spawnd.3: sending udn message to core(0,0)Allocated physical - start: 0x0_2FE10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FE20000

Allocated physical - start: 0x0_2FE20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FE30000
udn backend received message chan_id : 2
Allocated physical - start: 0x0_2FE30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FE40000
Allocated physical - start: 0x0_2FE40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FE50000
Allocated physical - start: 0x0_2FE50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FE60000

Allocated physical - start: 0x0_2FE60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FE70000
core (0) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FE70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FE80000
ramfsd.0: udn RX trivfs.read_bulk_call
Allocated physical - start: 0x0_2FE80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FE90000

ramfsd.0: udn TX trivfs.read_bulk_response
Allocated physical - start: 0x0_2FE90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FEA0000

ramfsd.0: sending udn message to core(3,0)Allocated physical - start: 0x0_2FEA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FEB0000


core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2
Allocated physical - start: 0x0_2FEB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FEC0000

core (3) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FEC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FED0000
spawnd.3: udn RX trivfs.read_bulk_response
Allocated physical - start: 0x0_2FED0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FEE0000


core (3) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2FEE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FEF0000
spawnd.3: gbootmodules is:
/tilepro/sbin/cpu loglevel=4
/tilepro/sbin/init
/tilepro/sbin/mem_serv
/tilepro/sbin/monitor
/tilepro/sbin/ramfsd boot
/tilepro/sbin/skb boot
/tilepro/sbin/spawnd boot boottilepro=1-5
/tilepro/sbin/startd boot

Allocated physical - start: 0x0_2FEF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2FF00000

spawn_module(...) completed.
spawnd.3: lmp TX monitor.alloc_iref_request
Creating page table caps...

monitor.3: lmp RX monitor.alloc_iref_request

monitor.3: lmp TX monitor.alloc_iref_reply

spawnd.3: lmp RX monitor.alloc_iref_reply

spawnd.3: udn TX octopus.set_call

spawnd.3: sending udn message to core(0,0)
spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
skb.0: udn RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.3 { iref: 771 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1

skb.0: octopus_service: found record: spawn.1.ready
