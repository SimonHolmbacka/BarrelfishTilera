MKBOOT MODULES:  ./tilepro/menu.lst.modules ./tilepro/sbin/cpu ./tilepro/sbin/init ./tilepro/sbin/mem_serv ./tilepro/sbin/monitor ./tilepro/sbin/ramfsd ./tilepro/sbin/skb ./tilepro/sbin/spawnd ./tilepro/sbin/startd ./tilepro/sbin/fish ./tilepro/sbin/hellotest
tile-mkboot -o tilepro/sbin/cpu.bin.tmp --hvc /home/andreas/barrelfish/new_test2/kernel/arch/tilepro/tilepro-conf.hvc kernel=tilepro/sbin/bootloader ./tilepro/menu.lst.modules ./tilepro/sbin/cpu ./tilepro/sbin/init ./tilepro/sbin/mem_serv ./tilepro/sbin/monitor ./tilepro/sbin/ramfsd ./tilepro/sbin/skb ./tilepro/sbin/spawnd ./tilepro/sbin/startd ./tilepro/sbin/fish ./tilepro/sbin/hellotest
Mem check:
00000000 d mem_l2_check
mv tilepro/sbin/cpu.bin.tmp tilepro/sbin/cpu.bin
tile-monitor --simulator --functional --console --config 8x1 --gdb-port 11111 --bm-debug-on-panic --sim-args -+- --symbols tilepro/sbin/bootloader --symbols tilepro/sbin/cpu -+- --wait --bootrom-file tilepro/sbin/cpu.bin
(0,0) Tilera Hypervisor, version 3.0.1.125620 2011-04-09 21:57:10
Bootloader starting.
Called hv_init.
Got a valid ASID range.
Successfully installed boot-up context.
cpu_id: 0
Installed page table!
base: 0xFD000000; size: 0x30F0; flags: 0x5; ret: 0xFD000000
base: 0xFD030000; size: 0x18E38; flags: 0x7; ret: 0xFD030000
base: 0xF00000; size: 0x8300; flags: 0x6; ret: 0xF00000
entry_point: 0xFD034F28
[Tile 0 coordinate; BSP: 1] : (0,0)
[Tile 0 initial SP] : 0xFCFFCF38
[Tile 0 initial LR] : 0xFD035068
[Physical memory range 1] : 0x0_00000000 to 0x0_3E000000
Physical Memory for core 0 - start: 0x0_13000000; end: 0x0_23000000; free: 0x0_10000000
Physical Memory for core 1 - start: 0x0_23000000; end: 0x0_27000000; free: 0x0_04000000
Physical Memory for core 2 - start: 0x0_27000000; end: 0x0_2B000000; free: 0x0_04000000
Physical Memory for core 3 - start: 0x0_2B000000; end: 0x0_2F000000; free: 0x0_04000000
Physical Memory for core 4 - start: 0x0_2F000000; end: 0x0_33000000; free: 0x0_04000000
Physical Memory for core 5 - start: 0x0_33000000; end: 0x0_37000000; free: 0x0_04000000
Physical Memory for core 6 - start: 0x0_37000000; end: 0x0_3B000000; free: 0x0_04000000
Current range has 0x0_03000000 bytes remaining, which is not enough for another core
No more memory to serve core 7
Tile 0 is starting...
[Tile width]  : 8
[Tile height] : 1
Tile 0 is starting init...
Allocated physical - start: 0x0_13000000; size: 0x00800000; requested: 0x00800000; end: 0x0_13800000
Virtual address of page tables for init : 0x80000000
Allocated physical - start: 0x0_13800000; size: 0x00040000; requested: 0x00040000; end: 0x0_13840000
Calling spawn_module(...)...
spawn module: ./tilepro/sbin/init
Allocated physical - start: 0x0_13840000; size: 0x00010000; requested: 0x00010000; end: 0x0_13850000
Allocated physical - start: 0x0_13850000; size: 0x00010000; requested: 0x00010000; end: 0x0_13860000
Allocated physical - start: 0x0_13860000; size: 0x00010000; requested: 0x00010000; end: 0x0_13870000
Allocated physical - start: 0x0_13870000; size: 0x00010000; requested: 0x00010000; end: 0x0_13880000
Allocated physical - start: 0x0_13880000; size: 0x00010000; requested: 0x00010000; end: 0x0_13890000
Allocated physical - start: 0x0_13890000; size: 0x00010000; requested: 0x00010000; end: 0x0_138A0000
Allocated physical - start: 0x0_138A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_138B0000
Allocated physical - start: 0x0_138B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_138C0000
Allocated physical - start: 0x0_138C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_138D0000
Allocated physical - start: 0x0_138D0000; size: 0x00040000; requested: 0x00040000; end: 0x0_13910000
Allocated physical - start: 0x0_13910000; size: 0x00400000; requested: 0x00400000; end: 0x0_13D10000
Allocated physical - start: 0x0_13D10000; size: 0x00010000; requested: 0x00000800; end: 0x0_13D20000
Allocated physical - start: 0x0_13D20000; size: 0x00200000; requested: 0x00200000; end: 0x0_13F20000
Allocated physical - start: 0x0_13F20000; size: 0x00020000; requested: 0x00020000; end: 0x0_13F40000
Allocated physical - start: 0x0_13F40000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F50000
Allocated physical - start: 0x0_13F50000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F60000
Allocated physical - start: 0x0_13F60000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F70000
Allocated physical - start: 0x0_13F70000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F80000
Allocated physical - start: 0x0_13F80000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F90000
Allocated physical - start: 0x0_13F90000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FA0000
Allocated physical - start: 0x0_13FA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FB0000
Allocated physical - start: 0x0_13FB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FC0000
Allocated physical - start: 0x0_13FC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FD0000
Allocated physical - start: 0x0_13FD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FE0000
Allocated physical - start: 0x0_13FE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FF0000
Allocated physical - start: 0x0_13FF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14000000
Allocated physical - start: 0x0_14000000; size: 0x00010000; requested: 0x00010000; end: 0x0_14010000
Allocated physical - start: 0x0_14010000; size: 0x00010000; requested: 0x00010000; end: 0x0_14020000
Allocated physical - start: 0x0_14020000; size: 0x00010000; requested: 0x00010000; end: 0x0_14030000
Allocated physical - start: 0x0_14030000; size: 0x00010000; requested: 0x00010000; end: 0x0_14040000
Allocated physical - start: 0x0_14040000; size: 0x00010000; requested: 0x00010000; end: 0x0_14050000
Allocated physical - start: 0x0_14050000; size: 0x00010000; requested: 0x00010000; end: 0x0_14060000
Allocated physical - start: 0x0_14060000; size: 0x00010000; requested: 0x00010000; end: 0x0_14070000
Allocated physical - start: 0x0_14070000; size: 0x00010000; requested: 0x00010000; end: 0x0_14080000
Allocated physical - start: 0x0_14080000; size: 0x00010000; requested: 0x00010000; end: 0x0_14090000
Allocated physical - start: 0x0_14090000; size: 0x00010000; requested: 0x00010000; end: 0x0_140A0000
Allocated physical - start: 0x0_140A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140B0000
Allocated physical - start: 0x0_140B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140C0000
Allocated physical - start: 0x0_140C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140D0000
Allocated physical - start: 0x0_140D0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140E0000
Allocated physical - start: 0x0_140E0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140F0000
Allocated physical - start: 0x0_140F0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14100000
Allocated physical - start: 0x0_14100000; size: 0x00010000; requested: 0x00010000; end: 0x0_14110000
Allocated physical - start: 0x0_14110000; size: 0x00010000; requested: 0x00010000; end: 0x0_14120000
Allocated physical - start: 0x0_14120000; size: 0x00010000; requested: 0x00010000; end: 0x0_14130000
Allocated physical - start: 0x0_14130000; size: 0x00010000; requested: 0x00010000; end: 0x0_14140000
Allocated physical - start: 0x0_14140000; size: 0x00010000; requested: 0x00010000; end: 0x0_14150000
Allocated physical - start: 0x0_14150000; size: 0x00010000; requested: 0x00010000; end: 0x0_14160000
Allocated physical - start: 0x0_14160000; size: 0x00010000; requested: 0x00010000; end: 0x0_14170000
Allocated physical - start: 0x0_14170000; size: 0x00010000; requested: 0x00010000; end: 0x0_14180000
Allocated physical - start: 0x0_14180000; size: 0x00010000; requested: 0x00010000; end: 0x0_14190000
Allocated physical - start: 0x0_14190000; size: 0x00010000; requested: 0x00010000; end: 0x0_141A0000
Allocated physical - start: 0x0_141A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141B0000
Allocated physical - start: 0x0_141B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141C0000
Allocated physical - start: 0x0_141C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141D0000
Allocated physical - start: 0x0_141D0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141E0000
Allocated physical - start: 0x0_141E0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141F0000
Allocated physical - start: 0x0_141F0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14200000
Allocated physical - start: 0x0_14200000; size: 0x00010000; requested: 0x00010000; end: 0x0_14210000
Allocated physical - start: 0x0_14210000; size: 0x00010000; requested: 0x00010000; end: 0x0_14220000
Allocated physical - start: 0x0_14220000; size: 0x00010000; requested: 0x00010000; end: 0x0_14230000
Allocated physical - start: 0x0_14230000; size: 0x00010000; requested: 0x00010000; end: 0x0_14240000
Allocated physical - start: 0x0_14240000; size: 0x00010000; requested: 0x00010000; end: 0x0_14250000
Allocated physical - start: 0x0_14250000; size: 0x00010000; requested: 0x00010000; end: 0x0_14260000
Allocated physical - start: 0x0_14260000; size: 0x00010000; requested: 0x00010000; end: 0x0_14270000
Allocated physical - start: 0x0_14270000; size: 0x00010000; requested: 0x00010000; end: 0x0_14280000
Allocated physical - start: 0x0_14280000; size: 0x00010000; requested: 0x00010000; end: 0x0_14290000
Allocated physical - start: 0x0_14290000; size: 0x00010000; requested: 0x00010000; end: 0x0_142A0000
Allocated physical - start: 0x0_142A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142B0000
Allocated physical - start: 0x0_142B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142C0000
Allocated physical - start: 0x0_142C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142D0000
Allocated physical - start: 0x0_142D0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142E0000
Allocated physical - start: 0x0_142E0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142F0000
Allocated physical - start: 0x0_142F0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14300000
Allocated physical - start: 0x0_14300000; size: 0x00010000; requested: 0x00010000; end: 0x0_14310000
Allocated physical - start: 0x0_14310000; size: 0x00010000; requested: 0x00010000; end: 0x0_14320000
Allocated physical - start: 0x0_14320000; size: 0x00010000; requested: 0x00010000; end: 0x0_14330000
Allocated physical - start: 0x0_14330000; size: 0x00010000; requested: 0x00010000; end: 0x0_14340000
spawn_module(...) completed.
Creating page table caps...
Page table caps are done.
Creating module caps...
Allocated physical - start: 0x0_14340000; size: 0x00010000; requested: 0x00010000; end: 0x0_14350000
menulist_va : 0x81340000
Reading menu list...
Menu list content : 
./tilepro/menu.lst.modules
./tilepro/sbin/cpu loglevel=4
./tilepro/sbin/init
./tilepro/sbin/mem_serv
./tilepro/sbin/monitor
./tilepro/sbin/ramfsd boot
./tilepro/sbin/skb boot
./tilepro/sbin/spawnd boot boottilepro=1
./tilepro/sbin/startd boot
./tilepro/sbin/fish keyboard
./tilepro/sbin/hellotest core=1

Loading module: ./tilepro/sbin/cpu loglevel=4
Allocated physical - start: 0x0_14350000; size: 0x00030000; requested: 0x00021424; end: 0x0_14380000
Loading module: ./tilepro/sbin/init 
Allocated physical - start: 0x0_14380000; size: 0x00120000; requested: 0x0011B540; end: 0x0_144A0000
Loading module: ./tilepro/sbin/mem_serv 
Allocated physical - start: 0x0_144A0000; size: 0x00110000; requested: 0x0010B430; end: 0x0_145B0000
Loading module: ./tilepro/sbin/monitor 
Allocated physical - start: 0x0_145B0000; size: 0x00170000; requested: 0x0016B840; end: 0x0_14720000
Loading module: ./tilepro/sbin/ramfsd boot
Allocated physical - start: 0x0_14720000; size: 0x00130000; requested: 0x0012B4C0; end: 0x0_14850000
Loading module: ./tilepro/sbin/skb boot
Allocated physical - start: 0x0_14850000; size: 0x00130000; requested: 0x0012B56C; end: 0x0_14980000
Loading module: ./tilepro/sbin/spawnd boot boottilepro=1
Allocated physical - start: 0x0_14980000; size: 0x001D0000; requested: 0x001CC9FC; end: 0x0_14B50000
Loading module: ./tilepro/sbin/startd boot
Allocated physical - start: 0x0_14B50000; size: 0x001B0000; requested: 0x001AC9E8; end: 0x0_14D00000
Loading module: ./tilepro/sbin/fish keyboard
Allocated physical - start: 0x0_14D00000; size: 0x001D0000; requested: 0x001CCB0C; end: 0x0_14ED0000
Loading module: ./tilepro/sbin/hellotest core=1
Allocated physical - start: 0x0_14ED0000; size: 0x00110000; requested: 0x0010B3D8; end: 0x0_14FE0000
Module caps are done.
init virtual address : 0x81380000
Got command line: loglevel=4
Allocated physical - start: 0x0_14FE0000; size: 0x000E0000; requested: 0x000E0000; end: 0x0_150C0000
Allocated physical - start: 0x0_150C0000; size: 0x00020000; requested: 0x00020000; end: 0x0_150E0000
Allocated physical - start: 0x0_150E0000; size: 0x00010000; requested: 0x00010000; end: 0x0_150F0000
Allocated physical - start: 0x0_150F0000; size: 0x00040000; requested: 0x00040000; end: 0x0_15130000
init image load is done
init entry point: 0x01000020
Allocated physical - start: 0x0_15130000; size: 0x00100000; requested: 0x00100000; end: 0x0_15230000
Creating unused ram caps...
Unused RAM caps are done.
init kernel is ready.
dispatch it baby!
resume(pc=0x01000020, sp=0x80000000, tp=0x00070000, r0=0x00000000)
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
1Successfully installed boot-up context.
Successfully installed boot-up context.

cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
cpu_id: 2cpu_id: cpu_id: 3cpu_id: 4
56
7



Installed page table!
init: invoked as: init 65536
base: 0xFD000000; size: 0x30F0; flags: 0x5; ret: 0xFD000000Installed page table!
Installed page table!

Installed page table!
Installed page table!
Installed page table!
Installed page table!
base: base: base: base: base: 0xFD000000base: 0xFD0000000xFD0000000xFD0000000xFD000000; 0xFD000000; ; ; ; size: ; size: size: size: size: 0x30F0size: 0x30F00x30F00x30F00x30F0; 0x30F0; ; ; ; flags: ; flags: flags: flags: flags: 0x5flags: 0x50x50x50x5; 0x5; ; ; ; ret: ; ret: ret: ret: ret: ret: 0xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD000000





base: 0xFD030000; size: 0x18E38; flags: 0x7; ret: 0xFD030000
base: base: base: base: base: base: 0xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD030000; ; ; ; ; ; size: size: size: size: size: size: 0x18E380x18E380x18E380x18E380x18E380x18E38; ; ; ; ; ; flags: flags: flags: flags: flags: flags: 0x70x70x70x70x70x7; ; ; ; ; ; ret: ret: ret: ret: ret: ret: 0xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD030000





base: 0xF00000; size: 0x8300; flags: 0x6; ret: 0xF00000
base: base: base: base: base: base: 0xF000000xF000000xF000000xF000000xF000000xF00000; ; ; ; ; ; size: size: size: size: size: size: 0x83000x83000x83000x83000x83000x8300; ; ; ; ; ; flags: flags: flags: flags: flags: flags: 0x60x60x60x60x60x6; ; ; ; ; ; ret: ret: ret: ret: ret: ret: 0xF000000xF000000xF000000xF000000xF000000xF00000





entry_point: 0xFD034F28
[Tile 1 coordinate; BSP: 0] : (1,0)
[Tile 1 initial SP] : 0xFCFECF38
[Tile 1 initial LR] : 0xFD035068
Core 1 waiting for startup
entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: 0xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F28





[Tile 2 coordinate; BSP: 0] : (2,0)
[Tile 3 coordinate; BSP: 0] : (3,0)
[Tile 4 coordinate; BSP: 0] : (4,0)
[Tile 5 coordinate; BSP: 0] : (5,0)
[Tile 6 coordinate; BSP: 0] : (6,0)
[Tile 7 coordinate; BSP: 0] : (7,0)
[Tile 2 initial SP] : 0xFCFDCF38
[Tile 3 initial SP] : 0xFCFCCF38
[Tile 4 initial SP] : 0xFCFBCF38
[Tile 5 initial SP] : 0xFCFACF38
[Tile 6 initial SP] : 0xFCF9CF38
[Tile 7 initial SP] : 0xFCF8CF38
[Tile 2 initial LR] : 0xFD035068
[Tile 3 initial LR] : 0xFD035068
[Tile 4 initial LR] : 0xFD035068
[Tile 5 initial LR] : 0xFD035068
[Tile 6 initial LR] : 0xFD035068
[Tile 7 initial LR] : 0xFD035068
Core 2 waiting for startup
Core 3 waiting for startup
Core 4 waiting for startup
Core 5 waiting for startup
Core 6 waiting for startup
Core 7 waiting for startup
Spawning memory server (tilepro/sbin/mem_serv)...
Spawning monitor (tilepro/sbin/monitor)...
ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000020, sp=0x02123518, tp=0x02120000, r0=0x00000000)
argc value: 2
monitor: invoked as: tilepro/sbin/monitor 36831232
monitor.0: WARNING: bench_arch_init() have not been implemented!

set core id:0 
resume(pc=0x01000020, sp=0x02023518, tp=0x02020000, r0=0x00000000)
RAM allocator initialised, 189 MB (of 221 MB) available
mem_serv.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

mem_serv.0: lmp RX monitor.alloc_iref_reply

mem_serv.0: lmp TX monitor.set_mem_iref_request

monitor.0: lmp RX monitor.set_mem_iref_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

Spawning ramfsd on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000000, sp=0x02023518, tp=0x02020000, r0=0x00000000)
ramfsd.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

ramfsd.0: lmp RX monitor.get_monitor_rpc_iref_reply

ramfsd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

ramfsd.0: lmp RX monitor.bind_lmp_reply_client

ramfsd.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

ramfsd.0: lmp RX monitor.get_mem_iref_reply

ramfsd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

ramfsd.0: lmp RX monitor.bind_lmp_reply_client

ramfsd.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

ramfsd.0: lmp RX monitor.get_name_iref_reply

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd is starting!!!
ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor_blocking.get_bootinfo_call

monitor.0: lmp RX monitor_blocking.get_bootinfo_call

monitor.0: lmp TX monitor_blocking.get_bootinfo_response

ramfsd.0: lmp RX monitor_blocking.get_bootinfo_response

ramfsd.0: pre-populating from boot image...

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: ready

ramfsd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

ramfsd.0: lmp RX monitor.alloc_iref_reply

ramfsd.0: lmp TX monitor.set_ramfs_iref_request

monitor.0: lmp RX monitor.set_ramfs_iref_request

Spawning skb on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000000, sp=0x02033518, tp=0x02030000, r0=0x00000000)
skb.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

skb.0: lmp RX monitor.get_monitor_rpc_iref_reply

skb.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

skb.0: lmp RX monitor.bind_lmp_reply_client

skb.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

skb.0: lmp RX monitor.get_mem_iref_reply

skb.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

skb.0: lmp RX monitor.bind_lmp_reply_client

skb.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

skb.0: lmp RX monitor.get_name_iref_reply

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

skb.0: lmp RX monitor.alloc_iref_reply

skb.0: octopus_service: octopus rpc iref is: 5

skb.0: lmp TX monitor.set_name_iref_request

monitor.0: lmp RX monitor.set_name_iref_request

Spawning ./tilepro/sbin/spawnd on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

Spawning ./tilepro/sbin/startd on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000000, sp=0x02033518, tp=0x02030000, r0=0x00000000)
startd.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

startd.0: lmp RX monitor.get_monitor_rpc_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

startd.0: lmp RX monitor.get_mem_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

startd.0: lmp RX monitor.get_name_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

skb.0: lmp RX monitor.bind_lmp_service_request

skb.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX octopus.get_call

skb.0: lmp RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: lmp TX octopus.get_response

startd.0: lmp RX octopus.get_response

startd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

startd.0: lmp RX monitor.alloc_iref_reply

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX monitor.get_ramfs_iref_request

monitor.0: lmp RX monitor.get_ramfs_iref_request

monitor.0: lmp TX monitor.get_ramfs_iref_reply

startd.0: lmp RX monitor.get_ramfs_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

ramfsd.0: lmp RX monitor.bind_lmp_service_request

ramfsd.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX trivfs.getroot_call

ramfsd.0: lmp RX trivfs.getroot_call

ramfsd.0: lmp TX trivfs.getroot_response

startd.0: lmp RX trivfs.getroot_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX trivfs.bulk_init_call

ramfsd.0: lmp RX trivfs.bulk_init_call

ramfsd.0: lmp TX trivfs.bulk_init_response

startd.0: lmp RX trivfs.bulk_init_response

startd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

startd.0: lmp RX trivfs.lookup_response

startd.0: lmp TX trivfs.getattr_call

ramfsd.0: lmp RX trivfs.getattr_call

ramfsd.0: lmp TX trivfs.getattr_response

startd.0: lmp RX trivfs.getattr_response

startd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

startd.0: lmp RX trivfs.read_bulk_response

startd.0: lmp TX octopus.wait_for_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record all_spawnds_up

skb.0: waiting for: all_spawnds_up

skb.0: octopus_service: set_watch all_spawnds_up

resume(pc=0x01000000, sp=0x02043518, tp=0x02040000, r0=0x00000000)
spawnd.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

spawnd.0: lmp RX monitor.get_monitor_rpc_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

spawnd.0: lmp RX monitor.get_mem_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

spawnd.0: lmp RX monitor.get_name_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

skb.0: lmp RX monitor.bind_lmp_service_request

skb.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX octopus.get_call

skb.0: lmp RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: lmp TX octopus.get_response

spawnd.0: lmp RX octopus.get_response

spawnd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

spawnd.0: lmp RX monitor.alloc_iref_reply

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX monitor.get_ramfs_iref_request

monitor.0: lmp RX monitor.get_ramfs_iref_request

monitor.0: lmp TX monitor.get_ramfs_iref_reply

spawnd.0: lmp RX monitor.get_ramfs_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

ramfsd.0: lmp RX monitor.bind_lmp_service_request

ramfsd.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX trivfs.getroot_call

ramfsd.0: lmp RX trivfs.getroot_call

ramfsd.0: lmp TX trivfs.getroot_response

spawnd.0: lmp RX trivfs.getroot_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX trivfs.bulk_init_call

ramfsd.0: lmp RX trivfs.bulk_init_call

ramfsd.0: lmp TX trivfs.bulk_init_response

spawnd.0: lmp RX trivfs.bulk_init_response

spawnd.0: spawnd invoked on core 0 as:
 spawnd boot boottilepro=1 apicid=0
spawnd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

spawnd.0: lmp RX trivfs.lookup_response

spawnd.0: lmp TX trivfs.getattr_call

ramfsd.0: lmp RX trivfs.getattr_call

ramfsd.0: lmp TX trivfs.getattr_response

spawnd.0: lmp RX trivfs.getattr_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: gbootmodules is:
/tilepro/sbin/cpu loglevel=4
/tilepro/sbin/init
/tilepro/sbin/mem_serv
/tilepro/sbin/monitor
/tilepro/sbin/ramfsd boot
/tilepro/sbin/skb boot
/tilepro/sbin/spawnd boot boottilepro=1
/tilepro/sbin/startd boot
/tilepro/sbin/fish k
cmd line : boottilepro=1
spawnd.0: coreid 0 is arch id 0

spawnd.0: coreid 1 is arch id 1

id_from: 1 id_to: 1
 test1 case 0 max core id:255 

 test1 case 1 max core id:255 
aaa boot_core_request coreid: 1
spawnd.0: lmp TX monitor.boot_core_request

monitor.0: lmp RX monitor.boot_core_request

Monitor 0: booting tilepro core 1 as '/tilepro/sbin/cpu loglevel=4'

 aa my_core_id: 0 coreid:1 asid:2
aa intermon udn init on core: 0
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 0 dest_asid: 1 
monitor.0: udn_impl.c out_chan_id: 0

Core 1 received startup: 626F6F74
forloop i:0 cpu_id:1 chanid::0
aa core: 0 setup new binding id: 1
forloop i:1 cpu_id:1 chanid::0
forloop i:2 cpu_id:1 chanid::0

forloop i:3 cpu_id:1 chanid::0
 intermon_init coreid: 1
cpu_id:1 chanid::0
Allocated physical - start: 0x0_23000000; size: 0x00800000; requested: 0x00800000; end: 0x0_23800000
udn_intermon_init aa on core:0
inter.c arch_intermon_init my_core_id:0
aa test debugpoint boot.c
Virtual address of page tables for init : 0x90000000
Calling spawn_module(...)...
spawn module: monitor
Allocated physical - start: 0x0_23800000; size: 0x00010000; requested: 0x00010000; end: 0x0_23810000
Allocated physical - start: 0x0_23810000; size: 0x00010000; requested: 0x00010000; end: 0x0_23820000
Allocated physical - start: 0x0_23820000; size: 0x00010000; requested: 0x00010000; end: 0x0_23830000
Allocated physical - start: 0x0_23830000; size: 0x00010000; requested: 0x00010000; end: 0x0_23840000
Allocated physical - start: 0x0_23840000; size: 0x00010000; requested: 0x00010000; end: 0x0_23850000
Allocated physical - start: 0x0_23850000; size: 0x00010000; requested: 0x00010000; end: 0x0_23860000
Allocated physical - start: 0x0_23860000; size: 0x00010000; requested: 0x00010000; end: 0x0_23870000
Allocated physical - start: 0x0_23870000; size: 0x00010000; requested: 0x00010000; end: 0x0_23880000
Allocated physical - start: 0x0_23880000; size: 0x00010000; requested: 0x00010000; end: 0x0_23890000
Allocated physical - start: 0x0_23890000; size: 0x00040000; requested: 0x00040000; end: 0x0_238D0000
Allocated physical - start: 0x0_238D0000; size: 0x00010000; requested: 0x00000800; end: 0x0_238E0000
Allocated physical - start: 0x0_238E0000; size: 0x00200000; requested: 0x00200000; end: 0x0_23AE0000
Allocated physical - start: 0x0_23AE0000; size: 0x00020000; requested: 0x00020000; end: 0x0_23B00000
Allocated physical - start: 0x0_23B00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B10000
Allocated physical - start: 0x0_23B10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B20000
Allocated physical - start: 0x0_23B20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B30000
Allocated physical - start: 0x0_23B30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B40000
Allocated physical - start: 0x0_23B40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B50000
Allocated physical - start: 0x0_23B50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B60000
Allocated physical - start: 0x0_23B60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B70000
Allocated physical - start: 0x0_23B70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B80000
Allocated physical - start: 0x0_23B80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B90000
Allocated physical - start: 0x0_23B90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BA0000
Allocated physical - start: 0x0_23BA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BB0000
Allocated physical - start: 0x0_23BB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BC0000
Allocated physical - start: 0x0_23BC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BD0000
Allocated physical - start: 0x0_23BD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BE0000
Allocated physical - start: 0x0_23BE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BF0000
Allocated physical - start: 0x0_23BF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C00000
Allocated physical - start: 0x0_23C00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C10000
Allocated physical - start: 0x0_23C10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C20000
Allocated physical - start: 0x0_23C20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C30000
Allocated physical - start: 0x0_23C30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C40000
Allocated physical - start: 0x0_23C40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C50000
Allocated physical - start: 0x0_23C50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C60000
Allocated physical - start: 0x0_23C60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C70000
Allocated physical - start: 0x0_23C70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C80000
Allocated physical - start: 0x0_23C80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C90000
Allocated physical - start: 0x0_23C90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CA0000
Allocated physical - start: 0x0_23CA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CB0000
Allocated physical - start: 0x0_23CB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CC0000
Allocated physical - start: 0x0_23CC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CD0000
Allocated physical - start: 0x0_23CD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CE0000
Allocated physical - start: 0x0_23CE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CF0000
Allocated physical - start: 0x0_23CF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D00000
Allocated physical - start: 0x0_23D00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D10000
Allocated physical - start: 0x0_23D10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D20000
Allocated physical - start: 0x0_23D20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D30000
Allocated physical - start: 0x0_23D30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D40000
Allocated physical - start: 0x0_23D40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D50000
Allocated physical - start: 0x0_23D50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D60000
Allocated physical - start: 0x0_23D60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D70000
Allocated physical - start: 0x0_23D70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D80000
Allocated physical - start: 0x0_23D80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D90000
Allocated physical - start: 0x0_23D90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DA0000
Allocated physical - start: 0x0_23DA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DB0000
Allocated physical - start: 0x0_23DB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DC0000
Allocated physical - start: 0x0_23DC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DD0000
Allocated physical - start: 0x0_23DD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DE0000
Allocated physical - start: 0x0_23DE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DF0000
Allocated physical - start: 0x0_23DF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E00000
Allocated physical - start: 0x0_23E00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E10000
Allocated physical - start: 0x0_23E10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E20000
Allocated physical - start: 0x0_23E20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E30000
Allocated physical - start: 0x0_23E30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E40000
Allocated physical - start: 0x0_23E40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E50000
Allocated physical - start: 0x0_23E50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E60000
Allocated physical - start: 0x0_23E60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E70000
Allocated physical - start: 0x0_23E70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E80000
Allocated physical - start: 0x0_23E80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E90000
Allocated physical - start: 0x0_23E90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EA0000
Allocated physical - start: 0x0_23EA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EB0000
Allocated physical - start: 0x0_23EB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EC0000
Allocated physical - start: 0x0_23EC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23ED0000
Allocated physical - start: 0x0_23ED0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EE0000
Allocated physical - start: 0x0_23EE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EF0000
Allocated physical - start: 0x0_23EF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23F00000
spawn_module(...) completed.
Creating page table caps...
Page table caps are done.
load_init_image
Allocated physical - start: 0x0_23F00000; size: 0x00120000; requested: 0x00120000; end: 0x0_24020000
Allocated physical - start: 0x0_24020000; size: 0x00030000; requested: 0x00030000; end: 0x0_24050000
Allocated physical - start: 0x0_24050000; size: 0x00010000; requested: 0x00010000; end: 0x0_24060000
Allocated physical - start: 0x0_24060000; size: 0x00120000; requested: 0x00120000; end: 0x0_24180000
init image load is done
done
Allocated physical - start: 0x0_24180000; size: 0x00100000; requested: 0x00100000; end: 0x0_24280000
dispatch it baby!
resume(pc=0x01000020, sp=0x80000000, tp=0x00070000, r0=0x00000000)
argc value: 4
monitor: invoked as: monitor 0 chanid=0 archid=0
monitor.0: WARNING: bench_arch_init() have not been implemented!

set core id:1 
starting appcore
boot_arch_app_core argc value: 4
monitor: invoked as: monitor 0 chanid=0 archid=0
aa core id of the core that booted: 0 
outchan_id 0
aa intermon udn init2 on core: 1 src_core_id: 0 out_chan_id:0
aaa udn_endpoint_init 
monitor.1: create new incoming channel id : 0

 udn channel init, dest_core_id: 0, out_chan_id: 0 dest_asid: 2 
monitor.1: udn_impl.c out_chan_id: 0

aa test (core 1 ) to print binding pointer: 1145934776 

 intermon_init coreid: 0
udn_intermon_init aa on core:1
inter.c arch_intermon_init my_core_id:1

 aa debugpointer0 on core: 1 
 core:1
aaa request_mem_serv_iref on core: 1
monitor.1: udn TX intermon.mem_serv_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.mem_serv_iref_request

reques mem_serv_iref: 1
request core id 0 
request binding: 1145905792 
monitor.0: udn TX intermon.mem_serv_iref_reply

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.mem_serv_iref_reply

aatest iref: 1 and mem_serv_iref: 0
reply core id 1 
reply binding: 1145934776 

core (1) receiving udn message from chan 0... 

 aa debugpointer1
monitor.1: udn TX intermon.name_serv_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.name_serv_iref_request

monitor.0: udn TX intermon.name_serv_iref_reply

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.name_serv_iref_reply


core (1) receiving udn message from chan 0... 

 aa debugpointer2
monitor.1: udn TX intermon.ramfs_serv_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.ramfs_serv_iref_request

monitor.0: udn TX intermon.ramfs_serv_iref_reply

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.ramfs_serv_iref_reply


core (1) receiving udn message from chan 0... 
monitor.1: udn TX intermon.monitor_mem_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.monitor_mem_iref_request

monitor.0: udn TX intermon.monitor_mem_iref_reply

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.monitor_mem_iref_reply


core (1) receiving udn message from chan 0... 
aaa udn_endpoint_init 
monitor.1: create new incoming channel id : 1
monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
server received channel id 1 and destination core id 1 from the client
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 1

 udn channel init, dest_core_id: 1, out_chan_id: 1 dest_asid: 1 
monitor.0: udn_impl.c out_chan_id: 1

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)


core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
client received channel id 1 and destination core id 0 from the server
monitor.1: udn_impl.c out_chan_id: 1


core (1) receiving udn message from chan 0... 
monitor.1: udn TX intermon.spawnd_image_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.spawnd_image_request

monitor.0: udn TX intermon.spawnd_image_reply

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.spawnd_image_reply


core (1) receiving udn message from chan 0... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
Spawning spawnd on core 1
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(1,0)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
ERROR: monitor.1 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.1 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

monitor.1: udn TX intermon.monitor_initialized

monitor.1: sending udn message to core(0,0)
aaa core:1 booted app core
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
resume(pc=0x01000000, sp=0x02043518, tp=0x02040000, r0=0x00000000)
monitor.0: udn RX intermon.monitor_initialized

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX monitor.boot_core_reply

spawnd.0: lmp RX monitor.boot_core_reply


 test1 case 1 max core id:255 
spawnd.0: lmp TX monitor.boot_initialize_request


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.boot_initialize_request

all 2 monitors up
monitor: synchronizing clocks
spawnd.1: lmp TX monitor.get_monitor_rpc_iref_request

Phase-locked local clocks not supported on this platform!
monitor.1: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.boot_initialize_reply
monitor.1: lmp TX monitor.get_monitor_rpc_iref_reply


aaa state_id: 1
spawnd.1: lmp RX monitor.get_monitor_rpc_iref_reply

spawnd.0: lmp RX monitor.boot_initialize_reply

spawnd.1: lmp TX monitor.bind_lmp_client_request



 test1 case 2 max core id:255 

 my_core_id:0 
monitor.1: lmp RX monitor.bind_lmp_client_request

spawnd.0: lmp TX octopus.wait_for_call

monitor.1: lmp TX monitor.bind_lmp_reply_client

skb.0: lmp RX octopus.wait_for_call
spawnd.1: lmp RX monitor.bind_lmp_reply_client


skb.0: octopus_service: get record spawn.1.ready

spawnd.1: lmp TX monitor.get_mem_iref_request

skb.0: waiting for: spawn.1.ready
monitor.1: lmp RX monitor.get_mem_iref_request


skb.0: octopus_service: set_watch spawn.1.ready
monitor.1: lmp TX monitor.get_mem_iref_reply


spawnd.1: lmp RX monitor.get_mem_iref_reply

spawnd.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

spawnd.1: lmp RX monitor.bind_lmp_reply_client

spawnd.1: lmp TX monitor.new_monitor_binding_request

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

spawnd.1: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.1: create new incoming channel id : 0
spawnd.1: lmp TX monitor.bind_udn_client_request

monitor.1: lmp RX monitor.bind_udn_client_request

monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

mem_serv.0: lmp RX monitor.bind_udn_service_request

server received channel id 0 and destination core id 1 from the client
aaa udn_endpoint_init 
mem_serv.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 0 dest_asid: 2 
mem_serv.0: udn_impl.c out_chan_id: 0

mem_serv.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

spawnd.1: lmp RX monitor.bind_udn_reply_client

client received channel id 0 and destination core id 0 from the server
spawnd.1: udn_impl.c out_chan_id: 0

spawnd.1: lmp TX monitor.get_name_iref_request


core (1) receiving udn message from chan 0... 
monitor.1: lmp RX monitor.get_name_iref_request

monitor.1: lmp TX monitor.get_name_iref_reply

spawnd.1: lmp RX monitor.get_name_iref_reply

spawnd.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

spawnd.1: lmp RX monitor.bind_lmp_reply_client

spawnd.1: lmp TX monitor.new_monitor_binding_request

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

spawnd.1: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.1: create new incoming channel id : 1
spawnd.1: lmp TX monitor.bind_udn_client_request

monitor.1: lmp RX monitor.bind_udn_client_request

monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

skb.0: lmp RX monitor.bind_udn_service_request

server received channel id 1 and destination core id 1 from the client
aaa udn_endpoint_init 
skb.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 1 dest_asid: 2 
skb.0: udn_impl.c out_chan_id: 1

skb.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

spawnd.1: lmp RX monitor.bind_udn_reply_client

client received channel id 0 and destination core id 0 from the server
spawnd.1: udn_impl.c out_chan_id: 0

spawnd.1: udn TX octopus.get_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(1,0)
skb.0: sending udn message to core(1,0)udn backend received message chan_id : 1



core (1) receiving udn message from chan 1... 

core (0) receiving udn message from chan 0... 
core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.1: udn RX octopus.get_response


core (1) receiving udn message from chan 1... 
spawnd.1: lmp TX monitor.alloc_iref_request

monitor.1: lmp RX monitor.alloc_iref_request

monitor.1: lmp TX monitor.alloc_iref_reply

spawnd.1: lmp RX monitor.alloc_iref_reply

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

monitor.1: udn RX intermon.cap_send_request

core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 

monitor.1: udn RX intermon.cap_send_request
core (0) receiving udn message from chan 0... 

monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 
monitor.1: udn RX intermon.cap_send_request

monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: lmp TX monitor.get_ramfs_iref_request


core (1) receiving udn message from chan 0... 
monitor.1: lmp RX monitor.get_ramfs_iref_request

monitor.1: lmp TX monitor.get_ramfs_iref_reply

spawnd.1: lmp RX monitor.get_ramfs_iref_reply

spawnd.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

spawnd.1: lmp RX monitor.bind_lmp_reply_client

spawnd.1: lmp TX monitor.new_monitor_binding_request

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

spawnd.1: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.1: create new incoming channel id : 2
spawnd.1: lmp TX monitor.bind_udn_client_request

monitor.1: lmp RX monitor.bind_udn_client_request

monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

ramfsd.0: lmp RX monitor.bind_udn_service_request

server received channel id 2 and destination core id 1 from the client
aaa udn_endpoint_init 
ramfsd.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 2 dest_asid: 2 
ramfsd.0: udn_impl.c out_chan_id: 2

ramfsd.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

spawnd.1: lmp RX monitor.bind_udn_reply_client

client received channel id 0 and destination core id 0 from the server
spawnd.1: udn_impl.c out_chan_id: 0

spawnd.1: udn TX trivfs.getroot_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.getroot_call

ramfsd.0: udn TX trivfs.getroot_response

ramfsd.0: sending udn message to core(1,0)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.getroot_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX trivfs.bulk_init_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: lmp TX monitor.cap_send_request

monitor.1: lmp RX monitor.cap_send_request

monitor.1: udn TX intermon.cap_send_request

monitor.1: sending udn message to core(0,0)
monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

udn backend received message chan_id : 0
core (1) receiving udn message from chan 2... 

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.cap_send_request

monitor.0: lmp TX monitor.cap_receive_request

ramfsd.0: lmp RX monitor.cap_receive_request

ramfsd.0: udn RX trivfs.bulk_init_call

ramfsd.0: udn TX trivfs.bulk_init_response

ramfsd.0: sending udn message to core(1,0)
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.bulk_init_response


core (1) receiving udn message from chan 2... 

core (0) receiving udn message from chan 0... 
spawnd.1: spawnd invoked on core 1 as:
 spawnd
spawnd.1: udn TX trivfs.lookup_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(1,0)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.lookup_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.getattr_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.getattr_call

ramfsd.0: udn TX trivfs.getattr_response

ramfsd.0: sending udn message to core(1,0)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.getattr_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: gbootmodules is:
/tilepro/sbin/cpu loglevel=4
/tilepro/sbin/init
/tilepro/sbin/mem_serv
/tilepro/sbin/monitor
/tilepro/sbin/ramfsd boot
/tilepro/sbin/skb boot
/tilepro/sbin/spawnd boot boottilepro=1
/tilepro/sbin/startd boot
/tilepro/sbin/fish k
spawnd.1: lmp TX monitor.alloc_iref_request

monitor.1: lmp RX monitor.alloc_iref_request

monitor.1: lmp TX monitor.alloc_iref_reply

spawnd.1: lmp RX monitor.alloc_iref_reply

spawnd.1: udn TX octopus.set_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.1 { iref: 259 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1.ready

skb.0: udn TX octopus.set_response

skb.0: sending udn message to core(1,0)
skb.0: sending udn message to core(1,0)udn backend received message chan_id : 1



core (1) receiving udn message from chan 1... 

core (0) receiving udn message from chan 0... 
core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.1: udn RX octopus.set_response


core (1) receiving udn message from chan 1... 
spawnd.1: udn TX octopus.set_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.1.ready { iref: 0 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1.ready

skb.0: octopus_service: transform to string: spawn.1.ready { iref: 0 }

skb.0: octopus_service: wakeup 0x444d60d8 for spawn.1.ready { iref: 0 }

skb.0: lmp TX octopus.wait_for_response

spawnd.0: lmp RX octopus.wait_for_response

spawnd.0: lmp TX octopus.set_call

skb.0: udn TX octopus.set_response

skb.0: sending udn message to core(1,0)
udn backend received message chan_id : 1
skb.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 1... 


core (0) receiving udn message from chan 0... 
core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.1: udn RX octopus.set_response


core (1) receiving udn message from chan 1... 
spawnd.1: udn TX octopus.wait_for_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.wait_for_call

skb.0: octopus_service: get record all_spawnds_up

skb.0: waiting for: all_spawnds_up

skb.0: octopus_service: set_watch all_spawnds_up


core (0) receiving udn message from chan 0... 
skb.0: lmp RX octopus.set_call

skb.0: octopus_service:  set_handler: all_spawnds_up { iref: 0 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: transform to string: all_spawnds_up { iref: 0 }

skb.0: octopus_service: wakeup 0x444d8c00 for all_spawnds_up { iref: 0 }

skb.0: lmp TX octopus.wait_for_response

startd.0: lmp RX octopus.wait_for_response

startd.0: starting app /tilepro/sbin/fish on core 0

startd.0: lmp TX octopus.wait_for_call

skb.0: octopus_service: transform to string: all_spawnds_up { iref: 0 }

skb.0: octopus_service: wakeup 0x444efb10 for all_spawnds_up { iref: 0 }

skb.0: udn TX octopus.wait_for_response

skb.0: sending udn message to core(1,0)
udn backend received message chan_id : 1
skb.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 1... 
skb.0: lmp TX octopus.set_response


core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.1: udn RX octopus.wait_for_response

spawnd.0: lmp RX octopus.set_response


core (1) receiving udn message from chan 1... 
spawnd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

spawnd.0: lmp RX monitor.alloc_iref_reply

spawnd.0: lmp TX octopus.set_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record spawn.0

skb.0: waiting for: spawn.0

skb.0: octopus_service: set_watch spawn.0

skb.0: lmp RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.0 { iref: 8 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1.ready

skb.0: octopus_service: found record: spawn.1

skb.0: octopus_service: found record: spawn.0

skb.0: octopus_service: transform to string: spawn.0 { iref: 8 }

skb.0: octopus_service: wakeup 0x444d8c00 for spawn.0 { iref: 8 }

skb.0: lmp TX octopus.wait_for_response

startd.0: lmp RX octopus.wait_for_response

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

skb.0: lmp TX octopus.set_response

spawnd.0: lmp RX octopus.set_response

spawnd.0: lmp TX octopus.set_call

skb.0: lmp RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.0.ready { iref: 0 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1.ready

skb.0: octopus_service: found record: spawn.1

skb.0: octopus_service: found record: spawn.0

skb.0: lmp TX octopus.set_response

spawnd.0: lmp RX octopus.set_response

spawnd.0: lmp TX octopus.wait_for_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record all_spawnds_up

skb.0: octopus_service: transform to string: all_spawnds_up { iref: 0 }

skb.0: lmp TX octopus.wait_for_response

spawnd.0: lmp RX octopus.wait_for_response

spawnd.0: lmp RX monitor.bind_lmp_service_request

spawnd.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX spawn.spawn_domain_call

spawnd.0: lmp RX spawn.spawn_domain_call

spawnd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

spawnd.0: lmp RX trivfs.lookup_response

spawnd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

spawnd.0: lmp RX trivfs.lookup_response

spawnd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

spawnd.0: lmp RX trivfs.lookup_response

spawnd.0: lmp TX trivfs.getattr_call

ramfsd.0: lmp RX trivfs.getattr_call

ramfsd.0: lmp TX trivfs.getattr_response

spawnd.0: lmp RX trivfs.getattr_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX monitor_blocking.alloc_monitor_ep_call

monitor.0: lmp RX monitor_blocking.alloc_monitor_ep_call

monitor.0: lmp TX monitor_blocking.alloc_monitor_ep_response

spawnd.0: lmp RX monitor_blocking.alloc_monitor_ep_response

spawnd.0: spawning /tilepro/sbin/fish on core 0

ERROR: spawnd.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: spawnd.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

spawnd.0: lmp TX spawn.spawn_domain_response

startd.0: lmp RX spawn.spawn_domain_response

startd.0: starting app /tilepro/sbin/hellotest on core 1

startd.0: lmp TX octopus.wait_for_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record spawn.1

skb.0: octopus_service: transform to string: spawn.1 { iref: 259 }

skb.0: lmp TX octopus.wait_for_response

startd.0: lmp RX octopus.wait_for_response

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

aaa udn_endpoint_init 
startd.0: create new incoming channel id : 0
startd.0: lmp TX monitor.bind_udn_client_request

monitor.0: lmp RX monitor.bind_udn_client_request

monitor.0: udn TX intermon.bind_udn_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
resume(pc=0x01000000, sp=0x02033518, tp=0x02030000, r0=0x00000000)

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.bind_udn_request

aaa udn_support get core id: 0 
monitor.1: lmp TX monitor.bind_udn_service_request

spawnd.1: lmp RX monitor.bind_udn_service_request

server received channel id 0 and destination core id 0 from the client
aaa udn_endpoint_init 
spawnd.1: create new incoming channel id : 3

 udn channel init, dest_core_id: 0, out_chan_id: 0 dest_asid: 6 
spawnd.1: udn_impl.c out_chan_id: 0

spawnd.1: lmp TX monitor.bind_udn_reply_monitor


core (1) receiving udn message from chan 0... 
monitor.1: lmp RX monitor.bind_udn_reply_monitor

monitor.1: udn TX intermon.bind_udn_reply

monitor.1: sending udn message to core(0,0)
monitor.1: sending udn message to core(0,0)
fish.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

fish.0: lmp RX monitor.get_monitor_rpc_iref_reply

fish.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

fish.0: lmp RX monitor.bind_lmp_reply_client

fish.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

fish.0: lmp RX monitor.get_mem_iref_reply

fish.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

fish.0: lmp RX monitor.bind_lmp_reply_client

fish.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

fish.0: lmp RX monitor.get_name_iref_reply

fish.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

skb.0: lmp RX monitor.bind_lmp_service_request

skb.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

fish.0: lmp RX monitor.bind_lmp_reply_client

fish.0: lmp TX octopus.get_call

skb.0: lmp RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: lmp TX octopus.get_response

fish.0: lmp RX octopus.get_response

fish.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

fish.0: lmp RX monitor.alloc_iref_reply

fish.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

fish.0: lmp RX mem.allocate_response

fish.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

fish.0: lmp RX mem.allocate_response

fish.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

fish.0: lmp RX mem.allocate_response

fish.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

fish.0: lmp RX mem.allocate_response

fish.0: lmp TX monitor.get_ramfs_iref_request

monitor.0: lmp RX monitor.get_ramfs_iref_request

monitor.0: lmp TX monitor.get_ramfs_iref_reply

fish.0: lmp RX monitor.get_ramfs_iref_reply

fish.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

ramfsd.0: lmp RX monitor.bind_lmp_service_request

ramfsd.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

fish.0: lmp RX monitor.bind_lmp_reply_client

fish.0: lmp TX trivfs.getroot_call

ramfsd.0: lmp RX trivfs.getroot_call

ramfsd.0: lmp TX trivfs.getroot_response

fish.0: lmp RX trivfs.getroot_response

fish.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

fish.0: lmp RX mem.allocate_response

fish.0: lmp TX trivfs.bulk_init_call

ramfsd.0: lmp RX trivfs.bulk_init_call

ramfsd.0: lmp TX trivfs.bulk_init_response

fish.0: lmp RX trivfs.bulk_init_response

fish.0: lmp TX octopus.wait_for_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record keyboard

skb.0: waiting for: keyboard

skb.0: octopus_service: set_watch keyboard

udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:0 server_core_id:1
monitor.0: lmp TX monitor.bind_udn_reply_client

startd.0: lmp RX monitor.bind_udn_reply_client

client received channel id 3 and destination core id 1 from the server
startd.0: udn_impl.c out_chan_id: 3

startd.0: udn TX spawn.spawn_domain_call

startd.0: sending udn message to core(1,0)
startd.0: sending udn message to core(1,0)udn backend received message chan_id : 3


startd.0: sending udn message to core(1,0)core (1) receiving udn message from chan 3... 


core (1) receiving udn message from chan 3... 
udn backend received message chan_id : 3
udn backend received message chan_id : 3

core (1) receiving udn message from chan 3... 
spawnd.1: udn RX spawn.spawn_domain_call


spawnd.1: udn TX trivfs.lookup_call

core (0) receiving udn message from chan 0... 
spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.lookup_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.lookup_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.lookup_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.lookup_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.lookup_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.getattr_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.getattr_call

ramfsd.0: udn TX trivfs.getattr_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.getattr_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request

monitor.1: lmp TX monitor.cap_receive_request


core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request
core (0) receiving udn message from chan 0... 

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request

monitor.1: lmp TX monitor.cap_receive_request


core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request
core (0) receiving udn message from chan 0... 

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request
core (0) receiving udn message from chan 0... 

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request
core (0) receiving udn message from chan 0... 

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


monitor.1: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 0... 
spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: lmp TX monitor_blocking.alloc_monitor_ep_call


core (1) receiving udn message from chan 0... 
monitor.1: lmp RX monitor_blocking.alloc_monitor_ep_call

monitor.1: lmp TX monitor_blocking.alloc_monitor_ep_response

spawnd.1: lmp RX monitor_blocking.alloc_monitor_ep_response

spawnd.1: spawning /tilepro/sbin/hellotest on core 1

ERROR: spawnd.1 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: spawnd.1 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

spawnd.1: udn TX spawn.spawn_domain_response

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 3... 
udn backend received message chan_id : 0
resume(pc=0x01000000, sp=0x02023518, tp=0x02020000, r0=0x00000000)

core (0) receiving udn message from chan 0... 
startd.0: udn RX spawn.spawn_domain_response


core (0) receiving udn message from chan 0... 
startd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

startd.0: lmp RX trivfs.lookup_response

No bootscript
hellotest.1: lmp TX monitor.get_monitor_rpc_iref_request

monitor.1: lmp RX monitor.get_monitor_rpc_iref_request

monitor.1: lmp TX monitor.get_monitor_rpc_iref_reply

hellotest.1: lmp RX monitor.get_monitor_rpc_iref_reply

hellotest.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

hellotest.1: lmp RX monitor.bind_lmp_reply_client

hellotest.1: lmp TX monitor.get_mem_iref_request

monitor.1: lmp RX monitor.get_mem_iref_request

monitor.1: lmp TX monitor.get_mem_iref_reply

hellotest.1: lmp RX monitor.get_mem_iref_reply

hellotest.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

hellotest.1: lmp RX monitor.bind_lmp_reply_client

hellotest.1: lmp TX monitor.new_monitor_binding_request

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

hellotest.1: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
hellotest.1: create new incoming channel id : 0
hellotest.1: lmp TX monitor.bind_udn_client_request

monitor.1: lmp RX monitor.bind_udn_client_request

monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

mem_serv.0: lmp RX monitor.bind_udn_service_request

server received channel id 0 and destination core id 1 from the client
aaa udn_endpoint_init 
mem_serv.0: create new incoming channel id : 1

 udn channel init, dest_core_id: 1, out_chan_id: 0 dest_asid: 3 
mem_serv.0: udn_impl.c out_chan_id: 0

mem_serv.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

hellotest.1: lmp RX monitor.bind_udn_reply_client

client received channel id 1 and destination core id 0 from the server
hellotest.1: udn_impl.c out_chan_id: 1

hellotest.1: lmp TX monitor.get_name_iref_request


core (1) receiving udn message from chan 0... 
monitor.1: lmp RX monitor.get_name_iref_request

monitor.1: lmp TX monitor.get_name_iref_reply

hellotest.1: lmp RX monitor.get_name_iref_reply

hellotest.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

hellotest.1: lmp RX monitor.bind_lmp_reply_client

hellotest.1: lmp TX monitor.new_monitor_binding_request

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

hellotest.1: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
hellotest.1: create new incoming channel id : 1
hellotest.1: lmp TX monitor.bind_udn_client_request

monitor.1: lmp RX monitor.bind_udn_client_request

monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

skb.0: lmp RX monitor.bind_udn_service_request

server received channel id 1 and destination core id 1 from the client
aaa udn_endpoint_init 
skb.0: create new incoming channel id : 1

 udn channel init, dest_core_id: 1, out_chan_id: 1 dest_asid: 3 
skb.0: udn_impl.c out_chan_id: 1

skb.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(1,0)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(1,0)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

hellotest.1: lmp RX monitor.bind_udn_reply_client

client received channel id 1 and destination core id 0 from the server
hellotest.1: udn_impl.c out_chan_id: 1

hellotest.1: udn TX octopus.get_call

hellotest.1: sending udn message to core(0,0)
hellotest.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

udn backend received message chan_id : 1
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 1... 

core (0) receiving udn message from chan 1... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(1,0)
skb.0: sending udn message to core(1,0)udn backend received message chan_id : 1



core (1) receiving udn message from chan 1... 
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
hellotest.1: udn RX octopus.get_response


core (1) receiving udn message from chan 1... 
hellotest.1: lmp TX monitor.alloc_iref_request

monitor.1: lmp RX monitor.alloc_iref_request

monitor.1: lmp TX monitor.alloc_iref_reply

hellotest.1: lmp RX monitor.alloc_iref_reply

hellotest.1: udn TX mem.allocate_call

hellotest.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.1: lmp TX monitor.cap_receive_request

hellotest.1: lmp RX monitor.cap_receive_request

hellotest.1: udn RX mem.allocate_response

hellotest.1: udn TX mem.allocate_call

hellotest.1: sending udn message to core(0,0)
udn backend received message chan_id : 1


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.1: lmp TX monitor.cap_receive_request

hellotest.1: lmp RX monitor.cap_receive_request

hellotest.1: udn RX mem.allocate_response

hellotest.1: udn TX mem.allocate_call

hellotest.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.1: lmp TX monitor.cap_receive_request

hellotest.1: lmp RX monitor.cap_receive_request

hellotest.1: udn RX mem.allocate_response

hellotest.1: udn TX mem.allocate_call

hellotest.1: sending udn message to core(0,0)

udn backend received message chan_id : 1
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(1,0)
monitor.0: sending udn message to core(1,0)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.1: lmp TX monitor.cap_receive_request

hellotest.1: lmp RX monitor.cap_receive_request

hellotest.1: udn RX mem.allocate_response

hellotest.1: Hello world (debug_printf)

Hello world (normal printf)
arg[0] = hellotest
hellotest.1: udn TX octopus.get_call

hellotest.1: sending udn message to core(0,0)
hellotest.1: sending udn message to core(0,0)
udn backend received message chan_id : 1
udn backend received message chan_id : 1


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 1... 

core (0) receiving udn message from chan 1... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record spawn.1

skb.0: octopus_service: transform to string: spawn.1 { iref: 259 }

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(1,0)
skb.0: sending udn message to core(1,0)

core (0) receiving udn message from chan 1... 
hellotest.1: udn RX octopus.get_response

hellotest.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_service_request

spawnd.1: lmp RX monitor.bind_lmp_service_request

spawnd.1: lmp TX monitor.bind_lmp_reply_monitor

monitor.1: lmp RX monitor.bind_lmp_reply_monitor

monitor.1: lmp TX monitor.bind_lmp_reply_client

hellotest.1: lmp RX monitor.bind_lmp_reply_client

hellotest.1: lmp TX spawn.exit_call

spawnd.1: lmp RX spawn.exit_call

