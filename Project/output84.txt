MKBOOT MODULES:  ./tilepro/menu.lst.modules ./tilepro/sbin/cpu ./tilepro/sbin/init ./tilepro/sbin/mem_serv ./tilepro/sbin/monitor ./tilepro/sbin/ramfsd ./tilepro/sbin/skb ./tilepro/sbin/spawnd ./tilepro/sbin/startd ./tilepro/sbin/hellotest
tile-mkboot -o tilepro/sbin/cpu.bin.tmp --hvc /home/andreas/barrelfish/new_test2/kernel/arch/tilepro/tilepro-conf.hvc kernel=tilepro/sbin/bootloader ./tilepro/menu.lst.modules ./tilepro/sbin/cpu ./tilepro/sbin/init ./tilepro/sbin/mem_serv ./tilepro/sbin/monitor ./tilepro/sbin/ramfsd ./tilepro/sbin/skb ./tilepro/sbin/spawnd ./tilepro/sbin/startd ./tilepro/sbin/hellotest
Mem check:
00000000 d mem_l2_check
mv tilepro/sbin/cpu.bin.tmp tilepro/sbin/cpu.bin
tile-monitor --simulator --functional --console --config 1x8 --gdb-port 11111 --bm-debug-on-panic --sim-args -+- --symbols tilepro/sbin/bootloader --symbols tilepro/sbin/cpu -+- --wait --bootrom-file tilepro/sbin/cpu.bin
(0,3) Tilera Hypervisor, version 3.0.1.125620 2011-04-09 21:57:10
Bootloader starting.
Called hv_init.
Got a valid ASID range.
Successfully installed boot-up context.
cpu_id: 0
Installed page table!
base: 0xFD000000; size: 0x30F0; flags: 0x5; ret: 0xFD000000
base: 0xFD030000; size: 0x18E38; flags: 0x7; ret: 0xFD030000
base: 0xF00000; size: 0x8300; flags: 0x6; ret: 0xF00000
entry_point: 0xFD034F28
[Tile 0 coordinate; BSP: 1] : (0,0)
[Tile 0 initial SP] : 0xFCFFCF38
[Tile 0 initial LR] : 0xFD035068
[Physical memory range 1] : 0x0_00000000 to 0x0_3E000000
Physical Memory for core 0 - start: 0x0_13000000; end: 0x0_23000000; free: 0x0_10000000
Physical Memory for core 1 - start: 0x0_23000000; end: 0x0_27000000; free: 0x0_04000000
Physical Memory for core 2 - start: 0x0_27000000; end: 0x0_2B000000; free: 0x0_04000000
Physical Memory for core 3 - start: 0x0_2B000000; end: 0x0_2F000000; free: 0x0_04000000
Physical Memory for core 4 - start: 0x0_2F000000; end: 0x0_33000000; free: 0x0_04000000
Physical Memory for core 5 - start: 0x0_33000000; end: 0x0_37000000; free: 0x0_04000000
Physical Memory for core 6 - start: 0x0_37000000; end: 0x0_3B000000; free: 0x0_04000000
Current range has 0x0_03000000 bytes remaining, which is not enough for another core
No more memory to serve core 7
Tile 0 is starting...
[Tile width]  : 1
[Tile height] : 8
Tile 0 is starting init...
Allocated physical - start: 0x0_13000000; size: 0x00800000; requested: 0x00800000; end: 0x0_13800000
Virtual address of page tables for init : 0x80000000
Allocated physical - start: 0x0_13800000; size: 0x00040000; requested: 0x00040000; end: 0x0_13840000
Calling spawn_module(...)...
spawn module: ./tilepro/sbin/init
Allocated physical - start: 0x0_13840000; size: 0x00010000; requested: 0x00010000; end: 0x0_13850000
Allocated physical - start: 0x0_13850000; size: 0x00010000; requested: 0x00010000; end: 0x0_13860000
Allocated physical - start: 0x0_13860000; size: 0x00010000; requested: 0x00010000; end: 0x0_13870000
Allocated physical - start: 0x0_13870000; size: 0x00010000; requested: 0x00010000; end: 0x0_13880000
Allocated physical - start: 0x0_13880000; size: 0x00010000; requested: 0x00010000; end: 0x0_13890000
Allocated physical - start: 0x0_13890000; size: 0x00010000; requested: 0x00010000; end: 0x0_138A0000
Allocated physical - start: 0x0_138A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_138B0000
Allocated physical - start: 0x0_138B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_138C0000
Allocated physical - start: 0x0_138C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_138D0000
Allocated physical - start: 0x0_138D0000; size: 0x00040000; requested: 0x00040000; end: 0x0_13910000
Allocated physical - start: 0x0_13910000; size: 0x00400000; requested: 0x00400000; end: 0x0_13D10000
Allocated physical - start: 0x0_13D10000; size: 0x00010000; requested: 0x00000800; end: 0x0_13D20000
Allocated physical - start: 0x0_13D20000; size: 0x00200000; requested: 0x00200000; end: 0x0_13F20000
Allocated physical - start: 0x0_13F20000; size: 0x00020000; requested: 0x00020000; end: 0x0_13F40000
Allocated physical - start: 0x0_13F40000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F50000
Allocated physical - start: 0x0_13F50000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F60000
Allocated physical - start: 0x0_13F60000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F70000
Allocated physical - start: 0x0_13F70000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F80000
Allocated physical - start: 0x0_13F80000; size: 0x00010000; requested: 0x00010000; end: 0x0_13F90000
Allocated physical - start: 0x0_13F90000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FA0000
Allocated physical - start: 0x0_13FA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FB0000
Allocated physical - start: 0x0_13FB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FC0000
Allocated physical - start: 0x0_13FC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FD0000
Allocated physical - start: 0x0_13FD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FE0000
Allocated physical - start: 0x0_13FE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_13FF0000
Allocated physical - start: 0x0_13FF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14000000
Allocated physical - start: 0x0_14000000; size: 0x00010000; requested: 0x00010000; end: 0x0_14010000
Allocated physical - start: 0x0_14010000; size: 0x00010000; requested: 0x00010000; end: 0x0_14020000
Allocated physical - start: 0x0_14020000; size: 0x00010000; requested: 0x00010000; end: 0x0_14030000
Allocated physical - start: 0x0_14030000; size: 0x00010000; requested: 0x00010000; end: 0x0_14040000
Allocated physical - start: 0x0_14040000; size: 0x00010000; requested: 0x00010000; end: 0x0_14050000
Allocated physical - start: 0x0_14050000; size: 0x00010000; requested: 0x00010000; end: 0x0_14060000
Allocated physical - start: 0x0_14060000; size: 0x00010000; requested: 0x00010000; end: 0x0_14070000
Allocated physical - start: 0x0_14070000; size: 0x00010000; requested: 0x00010000; end: 0x0_14080000
Allocated physical - start: 0x0_14080000; size: 0x00010000; requested: 0x00010000; end: 0x0_14090000
Allocated physical - start: 0x0_14090000; size: 0x00010000; requested: 0x00010000; end: 0x0_140A0000
Allocated physical - start: 0x0_140A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140B0000
Allocated physical - start: 0x0_140B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140C0000
Allocated physical - start: 0x0_140C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140D0000
Allocated physical - start: 0x0_140D0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140E0000
Allocated physical - start: 0x0_140E0000; size: 0x00010000; requested: 0x00010000; end: 0x0_140F0000
Allocated physical - start: 0x0_140F0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14100000
Allocated physical - start: 0x0_14100000; size: 0x00010000; requested: 0x00010000; end: 0x0_14110000
Allocated physical - start: 0x0_14110000; size: 0x00010000; requested: 0x00010000; end: 0x0_14120000
Allocated physical - start: 0x0_14120000; size: 0x00010000; requested: 0x00010000; end: 0x0_14130000
Allocated physical - start: 0x0_14130000; size: 0x00010000; requested: 0x00010000; end: 0x0_14140000
Allocated physical - start: 0x0_14140000; size: 0x00010000; requested: 0x00010000; end: 0x0_14150000
Allocated physical - start: 0x0_14150000; size: 0x00010000; requested: 0x00010000; end: 0x0_14160000
Allocated physical - start: 0x0_14160000; size: 0x00010000; requested: 0x00010000; end: 0x0_14170000
Allocated physical - start: 0x0_14170000; size: 0x00010000; requested: 0x00010000; end: 0x0_14180000
Allocated physical - start: 0x0_14180000; size: 0x00010000; requested: 0x00010000; end: 0x0_14190000
Allocated physical - start: 0x0_14190000; size: 0x00010000; requested: 0x00010000; end: 0x0_141A0000
Allocated physical - start: 0x0_141A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141B0000
Allocated physical - start: 0x0_141B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141C0000
Allocated physical - start: 0x0_141C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141D0000
Allocated physical - start: 0x0_141D0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141E0000
Allocated physical - start: 0x0_141E0000; size: 0x00010000; requested: 0x00010000; end: 0x0_141F0000
Allocated physical - start: 0x0_141F0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14200000
Allocated physical - start: 0x0_14200000; size: 0x00010000; requested: 0x00010000; end: 0x0_14210000
Allocated physical - start: 0x0_14210000; size: 0x00010000; requested: 0x00010000; end: 0x0_14220000
Allocated physical - start: 0x0_14220000; size: 0x00010000; requested: 0x00010000; end: 0x0_14230000
Allocated physical - start: 0x0_14230000; size: 0x00010000; requested: 0x00010000; end: 0x0_14240000
Allocated physical - start: 0x0_14240000; size: 0x00010000; requested: 0x00010000; end: 0x0_14250000
Allocated physical - start: 0x0_14250000; size: 0x00010000; requested: 0x00010000; end: 0x0_14260000
Allocated physical - start: 0x0_14260000; size: 0x00010000; requested: 0x00010000; end: 0x0_14270000
Allocated physical - start: 0x0_14270000; size: 0x00010000; requested: 0x00010000; end: 0x0_14280000
Allocated physical - start: 0x0_14280000; size: 0x00010000; requested: 0x00010000; end: 0x0_14290000
Allocated physical - start: 0x0_14290000; size: 0x00010000; requested: 0x00010000; end: 0x0_142A0000
Allocated physical - start: 0x0_142A0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142B0000
Allocated physical - start: 0x0_142B0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142C0000
Allocated physical - start: 0x0_142C0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142D0000
Allocated physical - start: 0x0_142D0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142E0000
Allocated physical - start: 0x0_142E0000; size: 0x00010000; requested: 0x00010000; end: 0x0_142F0000
Allocated physical - start: 0x0_142F0000; size: 0x00010000; requested: 0x00010000; end: 0x0_14300000
Allocated physical - start: 0x0_14300000; size: 0x00010000; requested: 0x00010000; end: 0x0_14310000
Allocated physical - start: 0x0_14310000; size: 0x00010000; requested: 0x00010000; end: 0x0_14320000
Allocated physical - start: 0x0_14320000; size: 0x00010000; requested: 0x00010000; end: 0x0_14330000
Allocated physical - start: 0x0_14330000; size: 0x00010000; requested: 0x00010000; end: 0x0_14340000
spawn_module(...) completed.
Creating page table caps...
Page table caps are done.
Creating module caps...
Allocated physical - start: 0x0_14340000; size: 0x00010000; requested: 0x00010000; end: 0x0_14350000
menulist_va : 0x81340000
Reading menu list...
Menu list content : 
./tilepro/menu.lst.modules
./tilepro/sbin/cpu loglevel=4
./tilepro/sbin/init
./tilepro/sbin/mem_serv
./tilepro/sbin/monitor
./tilepro/sbin/ramfsd boot
./tilepro/sbin/skb boot
./tilepro/sbin/spawnd boot boottilepro=1-3
./tilepro/sbin/startd boot
./tilepro/sbin/hellotest core=3

Loading module: ./tilepro/sbin/cpu loglevel=4
Allocated physical - start: 0x0_14350000; size: 0x00030000; requested: 0x00021424; end: 0x0_14380000
Loading module: ./tilepro/sbin/init 
Allocated physical - start: 0x0_14380000; size: 0x00120000; requested: 0x0011B540; end: 0x0_144A0000
Loading module: ./tilepro/sbin/mem_serv 
Allocated physical - start: 0x0_144A0000; size: 0x00110000; requested: 0x0010B430; end: 0x0_145B0000
Loading module: ./tilepro/sbin/monitor 
Allocated physical - start: 0x0_145B0000; size: 0x00170000; requested: 0x0016B840; end: 0x0_14720000
Loading module: ./tilepro/sbin/ramfsd boot
Allocated physical - start: 0x0_14720000; size: 0x00130000; requested: 0x0012B4C0; end: 0x0_14850000
Loading module: ./tilepro/sbin/skb boot
Allocated physical - start: 0x0_14850000; size: 0x00130000; requested: 0x0012B56C; end: 0x0_14980000
Loading module: ./tilepro/sbin/spawnd boot boottilepro=1-3
Allocated physical - start: 0x0_14980000; size: 0x001D0000; requested: 0x001CC9FC; end: 0x0_14B50000
Loading module: ./tilepro/sbin/startd boot
Allocated physical - start: 0x0_14B50000; size: 0x001B0000; requested: 0x001AC9E8; end: 0x0_14D00000
Loading module: ./tilepro/sbin/hellotest core=3
Allocated physical - start: 0x0_14D00000; size: 0x00110000; requested: 0x0010B3D8; end: 0x0_14E10000
Module caps are done.
init virtual address : 0x81380000
Got command line: loglevel=4
Allocated physical - start: 0x0_14E10000; size: 0x000E0000; requested: 0x000E0000; end: 0x0_14EF0000
Allocated physical - start: 0x0_14EF0000; size: 0x00020000; requested: 0x00020000; end: 0x0_14F10000
Allocated physical - start: 0x0_14F10000; size: 0x00010000; requested: 0x00010000; end: 0x0_14F20000
Allocated physical - start: 0x0_14F20000; size: 0x00040000; requested: 0x00040000; end: 0x0_14F60000
init image load is done
init entry point: 0x01000020
Allocated physical - start: 0x0_14F60000; size: 0x00100000; requested: 0x00100000; end: 0x0_15060000
Creating unused ram caps...
Unused RAM caps are done.
init kernel is ready.
dispatch it baby!
resume(pc=0x01000020, sp=0x80000000, tp=0x00070000, r0=0x00000000)
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Bootloader starting.
Called hv_init.
Bootloader starting.
Bootloader starting.
Called hv_init.
Called hv_init.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Called hv_init.
Called hv_init.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Got a valid ASID range.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
1Successfully installed boot-up context.
Successfully installed boot-up context.

cpu_id: Successfully installed boot-up context.
Successfully installed boot-up context.
cpu_id: Successfully installed boot-up context.
cpu_id: 2cpu_id: cpu_id: 3cpu_id: 4
56
7



Installed page table!
base: 0xFD000000; size: 0x30F0; init: invoked as: init 65536
flags: 0x5; ret: 0xFD000000Installed page table!
Installed page table!

Installed page table!
Installed page table!
Installed page table!
Installed page table!
base: base: base: base: base: 0xFD000000base: 0xFD0000000xFD0000000xFD0000000xFD000000; 0xFD000000; ; ; ; size: ; size: size: size: size: 0x30F0size: 0x30F00x30F00x30F00x30F0; 0x30F0; ; ; ; flags: ; flags: flags: flags: flags: 0x5flags: 0x50x50x50x5; 0x5; ; ; ; ret: ; ret: ret: ret: ret: ret: 0xFD0000000xFD0000000xFD0000000xFD0000000xFD0000000xFD000000





base: 0xFD030000; size: 0x18E38; flags: 0x7; ret: 0xFD030000
base: base: base: base: base: base: 0xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD030000; ; ; ; ; ; size: size: size: size: size: size: 0x18E380x18E380x18E380x18E380x18E380x18E38; ; ; ; ; ; flags: flags: flags: flags: flags: flags: 0x70x70x70x70x70x7; ; ; ; ; ; ret: ret: ret: ret: ret: ret: 0xFD0300000xFD0300000xFD0300000xFD0300000xFD0300000xFD030000





base: 0xF00000; size: 0x8300; flags: 0x6; ret: 0xF00000
base: base: base: base: base: base: 0xF000000xF000000xF000000xF000000xF000000xF00000; ; ; ; ; ; size: size: size: size: size: size: 0x83000x83000x83000x83000x83000x8300; ; ; ; ; ; flags: flags: flags: flags: flags: flags: 0x60x60x60x60x60x6; ; ; ; ; ; ret: ret: ret: ret: ret: ret: 0xF000000xF000000xF000000xF000000xF000000xF00000





entry_point: 0xFD034F28
[Tile 1 coordinate; BSP: 0] : (0,1)
[Tile 1 initial SP] : 0xFCFECF38
[Tile 1 initial LR] : 0xFD035068
Core 1 waiting for startup
entry_point: entry_point: entry_point: entry_point: entry_point: entry_point: 0xFD034F280xFD034F280xFD034F280xFD034F280xFD034F280xFD034F28





[Tile 2 coordinate; BSP: 0] : (0,2)
[Tile 3 coordinate; BSP: 0] : (0,3)
[Tile 4 coordinate; BSP: 0] : (0,4)
[Tile 5 coordinate; BSP: 0] : (0,5)
[Tile 6 coordinate; BSP: 0] : (0,6)
[Tile 7 coordinate; BSP: 0] : (0,7)
[Tile 2 initial SP] : 0xFCFDCF38
[Tile 3 initial SP] : 0xFCFCCF38
[Tile 4 initial SP] : 0xFCFBCF38
[Tile 5 initial SP] : 0xFCFACF38
[Tile 6 initial SP] : 0xFCF9CF38
[Tile 7 initial SP] : 0xFCF8CF38
[Tile 2 initial LR] : 0xFD035068
[Tile 3 initial LR] : 0xFD035068
[Tile 4 initial LR] : 0xFD035068
[Tile 5 initial LR] : 0xFD035068
[Tile 6 initial LR] : 0xFD035068
[Tile 7 initial LR] : 0xFD035068
Core 2 waiting for startup
Core 3 waiting for startup
Core 4 waiting for startup
Core 5 waiting for startup
Core 6 waiting for startup
Core 7 waiting for startup
Spawning memory server (tilepro/sbin/mem_serv)...
Spawning monitor (tilepro/sbin/monitor)...
ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: init.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000020, sp=0x02123518, tp=0x02120000, r0=0x00000000)
argc value: 2
monitor: invoked as: tilepro/sbin/monitor 36831232
monitor.0: WARNING: bench_arch_init() have not been implemented!

set core id:0 
resume(pc=0x01000020, sp=0x02023518, tp=0x02020000, r0=0x00000000)
RAM allocator initialised, 191 MB (of 223 MB) available
mem_serv.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

mem_serv.0: lmp RX monitor.alloc_iref_reply

mem_serv.0: lmp TX monitor.set_mem_iref_request

monitor.0: lmp RX monitor.set_mem_iref_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

Spawning ramfsd on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000000, sp=0x02023518, tp=0x02020000, r0=0x00000000)
ramfsd.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

ramfsd.0: lmp RX monitor.get_monitor_rpc_iref_reply

ramfsd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

ramfsd.0: lmp RX monitor.bind_lmp_reply_client

ramfsd.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

ramfsd.0: lmp RX monitor.get_mem_iref_reply

ramfsd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

ramfsd.0: lmp RX monitor.bind_lmp_reply_client

ramfsd.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

ramfsd.0: lmp RX monitor.get_name_iref_reply

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd is starting!!!
ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor.multiboot_cap_request

monitor.0: lmp RX monitor.multiboot_cap_request

monitor.0: lmp TX monitor.multiboot_cap_reply

ramfsd.0: lmp RX monitor.multiboot_cap_reply

ramfsd.0: lmp TX monitor_blocking.get_bootinfo_call

monitor.0: lmp RX monitor_blocking.get_bootinfo_call

monitor.0: lmp TX monitor_blocking.get_bootinfo_response

ramfsd.0: lmp RX monitor_blocking.get_bootinfo_response

ramfsd.0: pre-populating from boot image...

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: ready

ramfsd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

ramfsd.0: lmp RX monitor.alloc_iref_reply

ramfsd.0: lmp TX monitor.set_ramfs_iref_request

monitor.0: lmp RX monitor.set_ramfs_iref_request

Spawning skb on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000000, sp=0x02033518, tp=0x02030000, r0=0x00000000)
skb.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

skb.0: lmp RX monitor.get_monitor_rpc_iref_reply

skb.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

skb.0: lmp RX monitor.bind_lmp_reply_client

skb.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

skb.0: lmp RX monitor.get_mem_iref_reply

skb.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

skb.0: lmp RX monitor.bind_lmp_reply_client

skb.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

skb.0: lmp RX monitor.get_name_iref_reply

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

skb.0: lmp RX mem.allocate_response

skb.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

skb.0: lmp RX monitor.alloc_iref_reply

skb.0: octopus_service: octopus rpc iref is: 5

skb.0: lmp TX monitor.set_name_iref_request

monitor.0: lmp RX monitor.set_name_iref_request

Spawning ./tilepro/sbin/spawnd on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

Spawning ./tilepro/sbin/startd on core 0
monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.0 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

resume(pc=0x01000000, sp=0x02033518, tp=0x02030000, r0=0x00000000)
startd.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

startd.0: lmp RX monitor.get_monitor_rpc_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

startd.0: lmp RX monitor.get_mem_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

startd.0: lmp RX monitor.get_name_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

skb.0: lmp RX monitor.bind_lmp_service_request

skb.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX octopus.get_call

skb.0: lmp RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: lmp TX octopus.get_response

startd.0: lmp RX octopus.get_response

startd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

startd.0: lmp RX monitor.alloc_iref_reply

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX monitor.get_ramfs_iref_request

monitor.0: lmp RX monitor.get_ramfs_iref_request

monitor.0: lmp TX monitor.get_ramfs_iref_reply

startd.0: lmp RX monitor.get_ramfs_iref_reply

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

ramfsd.0: lmp RX monitor.bind_lmp_service_request

ramfsd.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

startd.0: lmp TX trivfs.getroot_call

ramfsd.0: lmp RX trivfs.getroot_call

ramfsd.0: lmp TX trivfs.getroot_response

startd.0: lmp RX trivfs.getroot_response

startd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

startd.0: lmp RX mem.allocate_response

startd.0: lmp TX trivfs.bulk_init_call

ramfsd.0: lmp RX trivfs.bulk_init_call

ramfsd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

ramfsd.0: lmp RX mem.allocate_response

ramfsd.0: lmp TX trivfs.bulk_init_response

startd.0: lmp RX trivfs.bulk_init_response

startd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

startd.0: lmp RX trivfs.lookup_response

startd.0: lmp TX trivfs.getattr_call

ramfsd.0: lmp RX trivfs.getattr_call

ramfsd.0: lmp TX trivfs.getattr_response

startd.0: lmp RX trivfs.getattr_response

startd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

startd.0: lmp RX trivfs.read_bulk_response

startd.0: lmp TX octopus.wait_for_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record all_spawnds_up

skb.0: waiting for: all_spawnds_up

skb.0: octopus_service: set_watch all_spawnds_up

resume(pc=0x01000000, sp=0x02043518, tp=0x02040000, r0=0x00000000)
spawnd.0: lmp TX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp TX monitor.get_monitor_rpc_iref_reply

spawnd.0: lmp RX monitor.get_monitor_rpc_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX monitor.get_mem_iref_request

monitor.0: lmp RX monitor.get_mem_iref_request

monitor.0: lmp TX monitor.get_mem_iref_reply

spawnd.0: lmp RX monitor.get_mem_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

mem_serv.0: lmp RX monitor.bind_lmp_service_request

mem_serv.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX monitor.get_name_iref_request

monitor.0: lmp RX monitor.get_name_iref_request

monitor.0: lmp TX monitor.get_name_iref_reply

spawnd.0: lmp RX monitor.get_name_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

skb.0: lmp RX monitor.bind_lmp_service_request

skb.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX octopus.get_call

skb.0: lmp RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: lmp TX octopus.get_response

spawnd.0: lmp RX octopus.get_response

spawnd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

spawnd.0: lmp RX monitor.alloc_iref_reply

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX monitor.get_ramfs_iref_request

monitor.0: lmp RX monitor.get_ramfs_iref_request

monitor.0: lmp TX monitor.get_ramfs_iref_reply

spawnd.0: lmp RX monitor.get_ramfs_iref_reply

spawnd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_service_request

ramfsd.0: lmp RX monitor.bind_lmp_service_request

ramfsd.0: lmp TX monitor.bind_lmp_reply_monitor

monitor.0: lmp RX monitor.bind_lmp_reply_monitor

monitor.0: lmp TX monitor.bind_lmp_reply_client

spawnd.0: lmp RX monitor.bind_lmp_reply_client

spawnd.0: lmp TX trivfs.getroot_call

ramfsd.0: lmp RX trivfs.getroot_call

ramfsd.0: lmp TX trivfs.getroot_response

spawnd.0: lmp RX trivfs.getroot_response

spawnd.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

spawnd.0: lmp RX mem.allocate_response

spawnd.0: lmp TX trivfs.bulk_init_call

ramfsd.0: lmp RX trivfs.bulk_init_call

ramfsd.0: lmp TX trivfs.bulk_init_response

spawnd.0: lmp RX trivfs.bulk_init_response

spawnd.0: spawnd invoked on core 0 as:
 spawnd boot boottilepro=1-3 apicid=0
spawnd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

spawnd.0: lmp RX trivfs.lookup_response

spawnd.0: lmp TX trivfs.getattr_call

ramfsd.0: lmp RX trivfs.getattr_call

ramfsd.0: lmp TX trivfs.getattr_response

spawnd.0: lmp RX trivfs.getattr_response

spawnd.0: lmp TX trivfs.read_bulk_call

ramfsd.0: lmp RX trivfs.read_bulk_call

ramfsd.0: lmp TX trivfs.read_bulk_response

spawnd.0: lmp RX trivfs.read_bulk_response

spawnd.0: gbootmodules is:
/tilepro/sbin/cpu loglevel=4
/tilepro/sbin/init
/tilepro/sbin/mem_serv
/tilepro/sbin/monitor
/tilepro/sbin/ramfsd boot
/tilepro/sbin/skb boot
/tilepro/sbin/spawnd boot boottilepro=1-3
/tilepro/sbin/startd boot
/tilepro/sbin/hell
cmd line : boottilepro=1-3
spawnd.0: coreid 0 is arch id 0

spawnd.0: coreid 1 is arch id 1

spawnd.0: coreid 2 is arch id 2

spawnd.0: coreid 3 is arch id 3

id_from: 1 id_to: 3
 test1 case 0 max core id:255 

 test1 case 1 max core id:255 
aaa boot_core_request coreid: 1
spawnd.0: lmp TX monitor.boot_core_request

monitor.0: lmp RX monitor.boot_core_request

Monitor 0: booting tilepro core 1 as '/tilepro/sbin/cpu loglevel=4'

 aa my_core_id: 0 coreid:1 asid:2
aa intermon udn init on core: 0
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 0 dest_asid: 1 
Core 1 received startup: 626F6F74
forloop i:0 cpu_id:1 chanid::0
aa core: 0 setup new binding id: 1
forloop i:1 cpu_id:1 chanid::0
forloop i:2 cpu_id:1 chanid::0

forloop i:3 cpu_id:1 chanid::0
 intermon_init coreid: 1
cpu_id:1 chanid::0
Allocated physical - start: 0x0_23000000; size: 0x00800000; requested: 0x00800000; end: 0x0_23800000
udn_intermon_init aa on core:0
inter.c arch_intermon_init my_core_id:0
aa test debugpoint boot.c
Virtual address of page tables for init : 0x90000000
Calling spawn_module(...)...
spawn module: monitor
Allocated physical - start: 0x0_23800000; size: 0x00010000; requested: 0x00010000; end: 0x0_23810000
Allocated physical - start: 0x0_23810000; size: 0x00010000; requested: 0x00010000; end: 0x0_23820000
Allocated physical - start: 0x0_23820000; size: 0x00010000; requested: 0x00010000; end: 0x0_23830000
Allocated physical - start: 0x0_23830000; size: 0x00010000; requested: 0x00010000; end: 0x0_23840000
Allocated physical - start: 0x0_23840000; size: 0x00010000; requested: 0x00010000; end: 0x0_23850000
Allocated physical - start: 0x0_23850000; size: 0x00010000; requested: 0x00010000; end: 0x0_23860000
Allocated physical - start: 0x0_23860000; size: 0x00010000; requested: 0x00010000; end: 0x0_23870000
Allocated physical - start: 0x0_23870000; size: 0x00010000; requested: 0x00010000; end: 0x0_23880000
Allocated physical - start: 0x0_23880000; size: 0x00010000; requested: 0x00010000; end: 0x0_23890000
Allocated physical - start: 0x0_23890000; size: 0x00040000; requested: 0x00040000; end: 0x0_238D0000
Allocated physical - start: 0x0_238D0000; size: 0x00010000; requested: 0x00000800; end: 0x0_238E0000
Allocated physical - start: 0x0_238E0000; size: 0x00200000; requested: 0x00200000; end: 0x0_23AE0000
Allocated physical - start: 0x0_23AE0000; size: 0x00020000; requested: 0x00020000; end: 0x0_23B00000
Allocated physical - start: 0x0_23B00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B10000
Allocated physical - start: 0x0_23B10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B20000
Allocated physical - start: 0x0_23B20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B30000
Allocated physical - start: 0x0_23B30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B40000
Allocated physical - start: 0x0_23B40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B50000
Allocated physical - start: 0x0_23B50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B60000
Allocated physical - start: 0x0_23B60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B70000
Allocated physical - start: 0x0_23B70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B80000
Allocated physical - start: 0x0_23B80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23B90000
Allocated physical - start: 0x0_23B90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BA0000
Allocated physical - start: 0x0_23BA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BB0000
Allocated physical - start: 0x0_23BB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BC0000
Allocated physical - start: 0x0_23BC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BD0000
Allocated physical - start: 0x0_23BD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BE0000
Allocated physical - start: 0x0_23BE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23BF0000
Allocated physical - start: 0x0_23BF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C00000
Allocated physical - start: 0x0_23C00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C10000
Allocated physical - start: 0x0_23C10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C20000
Allocated physical - start: 0x0_23C20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C30000
Allocated physical - start: 0x0_23C30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C40000
Allocated physical - start: 0x0_23C40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C50000
Allocated physical - start: 0x0_23C50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C60000
Allocated physical - start: 0x0_23C60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C70000
Allocated physical - start: 0x0_23C70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C80000
Allocated physical - start: 0x0_23C80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23C90000
Allocated physical - start: 0x0_23C90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CA0000
Allocated physical - start: 0x0_23CA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CB0000
Allocated physical - start: 0x0_23CB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CC0000
Allocated physical - start: 0x0_23CC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CD0000
Allocated physical - start: 0x0_23CD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CE0000
Allocated physical - start: 0x0_23CE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23CF0000
Allocated physical - start: 0x0_23CF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D00000
Allocated physical - start: 0x0_23D00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D10000
Allocated physical - start: 0x0_23D10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D20000
Allocated physical - start: 0x0_23D20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D30000
Allocated physical - start: 0x0_23D30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D40000
Allocated physical - start: 0x0_23D40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D50000
Allocated physical - start: 0x0_23D50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D60000
Allocated physical - start: 0x0_23D60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D70000
Allocated physical - start: 0x0_23D70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D80000
Allocated physical - start: 0x0_23D80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23D90000
Allocated physical - start: 0x0_23D90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DA0000
Allocated physical - start: 0x0_23DA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DB0000
Allocated physical - start: 0x0_23DB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DC0000
Allocated physical - start: 0x0_23DC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DD0000
Allocated physical - start: 0x0_23DD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DE0000
Allocated physical - start: 0x0_23DE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23DF0000
Allocated physical - start: 0x0_23DF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E00000
Allocated physical - start: 0x0_23E00000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E10000
Allocated physical - start: 0x0_23E10000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E20000
Allocated physical - start: 0x0_23E20000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E30000
Allocated physical - start: 0x0_23E30000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E40000
Allocated physical - start: 0x0_23E40000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E50000
Allocated physical - start: 0x0_23E50000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E60000
Allocated physical - start: 0x0_23E60000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E70000
Allocated physical - start: 0x0_23E70000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E80000
Allocated physical - start: 0x0_23E80000; size: 0x00010000; requested: 0x00010000; end: 0x0_23E90000
Allocated physical - start: 0x0_23E90000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EA0000
Allocated physical - start: 0x0_23EA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EB0000
Allocated physical - start: 0x0_23EB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EC0000
Allocated physical - start: 0x0_23EC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23ED0000
Allocated physical - start: 0x0_23ED0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EE0000
Allocated physical - start: 0x0_23EE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23EF0000
Allocated physical - start: 0x0_23EF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_23F00000
spawn_module(...) completed.
Creating page table caps...
Page table caps are done.
load_init_image
Allocated physical - start: 0x0_23F00000; size: 0x00120000; requested: 0x00120000; end: 0x0_24020000
Allocated physical - start: 0x0_24020000; size: 0x00030000; requested: 0x00030000; end: 0x0_24050000
Allocated physical - start: 0x0_24050000; size: 0x00010000; requested: 0x00010000; end: 0x0_24060000
Allocated physical - start: 0x0_24060000; size: 0x00120000; requested: 0x00120000; end: 0x0_24180000
init image load is done
done
Allocated physical - start: 0x0_24180000; size: 0x00100000; requested: 0x00100000; end: 0x0_24280000
dispatch it baby!
resume(pc=0x01000020, sp=0x80000000, tp=0x00070000, r0=0x00000000)
argc value: 4
monitor: invoked as: monitor 0 chanid=0 archid=0
monitor.0: WARNING: bench_arch_init() have not been implemented!

set core id:1 
starting appcore
boot_arch_app_core argc value: 4
monitor: invoked as: monitor 0 chanid=0 archid=0
aa core id of the core that booted: 0 
outchan_id 0
aa intermon udn init2 on core: 1 src_core_id: 0 out_chan_id:0
aaa udn_endpoint_init 
monitor.1: create new incoming channel id : 0

 udn channel init, dest_core_id: 0, out_chan_id: 0 dest_asid: 2 
aa test (core 1 ) to print binding pointer: 1145934776 

 intermon_init coreid: 0
udn_intermon_init aa on core:1
inter.c arch_intermon_init my_core_id:1

 aa debugpointer0 on core: 1 
 core:1
aaa request_mem_serv_iref on core: 1
monitor.1: udn TX intermon.mem_serv_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.mem_serv_iref_request

reques mem_serv_iref: 1
request core id 0 
request binding: 1145905792 
monitor.0: udn TX intermon.mem_serv_iref_reply

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.mem_serv_iref_reply

aatest iref: 1 and mem_serv_iref: 0
reply core id 1 
reply binding: 1145934776 

core (1) receiving udn message from chan 0... 

 aa debugpointer1
monitor.1: udn TX intermon.name_serv_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.name_serv_iref_request

monitor.0: udn TX intermon.name_serv_iref_reply

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.name_serv_iref_reply


core (1) receiving udn message from chan 0... 

 aa debugpointer2
monitor.1: udn TX intermon.ramfs_serv_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.ramfs_serv_iref_request

monitor.0: udn TX intermon.ramfs_serv_iref_reply

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.ramfs_serv_iref_reply


core (1) receiving udn message from chan 0... 
monitor.1: udn TX intermon.monitor_mem_iref_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.monitor_mem_iref_request

monitor.0: udn TX intermon.monitor_mem_iref_reply

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.monitor_mem_iref_reply


core (1) receiving udn message from chan 0... 
aaa udn_endpoint_init 
monitor.1: create new incoming channel id : 1
monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
server received channel id 1 and destination core id 1 from the client
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 1

 udn channel init, dest_core_id: 1, out_chan_id: 1 dest_asid: 1 
monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,1)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,1)


core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
client received channel id 1 and destination core id 0 from the server

core (1) receiving udn message from chan 0... 
monitor.1: udn TX intermon.spawnd_image_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.spawnd_image_request

monitor.0: udn TX intermon.spawnd_image_reply

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.spawnd_image_reply


core (1) receiving udn message from chan 0... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
Spawning spawnd on core 1
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
monitor.1: udn TX monitor_mem.alloc_call

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,1)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 1... 

core (1) receiving udn message from chan 1... 
monitor.1: udn RX monitor_mem.alloc_response


core (1) receiving udn message from chan 1... 
ERROR: monitor.1 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.1 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

monitor.1: udn TX intermon.monitor_initialized

monitor.1: sending udn message to core(0,0)
aaa core:1 booted app core
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
resume(pc=0x01000000, sp=0x02043518, tp=0x02040000, r0=0x00000000)
monitor.0: udn RX intermon.monitor_initialized

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX monitor.boot_core_reply

spawnd.0: lmp RX monitor.boot_core_reply


 test1 case 1 max core id:255 
aaa boot_core_request coreid: 2
spawnd.0: lmp TX monitor.boot_core_request


spawnd.1: lmp TX monitor.get_monitor_rpc_iref_request

core (0) receiving udn message from chan 0... 
monitor.1: lmp RX monitor.get_monitor_rpc_iref_request

monitor.1: lmp TX monitor.get_monitor_rpc_iref_reply

monitor.0: lmp RX monitor.boot_core_request

spawnd.1: lmp RX monitor.get_monitor_rpc_iref_reply

Monitor 0: booting tilepro core 2 as '/tilepro/sbin/cpu loglevel=4'
spawnd.1: lmp TX monitor.bind_lmp_client_request


 aa my_core_id: 0 coreid:2 asid:2
monitor.1: lmp RX monitor.bind_lmp_client_request

aa intermon udn init on core: 0
aaa udn_endpoint_init 
monitor.1: lmp TX monitor.bind_lmp_reply_client

monitor.0: lmp TX mem.allocate_call

spawnd.1: lmp RX monitor.bind_lmp_reply_client

mem_serv.0: lmp RX mem.allocate_call

spawnd.1: lmp TX monitor.get_mem_iref_request

monitor.1: lmp RX monitor.get_mem_iref_request

monitor.1: lmp TX monitor.get_mem_iref_reply

spawnd.1: lmp RX monitor.get_mem_iref_reply

spawnd.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

spawnd.1: lmp RX monitor.bind_lmp_reply_client

mem_serv.0: lmp TX mem.allocate_response

spawnd.1: lmp TX monitor.new_monitor_binding_request

monitor.0: lmp RX mem.allocate_response

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

spawnd.1: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.1: create new incoming channel id : 0
spawnd.1: lmp TX monitor.bind_udn_client_request

monitor.1: lmp RX monitor.bind_udn_client_request
monitor.0: create new incoming channel id : 2


monitor.1: udn TX intermon.bind_udn_request

 udn channel init, dest_core_id: 2, out_chan_id: 0 dest_asid: 1 
monitor.1: sending udn message to core(0,0)
Core 2 received startup: 626F6F74
forloop i:0 cpu_id:2 chanid::0
aa core: 0 setup new binding id: 2
forloop i:1 cpu_id:2 chanid::0
forloop i:2 cpu_id:2 chanid::2

forloop i:3 cpu_id:2 chanid::0
 intermon_init coreid: 2
cpu_id:2 chanid::2
Allocated physical - start: 0x0_27000000; size: 0x00800000; requested: 0x00800000; end: 0x0_27800000
udn_intermon_init aa on core:0
inter.c arch_intermon_init my_core_id:0
aa test debugpoint boot.c
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

mem_serv.0: lmp RX monitor.bind_udn_service_request

server received channel id 0 and destination core id 1 from the client
aaa udn_endpoint_init 
mem_serv.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 0 dest_asid: 2 
mem_serv.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,1)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,1)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

spawnd.1: lmp RX monitor.bind_udn_reply_client

client received channel id 0 and destination core id 0 from the server
spawnd.1: lmp TX monitor.get_name_iref_request


core (1) receiving udn message from chan 0... 
monitor.1: lmp RX monitor.get_name_iref_request

monitor.1: lmp TX monitor.get_name_iref_reply

spawnd.1: lmp RX monitor.get_name_iref_reply

spawnd.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

spawnd.1: lmp RX monitor.bind_lmp_reply_client

spawnd.1: lmp TX monitor.new_monitor_binding_request

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

spawnd.1: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.1: create new incoming channel id : 1
spawnd.1: lmp TX monitor.bind_udn_client_request

monitor.1: lmp RX monitor.bind_udn_client_request

monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

skb.0: lmp RX monitor.bind_udn_service_request

server received channel id 1 and destination core id 1 from the client
aaa udn_endpoint_init 
skb.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 1 dest_asid: 2 
skb.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,1)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,1)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

spawnd.1: lmp RX monitor.bind_udn_reply_client

client received channel id 0 and destination core id 0 from the server
spawnd.1: udn TX octopus.get_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(0,1)
skb.0: sending udn message to core(0,1)udn backend received message chan_id : 1



core (1) receiving udn message from chan 1... 
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.1: udn RX octopus.get_response


core (1) receiving udn message from chan 1... 
spawnd.1: lmp TX monitor.alloc_iref_request

monitor.1: lmp RX monitor.alloc_iref_request

monitor.1: lmp TX monitor.alloc_iref_reply

spawnd.1: lmp RX monitor.alloc_iref_reply

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,1)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,1)
monitor.0: sending udn message to core(0,1)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

monitor.1: udn RX intermon.cap_send_request

core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,1)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,1)
monitor.0: sending udn message to core(0,1)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

monitor.1: udn RX intermon.cap_send_request

core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 
core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,1)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,1)
monitor.0: sending udn message to core(0,1)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

monitor.1: udn RX intermon.cap_send_request
core (0) receiving udn message from chan 0... 

monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)

udn backend received message chan_id : 0
core (1) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,1)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,1)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,1)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

spawnd.1: lmp RX monitor.cap_receive_request

spawnd.1: udn RX mem.allocate_response

spawnd.1: lmp TX monitor.get_ramfs_iref_request


core (1) receiving udn message from chan 0... 
monitor.1: lmp RX monitor.get_ramfs_iref_request

monitor.1: lmp TX monitor.get_ramfs_iref_reply

spawnd.1: lmp RX monitor.get_ramfs_iref_reply

spawnd.1: lmp TX monitor.bind_lmp_client_request

monitor.1: lmp RX monitor.bind_lmp_client_request

monitor.1: lmp TX monitor.bind_lmp_reply_client

spawnd.1: lmp RX monitor.bind_lmp_reply_client

spawnd.1: lmp TX monitor.new_monitor_binding_request

monitor.1: lmp RX monitor.new_monitor_binding_request

monitor.1: lmp TX monitor.new_monitor_binding_reply

spawnd.1: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.1: create new incoming channel id : 2
spawnd.1: lmp TX monitor.bind_udn_client_request

monitor.1: lmp RX monitor.bind_udn_client_request

monitor.1: udn TX intermon.bind_udn_request

monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 1 
monitor.0: lmp TX monitor.bind_udn_service_request

ramfsd.0: lmp RX monitor.bind_udn_service_request

server received channel id 2 and destination core id 1 from the client
aaa udn_endpoint_init 
ramfsd.0: create new incoming channel id : 0

 udn channel init, dest_core_id: 1, out_chan_id: 2 dest_asid: 2 
ramfsd.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 0... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,1)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,1)

core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:1 server_core_id:0
monitor.1: lmp TX monitor.bind_udn_reply_client

spawnd.1: lmp RX monitor.bind_udn_reply_client

client received channel id 0 and destination core id 0 from the server
spawnd.1: udn TX trivfs.getroot_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.getroot_call

ramfsd.0: udn TX trivfs.getroot_response

ramfsd.0: sending udn message to core(0,1)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.getroot_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX mem.allocate_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,1)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,1)
monitor.0: sending udn message to core(0,1)udn backend received message chan_id : 0


core (1) receiving udn message from chan 0... 

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.1: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 0... 
monitor.1: lmp TX monitor.cap_receive_request

Virtual address of page tables for init : 0x90000000
spawnd.1: lmp RX monitor.cap_receive_request
Calling spawn_module(...)...

spawn module: monitor
spawnd.1: udn RX mem.allocate_response
Allocated physical - start: 0x0_27800000; size: 0x00010000; requested: 0x00010000; end: 0x0_27810000

Allocated physical - start: 0x0_27810000; size: 0x00010000; requested: 0x00010000; end: 0x0_27820000
spawnd.1: udn TX trivfs.bulk_init_call

spawnd.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
Allocated physical - start: 0x0_27820000; size: 0x00010000; requested: 0x00010000; end: 0x0_27830000
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2
Allocated physical - start: 0x0_27830000; size: 0x00010000; requested: 0x00010000; end: 0x0_27840000

core (1) receiving udn message from chan 2... 
spawnd.1: lmp TX monitor.cap_send_request

monitor.1: lmp RX monitor.cap_send_request
Allocated physical - start: 0x0_27840000; size: 0x00010000; requested: 0x00010000; end: 0x0_27850000

monitor.1: udn TX intermon.cap_send_request

monitor.1: sending udn message to core(0,0)
Allocated physical - start: 0x0_27850000; size: 0x00010000; requested: 0x00010000; end: 0x0_27860000
monitor.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

udn backend received message chan_id : 0
core (1) receiving udn message from chan 2... 
Allocated physical - start: 0x0_27860000; size: 0x00010000; requested: 0x00010000; end: 0x0_27870000

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.cap_send_request
Allocated physical - start: 0x0_27870000; size: 0x00010000; requested: 0x00010000; end: 0x0_27880000

monitor.0: lmp TX monitor.cap_receive_request

ramfsd.0: lmp RX monitor.cap_receive_request
Allocated physical - start: 0x0_27880000; size: 0x00010000; requested: 0x00010000; end: 0x0_27890000

ramfsd.0: udn RX trivfs.bulk_init_call

ramfsd.0: udn TX trivfs.bulk_init_response

ramfsd.0: sending udn message to core(0,1)
Allocated physical - start: 0x0_27890000; size: 0x00040000; requested: 0x00040000; end: 0x0_278D0000
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.bulk_init_response


core (1) receiving udn message from chan 2... 

spawnd.1: spawnd invoked on core 1 as:
core (0) receiving udn message from chan 0... 
 spawnd
spawnd.1: udn TX trivfs.lookup_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
Allocated physical - start: 0x0_278D0000; size: 0x00010000; requested: 0x00000800; end: 0x0_278E0000

core (0) receiving udn message from chan 0... 
Allocated physical - start: 0x0_278E0000; size: 0x00200000; requested: 0x00200000; end: 0x0_27AE0000
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(0,1)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.lookup_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.getattr_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.getattr_call

ramfsd.0: udn TX trivfs.getattr_response

ramfsd.0: sending udn message to core(0,1)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 0... 

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.getattr_response


core (1) receiving udn message from chan 2... 
spawnd.1: udn TX trivfs.read_bulk_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,1)

core (0) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (1) receiving udn message from chan 2... 
spawnd.1: udn RX trivfs.read_bulk_response


core (1) receiving udn message from chan 2... 
spawnd.1: gbootmodules is:
/tilepro/sbin/cpu loglevel=4
/tilepro/sbin/init
/tilepro/sbin/mem_serv
/tilepro/sbin/monitor
/tilepro/sbin/ramfsd boot
/tilepro/sbin/skb boot
/tilepro/sbin/spawnd boot boottilepro=1-3
/tilepro/sbin/startd boot
/tilepro/sbin/hell
spawnd.1: lmp TX monitor.alloc_iref_request

monitor.1: lmp RX monitor.alloc_iref_request

monitor.1: lmp TX monitor.alloc_iref_reply

spawnd.1: lmp RX monitor.alloc_iref_reply

spawnd.1: udn TX octopus.set_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.1 { iref: 259 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: udn TX octopus.set_response

skb.0: sending udn message to core(0,1)
skb.0: sending udn message to core(0,1)udn backend received message chan_id : 1



core (1) receiving udn message from chan 1... 

core (0) receiving udn message from chan 0... 
core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.1: udn RX octopus.set_response


core (1) receiving udn message from chan 1... 
spawnd.1: udn TX octopus.set_call

spawnd.1: sending udn message to core(0,0)
spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.1.ready { iref: 0 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1

skb.0: udn TX octopus.set_response

skb.0: sending udn message to core(0,1)
skb.0: sending udn message to core(0,1)udn backend received message chan_id : 1



core (1) receiving udn message from chan 1... 

core (0) receiving udn message from chan 0... 
core (1) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.1: udn RX octopus.set_response


core (1) receiving udn message from chan 1... 
spawnd.1: udn TX octopus.wait_for_call

spawnd.1: sending udn message to core(0,0)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
skb.0: udn RX octopus.wait_for_call

skb.0: octopus_service: get record all_spawnds_up

Allocated physical - start: 0x0_27AE0000; size: 0x00020000; requested: 0x00020000; end: 0x0_27B00000
skb.0: waiting for: all_spawnds_up

skb.0: octopus_service: set_watch all_spawnds_up


core (0) receiving udn message from chan 0... 
Allocated physical - start: 0x0_27B00000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B10000
Allocated physical - start: 0x0_27B10000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B20000
Allocated physical - start: 0x0_27B20000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B30000
Allocated physical - start: 0x0_27B30000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B40000
Allocated physical - start: 0x0_27B40000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B50000
Allocated physical - start: 0x0_27B50000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B60000
Allocated physical - start: 0x0_27B60000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B70000
Allocated physical - start: 0x0_27B70000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B80000
Allocated physical - start: 0x0_27B80000; size: 0x00010000; requested: 0x00010000; end: 0x0_27B90000
Allocated physical - start: 0x0_27B90000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BA0000
Allocated physical - start: 0x0_27BA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BB0000
Allocated physical - start: 0x0_27BB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BC0000
Allocated physical - start: 0x0_27BC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BD0000
Allocated physical - start: 0x0_27BD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BE0000
Allocated physical - start: 0x0_27BE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27BF0000
Allocated physical - start: 0x0_27BF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C00000
Allocated physical - start: 0x0_27C00000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C10000
Allocated physical - start: 0x0_27C10000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C20000
Allocated physical - start: 0x0_27C20000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C30000
Allocated physical - start: 0x0_27C30000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C40000
Allocated physical - start: 0x0_27C40000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C50000
Allocated physical - start: 0x0_27C50000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C60000
Allocated physical - start: 0x0_27C60000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C70000
Allocated physical - start: 0x0_27C70000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C80000
Allocated physical - start: 0x0_27C80000; size: 0x00010000; requested: 0x00010000; end: 0x0_27C90000
Allocated physical - start: 0x0_27C90000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CA0000
Allocated physical - start: 0x0_27CA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CB0000
Allocated physical - start: 0x0_27CB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CC0000
Allocated physical - start: 0x0_27CC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CD0000
Allocated physical - start: 0x0_27CD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CE0000
Allocated physical - start: 0x0_27CE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27CF0000
Allocated physical - start: 0x0_27CF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D00000
Allocated physical - start: 0x0_27D00000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D10000
Allocated physical - start: 0x0_27D10000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D20000
Allocated physical - start: 0x0_27D20000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D30000
Allocated physical - start: 0x0_27D30000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D40000
Allocated physical - start: 0x0_27D40000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D50000
Allocated physical - start: 0x0_27D50000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D60000
Allocated physical - start: 0x0_27D60000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D70000
Allocated physical - start: 0x0_27D70000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D80000
Allocated physical - start: 0x0_27D80000; size: 0x00010000; requested: 0x00010000; end: 0x0_27D90000
Allocated physical - start: 0x0_27D90000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DA0000
Allocated physical - start: 0x0_27DA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DB0000
Allocated physical - start: 0x0_27DB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DC0000
Allocated physical - start: 0x0_27DC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DD0000
Allocated physical - start: 0x0_27DD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DE0000
Allocated physical - start: 0x0_27DE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27DF0000
Allocated physical - start: 0x0_27DF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E00000
Allocated physical - start: 0x0_27E00000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E10000
Allocated physical - start: 0x0_27E10000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E20000
Allocated physical - start: 0x0_27E20000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E30000
Allocated physical - start: 0x0_27E30000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E40000
Allocated physical - start: 0x0_27E40000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E50000
Allocated physical - start: 0x0_27E50000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E60000
Allocated physical - start: 0x0_27E60000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E70000
Allocated physical - start: 0x0_27E70000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E80000
Allocated physical - start: 0x0_27E80000; size: 0x00010000; requested: 0x00010000; end: 0x0_27E90000
Allocated physical - start: 0x0_27E90000; size: 0x00010000; requested: 0x00010000; end: 0x0_27EA0000
Allocated physical - start: 0x0_27EA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27EB0000
Allocated physical - start: 0x0_27EB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27EC0000
Allocated physical - start: 0x0_27EC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27ED0000
Allocated physical - start: 0x0_27ED0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27EE0000
Allocated physical - start: 0x0_27EE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27EF0000
Allocated physical - start: 0x0_27EF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_27F00000
spawn_module(...) completed.
Creating page table caps...
Page table caps are done.
load_init_image
Allocated physical - start: 0x0_27F00000; size: 0x00120000; requested: 0x00120000; end: 0x0_28020000
Allocated physical - start: 0x0_28020000; size: 0x00030000; requested: 0x00030000; end: 0x0_28050000
Allocated physical - start: 0x0_28050000; size: 0x00010000; requested: 0x00010000; end: 0x0_28060000
Allocated physical - start: 0x0_28060000; size: 0x00120000; requested: 0x00120000; end: 0x0_28180000
init image load is done
done
Allocated physical - start: 0x0_28180000; size: 0x00100000; requested: 0x00100000; end: 0x0_28280000
dispatch it baby!
resume(pc=0x01000020, sp=0x80000000, tp=0x00070000, r0=0x00000000)
argc value: 4
monitor: invoked as: monitor 0 chanid=2 archid=0
monitor.0: WARNING: bench_arch_init() have not been implemented!

set core id:2 
starting appcore
boot_arch_app_core argc value: 4
monitor: invoked as: monitor 0 chanid=2 archid=0
aa core id of the core that booted: 0 
outchan_id 2
aa intermon udn init2 on core: 2 src_core_id: 0 out_chan_id:2
aaa udn_endpoint_init 
monitor.2: create new incoming channel id : 0

 udn channel init, dest_core_id: 0, out_chan_id: 2 dest_asid: 2 
aa test (core 2 ) to print binding pointer: 1145934776 

 intermon_init coreid: 0
udn_intermon_init aa on core:2
inter.c arch_intermon_init my_core_id:2

 aa debugpointer0 on core: 2 
 core:2
aaa request_mem_serv_iref on core: 2
monitor.2: udn TX intermon.mem_serv_iref_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.mem_serv_iref_request

reques mem_serv_iref: 1
request core id 0 
request binding: 1145898736 
monitor.0: udn TX intermon.mem_serv_iref_reply

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.mem_serv_iref_reply

aatest iref: 1 and mem_serv_iref: 0
reply core id 2 
reply binding: 1145934776 

core (2) receiving udn message from chan 0... 

 aa debugpointer1
monitor.2: udn TX intermon.name_serv_iref_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.name_serv_iref_request

monitor.0: udn TX intermon.name_serv_iref_reply

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.name_serv_iref_reply


core (2) receiving udn message from chan 0... 

 aa debugpointer2
monitor.2: udn TX intermon.ramfs_serv_iref_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.ramfs_serv_iref_request

monitor.0: udn TX intermon.ramfs_serv_iref_reply

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.ramfs_serv_iref_reply


core (2) receiving udn message from chan 0... 
monitor.2: udn TX intermon.monitor_mem_iref_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.monitor_mem_iref_request

monitor.0: udn TX intermon.monitor_mem_iref_reply

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.monitor_mem_iref_reply


core (2) receiving udn message from chan 0... 
aaa udn_endpoint_init 
monitor.2: create new incoming channel id : 1
monitor.2: udn TX intermon.bind_udn_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 2 
server received channel id 1 and destination core id 2 from the client
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 3

 udn channel init, dest_core_id: 2, out_chan_id: 1 dest_asid: 1 
monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,2)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,2)


core (2) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:2 server_core_id:0
client received channel id 3 and destination core id 0 from the server

core (2) receiving udn message from chan 0... 
monitor.2: udn TX intermon.spawnd_image_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.spawnd_image_request

monitor.0: udn TX intermon.spawnd_image_reply

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.spawnd_image_reply


core (2) receiving udn message from chan 0... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
Spawning spawnd on core 2
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
monitor.2: udn TX monitor_mem.alloc_call

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 3... 

core (2) receiving udn message from chan 1... 
monitor.2: udn RX monitor_mem.alloc_response


core (2) receiving udn message from chan 1... 
ERROR: monitor.2 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.2 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

monitor.2: udn TX intermon.monitor_initialized

monitor.2: sending udn message to core(0,0)
aaa core:2 booted app core
udn backend received message chan_id : 2
resume(pc=0x01000000, sp=0x02043518, tp=0x02040000, r0=0x00000000)

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.monitor_initialized

while(1) id:2
monitor.0: udn TX intermon.new_monitor_notify

monitor.0: sending udn message to core(0,1)
break my_core_id:0 id=2 i=1
udn backend received message chan_id : 0

core (1) receiving udn message from chan 0... 
monitor.1: udn RX intermon.new_monitor_notify
monitor.0: lmp TX monitor.boot_core_reply


inter.c new_monitor_notify my_core_id:1 function got core_id:2
monitor.1: udn TX monitor_mem.alloc_call

spawnd.0: lmp RX monitor.boot_core_reply
monitor.1: sending udn message to core(0,0)


 test1 case 1 max core id:255 
aaa boot_core_request coreid: 3
spawnd.0: lmp TX monitor.boot_core_request


core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 1
monitor.0: lmp RX monitor.boot_core_request

Monitor 0: booting tilepro core 3 as '/tilepro/sbin/cpu loglevel=4'

 aa my_core_id: 0 coreid:3 asid:2
aa intermon udn init on core: 0
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 4

 udn channel init, dest_core_id: 3, out_chan_id: 0 dest_asid: 1 
spawnd.2: lmp TX monitor.get_monitor_rpc_iref_request

Core 3 received startup: 626F6F74
forloop i:0 cpu_id:3 chanid::0
monitor.2: lmp RX monitor.get_monitor_rpc_iref_request
forloop i:1 cpu_id:3 chanid::0

forloop i:2 cpu_id:3 chanid::2
monitor.2: lmp TX monitor.get_monitor_rpc_iref_reply
forloop i:3 cpu_id:3 chanid::4

aa core: 0 setup new binding id: 3
cpu_id:3 chanid::4
spawnd.2: lmp RX monitor.get_monitor_rpc_iref_reply
Allocated physical - start: 0x0_2B000000; size: 0x00800000; requested: 0x00800000; end: 0x0_2B800000


 intermon_init coreid: 3
udn_intermon_init aa on core:0
spawnd.2: lmp TX monitor.bind_lmp_client_request

inter.c arch_intermon_init my_core_id:0
aa test debugpoint boot.c
monitor.2: lmp RX monitor.bind_lmp_client_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.bind_lmp_reply_client

monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call
spawnd.2: lmp RX monitor.bind_lmp_reply_client


mem_serv.0: lmp RX mem.allocate_call

spawnd.2: lmp TX monitor.get_mem_iref_request

monitor.2: lmp RX monitor.get_mem_iref_request

monitor.2: lmp TX monitor.get_mem_iref_reply

mem_serv.0: lmp TX mem.allocate_response
spawnd.2: lmp RX monitor.get_mem_iref_reply


spawnd.2: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX mem.allocate_response

monitor.2: lmp RX monitor.bind_lmp_client_request
monitor.0: udn TX monitor_mem.alloc_response


monitor.2: lmp TX monitor.bind_lmp_reply_client
monitor.0: sending udn message to core(0,1)


udn backend received message chan_id : 1
spawnd.2: lmp RX monitor.bind_lmp_reply_client


core (0) receiving udn message from chan 1... 
core (1) receiving udn message from chan 1... 
spawnd.2: lmp TX monitor.new_monitor_binding_request
monitor.1: udn RX monitor_mem.alloc_response



core (1) receiving udn message from chan 1... 
monitor.2: lmp RX monitor.new_monitor_binding_request

monitor.2: lmp TX monitor.new_monitor_binding_reply

spawnd.2: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.2: create new incoming channel id : 0
spawnd.2: lmp TX monitor.bind_udn_client_request

bindcores1 core_id:2 my_core_id:1 out_chan_id:2
monitor.2: lmp RX monitor.bind_udn_client_request
aaa udn_endpoint_init 

monitor.1: create new incoming channel id : 2monitor.2: udn TX intermon.bind_udn_request



monitor.2: sending udn message to core(0,0) udn channel init, dest_core_id: 1, out_chan_id: 2 dest_asid: 2 


 intermon_init coreid: 2
udn backend received message chan_id : 2
udn_intermon_init aa on core:1
inter.c arch_intermon_init my_core_id:1
monitor.1: udn TX intermon.bind_monitor_proxy

monitor.1: sending udn message to core(0,0)

core (1) receiving udn message from chan 0... 
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_monitor_proxy


inter.c bind_monitor_proxy my_core_id:0
monitor.0: udn TX intermon.bind_monitor_request

monitor.0: sending udn message to core(0,2)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 0... 


core (2) receiving udn message from chan 0... 
core (0) receiving udn message from chan 2... 
monitor.2: udn RX intermon.bind_monitor_request

monitor.0: udn RX intermon.bind_udn_request


inter.c bind_monitor_request my_core_id:2 core_id:1
aaa udn_support get core id: 2 
monitor.0: lmp TX monitor.bind_udn_service_request
bindcores2 core_id:1 my_core_id:2 out_chan_id:2

aaa udn_endpoint_init 
monitor.2: create new incoming channel id : 2
mem_serv.0: lmp RX monitor.bind_udn_service_request


 udn channel init, dest_core_id: 1, out_chan_id: 2 dest_asid: 2 

server received channel id 0 and destination core id 2 from the client
 intermon_init coreid: 1
aaa udn_endpoint_init 
udn_intermon_init aa on core:2
inter.c arch_intermon_init my_core_id:2
mem_serv.0: create new incoming channel id : 1monitor.2: udn TX intermon.bind_monitor_reply



monitor.2: sending udn message to core(0,0)
 udn channel init, dest_core_id: 2, out_chan_id: 0 dest_asid: 2 

core (2) receiving udn message from chan 0... 
mem_serv.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2
monitor.0: udn RX intermon.bind_monitor_reply


inter.c bind_monitor_reply my_core_id:0

core (0) receiving udn message from chan 2... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,2)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,2)

core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:2 server_core_id:0
monitor.2: lmp TX monitor.bind_udn_reply_client

spawnd.2: lmp RX monitor.bind_udn_reply_client

client received channel id 1 and destination core id 0 from the server
spawnd.2: lmp TX monitor.get_name_iref_request


core (2) receiving udn message from chan 0... 
monitor.2: lmp RX monitor.get_name_iref_request

monitor.2: lmp TX monitor.get_name_iref_reply

spawnd.2: lmp RX monitor.get_name_iref_reply

spawnd.2: lmp TX monitor.bind_lmp_client_request

monitor.2: lmp RX monitor.bind_lmp_client_request

monitor.2: lmp TX monitor.bind_lmp_reply_client

spawnd.2: lmp RX monitor.bind_lmp_reply_client

spawnd.2: lmp TX monitor.new_monitor_binding_request

monitor.2: lmp RX monitor.new_monitor_binding_request

monitor.2: lmp TX monitor.new_monitor_binding_reply

spawnd.2: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.2: create new incoming channel id : 1
spawnd.2: lmp TX monitor.bind_udn_client_request

monitor.2: lmp RX monitor.bind_udn_client_request

monitor.2: udn TX intermon.bind_udn_request

monitor.2: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 2 
monitor.0: lmp TX monitor.bind_udn_service_request

skb.0: lmp RX monitor.bind_udn_service_request

server received channel id 1 and destination core id 2 from the client
aaa udn_endpoint_init 
skb.0: create new incoming channel id : 1

 udn channel init, dest_core_id: 2, out_chan_id: 1 dest_asid: 2 
skb.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 2... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,2)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,2)

core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:2 server_core_id:0
monitor.2: lmp TX monitor.bind_udn_reply_client

spawnd.2: lmp RX monitor.bind_udn_reply_client

client received channel id 1 and destination core id 0 from the server
spawnd.2: udn TX octopus.get_call

spawnd.2: sending udn message to core(0,0)
spawnd.2: sending udn message to core(0,0)

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 

core (0) receiving udn message from chan 1... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(0,2)
skb.0: sending udn message to core(0,2)udn backend received message chan_id : 1



core (2) receiving udn message from chan 1... 
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.2: udn RX octopus.get_response


core (2) receiving udn message from chan 1... 
spawnd.2: lmp TX monitor.alloc_iref_request

monitor.2: lmp RX monitor.alloc_iref_request

monitor.2: lmp TX monitor.alloc_iref_reply

spawnd.2: lmp RX monitor.alloc_iref_reply

spawnd.2: udn TX mem.allocate_call

spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,2)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,2)
monitor.0: sending udn message to core(0,2)udn backend received message chan_id : 0


core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.cap_receive_request

spawnd.2: lmp RX monitor.cap_receive_request

spawnd.2: udn RX mem.allocate_response

spawnd.2: udn TX mem.allocate_call

spawnd.2: sending udn message to core(0,0)

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,2)

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 0

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,2)
monitor.0: sending udn message to core(0,2)udn backend received message chan_id : 0


core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.cap_receive_request

spawnd.2: lmp RX monitor.cap_receive_request

spawnd.2: udn RX mem.allocate_response

spawnd.2: udn TX mem.allocate_call

spawnd.2: sending udn message to core(0,0)

udn backend received message chan_id : 1
core (2) receiving udn message from chan 0... 

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,2)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,2)
monitor.0: sending udn message to core(0,2)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
monitor.2: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.cap_receive_request

spawnd.2: lmp RX monitor.cap_receive_request

spawnd.2: udn RX mem.allocate_response

spawnd.2: udn TX mem.allocate_call

spawnd.2: sending udn message to core(0,0)

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,2)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,2)
monitor.0: sending udn message to core(0,2)udn backend received message chan_id : 0


core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.cap_receive_request

spawnd.2: lmp RX monitor.cap_receive_request

spawnd.2: udn RX mem.allocate_response

spawnd.2: lmp TX monitor.get_ramfs_iref_request


core (2) receiving udn message from chan 0... 
monitor.2: lmp RX monitor.get_ramfs_iref_request

monitor.2: lmp TX monitor.get_ramfs_iref_reply

spawnd.2: lmp RX monitor.get_ramfs_iref_reply

spawnd.2: lmp TX monitor.bind_lmp_client_request

monitor.2: lmp RX monitor.bind_lmp_client_request

monitor.2: lmp TX monitor.bind_lmp_reply_client

spawnd.2: lmp RX monitor.bind_lmp_reply_client

spawnd.2: lmp TX monitor.new_monitor_binding_request

monitor.2: lmp RX monitor.new_monitor_binding_request

monitor.2: lmp TX monitor.new_monitor_binding_reply

spawnd.2: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.2: create new incoming channel id : 2
Virtual address of page tables for init : 0x90000000
spawnd.2: lmp TX monitor.bind_udn_client_request
Calling spawn_module(...)...

spawn module: monitor
Allocated physical - start: 0x0_2B800000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B810000
monitor.2: lmp RX monitor.bind_udn_client_request

monitor.2: udn TX intermon.bind_udn_request

monitor.2: sending udn message to core(0,0)
Allocated physical - start: 0x0_2B810000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B820000
udn backend received message chan_id : 2

Allocated physical - start: 0x0_2B820000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B830000
core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 2 
monitor.0: lmp TX monitor.bind_udn_service_request
Allocated physical - start: 0x0_2B830000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B840000

ramfsd.0: lmp RX monitor.bind_udn_service_request

server received channel id 2 and destination core id 2 from the client
Allocated physical - start: 0x0_2B840000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B850000
aaa udn_endpoint_init 
ramfsd.0: create new incoming channel id : 1

 udn channel init, dest_core_id: 2, out_chan_id: 2 dest_asid: 2 
ramfsd.0: lmp TX monitor.bind_udn_reply_monitor
Allocated physical - start: 0x0_2B850000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B860000


core (0) receiving udn message from chan 2... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply
Allocated physical - start: 0x0_2B860000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B870000

monitor.0: sending udn message to core(0,2)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,2)

core (2) receiving udn message from chan 0... 
Allocated physical - start: 0x0_2B870000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B880000

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:2 server_core_id:0
Allocated physical - start: 0x0_2B880000; size: 0x00010000; requested: 0x00010000; end: 0x0_2B890000
monitor.2: lmp TX monitor.bind_udn_reply_client

spawnd.2: lmp RX monitor.bind_udn_reply_client

client received channel id 1 and destination core id 0 from the server
Allocated physical - start: 0x0_2B890000; size: 0x00040000; requested: 0x00040000; end: 0x0_2B8D0000
spawnd.2: udn TX trivfs.getroot_call

spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1


core (2) receiving udn message from chan 0... 
core (0) receiving udn message from chan 1... 
ramfsd.0: udn RX trivfs.getroot_call

ramfsd.0: udn TX trivfs.getroot_response

ramfsd.0: sending udn message to core(0,2)

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 2

core (2) receiving udn message from chan 2... 
spawnd.2: udn RX trivfs.getroot_response


core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2B8D0000; size: 0x00010000; requested: 0x00000800; end: 0x0_2B8E0000
spawnd.2: udn TX mem.allocate_call

Allocated physical - start: 0x0_2B8E0000; size: 0x00200000; requested: 0x00200000; end: 0x0_2BAE0000
spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,2)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 1... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,2)
monitor.0: sending udn message to core(0,2)udn backend received message chan_id : 0


core (2) receiving udn message from chan 0... 

core (2) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.2: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 1... 
monitor.2: lmp TX monitor.cap_receive_request

spawnd.2: lmp RX monitor.cap_receive_request

spawnd.2: udn RX mem.allocate_response

spawnd.2: udn TX trivfs.bulk_init_call

spawnd.2: sending udn message to core(0,0)

udn backend received message chan_id : 1
core (2) receiving udn message from chan 0... 

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 2

core (2) receiving udn message from chan 2... 
spawnd.2: lmp TX monitor.cap_send_request

monitor.2: lmp RX monitor.cap_send_request

monitor.2: udn TX intermon.cap_send_request

monitor.2: sending udn message to core(0,0)
monitor.2: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (2) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
monitor.0: udn RX intermon.cap_send_request

monitor.0: lmp TX monitor.cap_receive_request

ramfsd.0: lmp RX monitor.cap_receive_request

ramfsd.0: udn RX trivfs.bulk_init_call

ramfsd.0: udn TX trivfs.bulk_init_response

ramfsd.0: sending udn message to core(0,2)
udn backend received message chan_id : 2

core (2) receiving udn message from chan 2... 
spawnd.2: udn RX trivfs.bulk_init_response



core (2) receiving udn message from chan 2... 
core (0) receiving udn message from chan 2... 
spawnd.2: spawnd invoked on core 2 as:
 spawnd
spawnd.2: udn TX trivfs.lookup_call

spawnd.2: sending udn message to core(0,0)
spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 

core (0) receiving udn message from chan 1... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(0,2)

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 2

core (2) receiving udn message from chan 2... 
spawnd.2: udn RX trivfs.lookup_response


core (2) receiving udn message from chan 2... 
spawnd.2: udn TX trivfs.getattr_call

spawnd.2: sending udn message to core(0,0)
Allocated physical - start: 0x0_2BAE0000; size: 0x00020000; requested: 0x00020000; end: 0x0_2BB00000
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
ramfsd.0: udn RX trivfs.getattr_call

ramfsd.0: udn TX trivfs.getattr_response

ramfsd.0: sending udn message to core(0,2)

core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 2

core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2BB00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB10000
spawnd.2: udn RX trivfs.getattr_response
Allocated physical - start: 0x0_2BB10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB20000


Allocated physical - start: 0x0_2BB20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB30000
core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2BB30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB40000
spawnd.2: udn TX trivfs.read_bulk_call
Allocated physical - start: 0x0_2BB40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB50000

spawnd.2: sending udn message to core(0,0)Allocated physical - start: 0x0_2BB50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB60000

Allocated physical - start: 0x0_2BB60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB70000
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BB70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB80000

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BB80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BB90000
ramfsd.0: udn RX trivfs.read_bulk_call
Allocated physical - start: 0x0_2BB90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBA0000

ramfsd.0: udn TX trivfs.read_bulk_response
Allocated physical - start: 0x0_2BBA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBB0000

ramfsd.0: sending udn message to core(0,2)Allocated physical - start: 0x0_2BBB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBC0000


udn backend received message chan_id : 2
Allocated physical - start: 0x0_2BBC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBD0000

core (0) receiving udn message from chan 1... 
core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2BBD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBE0000
spawnd.2: udn RX trivfs.read_bulk_response

Allocated physical - start: 0x0_2BBE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BBF0000

core (2) receiving udn message from chan 2... 
Allocated physical - start: 0x0_2BBF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC00000
spawnd.2: gbootmodules is:
/tilepro/sbin/cpu loglevel=4
/tilepro/sbin/init
/tilepro/sbin/mem_serv
/tilepro/sbin/monitor
/tilepro/sbin/ramfsd boot
/tilepro/sbin/skb boot
/tilepro/sbin/spawnd boot boottilepro=1-3
/tilepro/sbin/startd boot
/tilepro/sbin/hellAllocated physical - start: 0x0_2BC00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC10000

Allocated physical - start: 0x0_2BC10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC20000
spawnd.2: lmp TX monitor.alloc_iref_request
Allocated physical - start: 0x0_2BC20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC30000

Allocated physical - start: 0x0_2BC30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC40000
monitor.2: lmp RX monitor.alloc_iref_request
Allocated physical - start: 0x0_2BC40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC50000

monitor.2: lmp TX monitor.alloc_iref_reply
Allocated physical - start: 0x0_2BC50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC60000

Allocated physical - start: 0x0_2BC60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC70000
spawnd.2: lmp RX monitor.alloc_iref_reply
Allocated physical - start: 0x0_2BC70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC80000

Allocated physical - start: 0x0_2BC80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BC90000
spawnd.2: udn TX octopus.set_call

Allocated physical - start: 0x0_2BC90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCA0000
spawnd.2: sending udn message to core(0,0)
Allocated physical - start: 0x0_2BCA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCB0000
spawnd.2: sending udn message to core(0,0)Allocated physical - start: 0x0_2BCB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCC0000

Allocated physical - start: 0x0_2BCC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCD0000
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BCD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCE0000
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BCE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BCF0000

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BCF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD00000

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BD00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD10000
skb.0: udn RX octopus.set_call
Allocated physical - start: 0x0_2BD10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD20000

skb.0: octopus_service:  set_handler: spawn.2 { iref: 515 }
Allocated physical - start: 0x0_2BD20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD30000

Allocated physical - start: 0x0_2BD30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD40000
skb.0: octopus_service: found record: all_spawnds_up
Allocated physical - start: 0x0_2BD40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD50000

skb.0: octopus_service: found record: spawn.1
Allocated physical - start: 0x0_2BD50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD60000

skb.0: octopus_service: found record: spawn.1.ready
Allocated physical - start: 0x0_2BD60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD70000

Allocated physical - start: 0x0_2BD70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD80000
skb.0: udn TX octopus.set_response
Allocated physical - start: 0x0_2BD80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BD90000

skb.0: sending udn message to core(0,2)Allocated physical - start: 0x0_2BD90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDA0000

skb.0: sending udn message to core(0,2)udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BDA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDB0000


core (2) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BDB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDC0000


core (2) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BDC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDD0000
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BDD0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDE0000
spawnd.2: udn RX octopus.set_response

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BDE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BDF0000

core (2) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BDF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE00000
spawnd.2: udn TX octopus.set_call

Allocated physical - start: 0x0_2BE00000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE10000
spawnd.2: sending udn message to core(0,0)Allocated physical - start: 0x0_2BE10000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE20000

spawnd.2: sending udn message to core(0,0)Allocated physical - start: 0x0_2BE20000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE30000

Allocated physical - start: 0x0_2BE30000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE40000
Allocated physical - start: 0x0_2BE40000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE50000
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BE50000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE60000
udn backend received message chan_id : 1
Allocated physical - start: 0x0_2BE60000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE70000

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BE70000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE80000

core (0) receiving udn message from chan 1... 
Allocated physical - start: 0x0_2BE80000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BE90000
skb.0: udn RX octopus.set_call
Allocated physical - start: 0x0_2BE90000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BEA0000

skb.0: octopus_service:  set_handler: spawn.2.ready { iref: 0 }
Allocated physical - start: 0x0_2BEA0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BEB0000

Allocated physical - start: 0x0_2BEB0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BEC0000
skb.0: octopus_service: found record: all_spawnds_up
Allocated physical - start: 0x0_2BEC0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BED0000

skb.0: octopus_service: found record: spawn.1
Allocated physical - start: 0x0_2BED0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BEE0000

skb.0: octopus_service: found record: spawn.1.ready
Allocated physical - start: 0x0_2BEE0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BEF0000

skb.0: octopus_service: found record: spawn.2
Allocated physical - start: 0x0_2BEF0000; size: 0x00010000; requested: 0x00010000; end: 0x0_2BF00000

spawn_module(...) completed.
Creating page table caps...
skb.0: udn TX octopus.set_response

skb.0: sending udn message to core(0,2)
udn backend received message chan_id : 1
skb.0: sending udn message to core(0,2)

core (2) receiving udn message from chan 1... 


core (0) receiving udn message from chan 1... 
core (2) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.2: udn RX octopus.set_response


core (2) receiving udn message from chan 1... 
spawnd.2: udn TX octopus.wait_for_call

spawnd.2: sending udn message to core(0,0)
udn backend received message chan_id : 1

core (0) receiving udn message from chan 1... 
skb.0: udn RX octopus.wait_for_call

skb.0: octopus_service: get record all_spawnds_up

skb.0: waiting for: all_spawnds_up

skb.0: octopus_service: set_watch all_spawnds_up


core (0) receiving udn message from chan 1... 
Page table caps are done.
load_init_image
Allocated physical - start: 0x0_2BF00000; size: 0x00120000; requested: 0x00120000; end: 0x0_2C020000
Allocated physical - start: 0x0_2C020000; size: 0x00030000; requested: 0x00030000; end: 0x0_2C050000
Allocated physical - start: 0x0_2C050000; size: 0x00010000; requested: 0x00010000; end: 0x0_2C060000
Allocated physical - start: 0x0_2C060000; size: 0x00120000; requested: 0x00120000; end: 0x0_2C180000
init image load is done
done
Allocated physical - start: 0x0_2C180000; size: 0x00100000; requested: 0x00100000; end: 0x0_2C280000
dispatch it baby!
resume(pc=0x01000020, sp=0x80000000, tp=0x00070000, r0=0x00000000)
argc value: 4
monitor: invoked as: monitor 0 chanid=4 archid=0
monitor.0: WARNING: bench_arch_init() have not been implemented!

set core id:3 
starting appcore
boot_arch_app_core argc value: 4
monitor: invoked as: monitor 0 chanid=4 archid=0
aa core id of the core that booted: 0 
outchan_id 4
aa intermon udn init2 on core: 3 src_core_id: 0 out_chan_id:4
aaa udn_endpoint_init 
monitor.3: create new incoming channel id : 0

 udn channel init, dest_core_id: 0, out_chan_id: 4 dest_asid: 2 
aa test (core 3 ) to print binding pointer: 1145934776 

 intermon_init coreid: 0
udn_intermon_init aa on core:3
inter.c arch_intermon_init my_core_id:3

 aa debugpointer0 on core: 3 
 core:3
aaa request_mem_serv_iref on core: 3
monitor.3: udn TX intermon.mem_serv_iref_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.mem_serv_iref_request

reques mem_serv_iref: 1
request core id 0 
request binding: 1146087160 
monitor.0: udn TX intermon.mem_serv_iref_reply

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 4... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.mem_serv_iref_reply

aatest iref: 1 and mem_serv_iref: 0
reply core id 3 
reply binding: 1145934776 

core (3) receiving udn message from chan 0... 

 aa debugpointer1
monitor.3: udn TX intermon.name_serv_iref_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.name_serv_iref_request

monitor.0: udn TX intermon.name_serv_iref_reply

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 4... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.name_serv_iref_reply


core (3) receiving udn message from chan 0... 

 aa debugpointer2
monitor.3: udn TX intermon.ramfs_serv_iref_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.ramfs_serv_iref_request

monitor.0: udn TX intermon.ramfs_serv_iref_reply

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 4... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.ramfs_serv_iref_reply


core (3) receiving udn message from chan 0... 
monitor.3: udn TX intermon.monitor_mem_iref_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.monitor_mem_iref_request

monitor.0: udn TX intermon.monitor_mem_iref_reply

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 4... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.monitor_mem_iref_reply


core (3) receiving udn message from chan 0... 
aaa udn_endpoint_init 
monitor.3: create new incoming channel id : 1
monitor.3: udn TX intermon.bind_udn_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 3 
server received channel id 1 and destination core id 3 from the client
aaa udn_endpoint_init 
monitor.0: create new incoming channel id : 5

 udn channel init, dest_core_id: 3, out_chan_id: 1 dest_asid: 1 
monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)


core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 4... 
core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:3 server_core_id:0
client received channel id 5 and destination core id 0 from the server

core (3) receiving udn message from chan 0... 
monitor.3: udn TX intermon.spawnd_image_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.spawnd_image_request

monitor.0: udn TX intermon.spawnd_image_reply

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 4... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.spawnd_image_reply


core (3) receiving udn message from chan 0... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
Spawning spawnd on core 3
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
monitor.3: udn TX monitor_mem.alloc_call

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 5

core (0) receiving udn message from chan 5... 
monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call

mem_serv.0: lmp RX mem.allocate_call

mem_serv.0: lmp TX mem.allocate_response

monitor.0: lmp RX mem.allocate_response

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,3)

udn backend received message chan_id : 1
core (0) receiving udn message from chan 5... 

core (3) receiving udn message from chan 1... 
monitor.3: udn RX monitor_mem.alloc_response


core (3) receiving udn message from chan 1... 
ERROR: monitor.3 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: monitor.3 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

monitor.3: udn TX intermon.monitor_initialized

monitor.3: sending udn message to core(0,0)
aaa core:3 booted app core
udn backend received message chan_id : 4
resume(pc=0x01000000, sp=0x02043518, tp=0x02040000, r0=0x00000000)

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.monitor_initialized

while(1) id:3
monitor.0: udn TX intermon.new_monitor_notify

monitor.0: sending udn message to core(0,1)
break my_core_id:0 id=3 i=1
udn backend received message chan_id : 0
while(1) id:3

core (1) receiving udn message from chan 0... 
monitor.0: udn TX intermon.new_monitor_notify
monitor.1: udn RX intermon.new_monitor_notify


monitor.0: sending udn message to core(0,2)inter.c new_monitor_notify my_core_id:1 function got core_id:3

break my_core_id:0 id=3 i=2
monitor.1: udn TX monitor_mem.alloc_call
udn backend received message chan_id : 0

monitor.1: sending udn message to core(0,0)

core (2) receiving udn message from chan 0... 
monitor.0: lmp TX monitor.boot_core_reply
monitor.2: udn RX intermon.new_monitor_notify


inter.c new_monitor_notify my_core_id:2 function got core_id:3
spawnd.0: lmp RX monitor.boot_core_reply
monitor.2: udn TX monitor_mem.alloc_call



monitor.2: sending udn message to core(0,0)
 test1 case 1 max core id:255 
spawnd.0: lmp TX monitor.boot_initialize_request


core (0) receiving udn message from chan 4... 
udn backend received message chan_id : 1
spawnd.3: lmp TX monitor.get_monitor_rpc_iref_request

udn backend received message chan_id : 3
monitor.3: lmp RX monitor.get_monitor_rpc_iref_request

monitor.0: lmp RX monitor.boot_initialize_request
monitor.3: lmp TX monitor.get_monitor_rpc_iref_reply



core (0) receiving udn message from chan 1... 
spawnd.3: lmp RX monitor.get_monitor_rpc_iref_reply

monitor.0: udn RX monitor_mem.alloc_call

monitor.0: lmp TX mem.allocate_call
spawnd.3: lmp TX monitor.bind_lmp_client_request


mem_serv.0: lmp RX mem.allocate_call
monitor.3: lmp RX monitor.bind_lmp_client_request


monitor.3: lmp TX monitor.bind_lmp_reply_client

mem_serv.0: lmp TX mem.allocate_response
spawnd.3: lmp RX monitor.bind_lmp_reply_client


monitor.0: lmp RX mem.allocate_response

spawnd.3: lmp TX monitor.get_mem_iref_request

monitor.0: udn TX monitor_mem.alloc_response
monitor.3: lmp RX monitor.get_mem_iref_request


monitor.0: sending udn message to core(0,1)monitor.3: lmp TX monitor.get_mem_iref_reply



core (0) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.3: lmp RX monitor.get_mem_iref_reply



core (1) receiving udn message from chan 1... 
spawnd.3: lmp TX monitor.bind_lmp_client_request
monitor.1: udn RX monitor_mem.alloc_response



core (0) receiving udn message from chan 3... 
core (1) receiving udn message from chan 1... 
monitor.3: lmp RX monitor.bind_lmp_client_request

monitor.0: udn RX monitor_mem.alloc_call
monitor.3: lmp TX monitor.bind_lmp_reply_client


monitor.0: lmp TX mem.allocate_call
spawnd.3: lmp RX monitor.bind_lmp_reply_client


mem_serv.0: lmp RX mem.allocate_call

spawnd.3: lmp TX monitor.new_monitor_binding_request

monitor.3: lmp RX monitor.new_monitor_binding_request
bindcores1 core_id:3 my_core_id:1 out_chan_id:2

aaa udn_endpoint_init 
monitor.1: create new incoming channel id : 3monitor.3: lmp TX monitor.new_monitor_binding_reply



 udn channel init, dest_core_id: 1, out_chan_id: 2 dest_asid: 2 
spawnd.3: lmp RX monitor.new_monitor_binding_reply


 intermon_init coreid: 3
mem_serv.0: lmp TX mem.allocate_response
aaa udn_endpoint_init 
udn_intermon_init aa on core:1
spawnd.3: create new incoming channel id : 0inter.c arch_intermon_init my_core_id:1


monitor.1: udn TX intermon.bind_monitor_proxy
spawnd.3: lmp TX monitor.bind_udn_client_request


monitor.1: sending udn message to core(0,0)monitor.3: lmp RX monitor.bind_udn_client_request



monitor.3: udn TX intermon.bind_udn_request
core (1) receiving udn message from chan 0... 

monitor.0: lmp RX mem.allocate_response
monitor.3: sending udn message to core(0,0)

monitor.0: udn TX monitor_mem.alloc_response

monitor.0: sending udn message to core(0,2)

core (0) receiving udn message from chan 3... 
udn backend received message chan_id : 1

udn backend received message chan_id : 0
core (2) receiving udn message from chan 1... 
udn backend received message chan_id : 4
monitor.2: udn RX monitor_mem.alloc_response



core (2) receiving udn message from chan 1... 
core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 3 
monitor.0: lmp TX monitor.bind_udn_service_request

mem_serv.0: lmp RX monitor.bind_udn_service_request

server received channel id 0 and destination core id 3 from the client
aaa udn_endpoint_init 
mem_serv.0: create new incoming channel id : 2

bindcores1 core_id:3 my_core_id:2 out_chan_id:2
 udn channel init, dest_core_id: 3, out_chan_id: 0 dest_asid: 2 
aaa udn_endpoint_init 
mem_serv.0: lmp TX monitor.bind_udn_reply_monitor
monitor.2: create new incoming channel id : 3



 udn channel init, dest_core_id: 2, out_chan_id: 2 dest_asid: 2 
core (0) receiving udn message from chan 4... 

 intermon_init coreid: 3
monitor.0: lmp RX monitor.bind_udn_reply_monitor
udn_intermon_init aa on core:2

inter.c arch_intermon_init my_core_id:2
monitor.0: udn TX intermon.bind_udn_reply
monitor.2: udn TX intermon.bind_monitor_proxy


monitor.0: sending udn message to core(0,3)monitor.2: sending udn message to core(0,0)


udn backend received message chan_id : 0
core (2) receiving udn message from chan 0... 

monitor.0: sending udn message to core(0,3)core (3) receiving udn message from chan 0... 


udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.bind_udn_reply

aaa state_id: 1
aaa intermon_bind_udn_reply my_core_id:3 server_core_id:0
monitor.3: lmp TX monitor.bind_udn_reply_client

spawnd.3: lmp RX monitor.bind_udn_reply_client

client received channel id 2 and destination core id 0 from the server
spawnd.3: lmp TX monitor.get_name_iref_request


core (0) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.0: udn RX intermon.bind_monitor_proxy
monitor.3: lmp RX monitor.get_name_iref_request



inter.c bind_monitor_proxy my_core_id:0
monitor.3: lmp TX monitor.get_name_iref_reply

monitor.0: udn TX intermon.bind_monitor_request
spawnd.3: lmp RX monitor.get_name_iref_reply


monitor.0: sending udn message to core(0,3)
spawnd.3: lmp TX monitor.bind_lmp_client_request


core (0) receiving udn message from chan 0... 

monitor.3: lmp RX monitor.bind_lmp_client_request

core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.bind_lmp_reply_client

monitor.0: udn RX intermon.bind_monitor_proxy
spawnd.3: lmp RX monitor.bind_lmp_reply_client



inter.c bind_monitor_proxy my_core_id:0
monitor.0: udn TX intermon.bind_monitor_request

spawnd.3: lmp TX monitor.new_monitor_binding_request

monitor.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
monitor.3: lmp RX monitor.new_monitor_binding_request

monitor.3: lmp TX monitor.new_monitor_binding_reply

spawnd.3: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.3: create new incoming channel id : 1
spawnd.3: lmp TX monitor.bind_udn_client_request

monitor.3: lmp RX monitor.bind_udn_client_request

monitor.3: udn TX intermon.bind_udn_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 0
udn backend received message chan_id : 0
udn backend received message chan_id : 4

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.bind_monitor_request


inter.c bind_monitor_request my_core_id:3 core_id:1

core (0) receiving udn message from chan 4... 
bindcores2 core_id:1 my_core_id:3 out_chan_id:2
aaa udn_endpoint_init 
monitor.0: udn RX intermon.bind_udn_request
monitor.3: create new incoming channel id : 2


aaa udn_support get core id: 3 
 udn channel init, dest_core_id: 1, out_chan_id: 2 dest_asid: 2 

 intermon_init coreid: 1
monitor.0: lmp TX monitor.bind_udn_service_request
udn_intermon_init aa on core:3

inter.c arch_intermon_init my_core_id:3
monitor.3: udn TX intermon.bind_monitor_reply

monitor.3: sending udn message to core(0,0)
skb.0: lmp RX monitor.bind_udn_service_request


core (3) receiving udn message from chan 0... 
server received channel id 1 and destination core id 3 from the client
monitor.3: udn RX intermon.bind_monitor_request

aaa udn_endpoint_init 

inter.c bind_monitor_request my_core_id:3 core_id:2
skb.0: create new incoming channel id : 2

bindcores2 core_id:2 my_core_id:3 out_chan_id:2
aaa udn_endpoint_init 
 udn channel init, dest_core_id: 3, out_chan_id: 1 dest_asid: 2 
monitor.3: create new incoming channel id : 3

skb.0: lmp TX monitor.bind_udn_reply_monitor
 udn channel init, dest_core_id: 2, out_chan_id: 2 dest_asid: 2 


 intermon_init coreid: 2

udn_intermon_init aa on core:3
inter.c arch_intermon_init my_core_id:3
core (0) receiving udn message from chan 4... 
monitor.3: udn TX intermon.bind_monitor_reply

udn backend received message chan_id : 4
monitor.3: sending udn message to core(0,0)

monitor.0: udn RX intermon.bind_monitor_reply
core (3) receiving udn message from chan 0... 


inter.c bind_monitor_reply my_core_id:0

core (0) receiving udn message from chan 4... 
udn backend received message chan_id : 4
monitor.0: udn RX intermon.bind_monitor_reply


inter.c bind_monitor_reply my_core_id:0

core (0) receiving udn message from chan 4... 
all 4 monitors up
monitor: synchronizing clocks
Phase-locked local clocks not supported on this platform!
monitor.0: lmp TX monitor.boot_initialize_reply

spawnd.0: lmp RX monitor.boot_initialize_reply



 test1 case 2 max core id:255 

 my_core_id:0 
spawnd.0: lmp TX octopus.wait_for_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record spawn.1.ready

skb.0: octopus_service: transform to string: spawn.1.ready { iref: 0 }

skb.0: lmp TX octopus.wait_for_response

spawnd.0: lmp RX octopus.wait_for_response

spawnd.0: lmp TX octopus.wait_for_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record spawn.2.ready

skb.0: octopus_service: transform to string: spawn.2.ready { iref: 0 }

skb.0: lmp TX octopus.wait_for_response

spawnd.0: lmp RX octopus.wait_for_response

spawnd.0: lmp TX octopus.wait_for_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record spawn.3.ready

skb.0: waiting for: spawn.3.ready

skb.0: octopus_service: set_watch spawn.3.ready

monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:3 server_core_id:0
monitor.3: lmp TX monitor.bind_udn_reply_client

spawnd.3: lmp RX monitor.bind_udn_reply_client

client received channel id 2 and destination core id 0 from the server
spawnd.3: udn TX octopus.get_call

spawnd.3: sending udn message to core(0,0)
spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(0,3)
skb.0: sending udn message to core(0,3)udn backend received message chan_id : 1



core (3) receiving udn message from chan 1... 
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.3: udn RX octopus.get_response


core (3) receiving udn message from chan 1... 
spawnd.3: lmp TX monitor.alloc_iref_request

monitor.3: lmp RX monitor.alloc_iref_request

monitor.3: lmp TX monitor.alloc_iref_reply

spawnd.3: lmp RX monitor.alloc_iref_reply

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: lmp TX monitor.get_ramfs_iref_request


core (3) receiving udn message from chan 0... 
monitor.3: lmp RX monitor.get_ramfs_iref_request

monitor.3: lmp TX monitor.get_ramfs_iref_reply

spawnd.3: lmp RX monitor.get_ramfs_iref_reply

spawnd.3: lmp TX monitor.bind_lmp_client_request

monitor.3: lmp RX monitor.bind_lmp_client_request

monitor.3: lmp TX monitor.bind_lmp_reply_client

spawnd.3: lmp RX monitor.bind_lmp_reply_client

spawnd.3: lmp TX monitor.new_monitor_binding_request

monitor.3: lmp RX monitor.new_monitor_binding_request

monitor.3: lmp TX monitor.new_monitor_binding_reply

spawnd.3: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
spawnd.3: create new incoming channel id : 2
spawnd.3: lmp TX monitor.bind_udn_client_request

monitor.3: lmp RX monitor.bind_udn_client_request

monitor.3: udn TX intermon.bind_udn_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 3 
monitor.0: lmp TX monitor.bind_udn_service_request

ramfsd.0: lmp RX monitor.bind_udn_service_request

server received channel id 2 and destination core id 3 from the client
aaa udn_endpoint_init 
ramfsd.0: create new incoming channel id : 2

 udn channel init, dest_core_id: 3, out_chan_id: 2 dest_asid: 2 
ramfsd.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 4... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:3 server_core_id:0
monitor.3: lmp TX monitor.bind_udn_reply_client

spawnd.3: lmp RX monitor.bind_udn_reply_client

client received channel id 2 and destination core id 0 from the server
spawnd.3: udn TX trivfs.getroot_call

spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.getroot_call

ramfsd.0: udn TX trivfs.getroot_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.getroot_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX trivfs.bulk_init_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: lmp TX monitor.cap_send_request

monitor.3: lmp RX monitor.cap_send_request

monitor.3: udn TX intermon.cap_send_request

monitor.3: sending udn message to core(0,0)
monitor.3: sending udn message to core(0,0)

udn backend received message chan_id : 4
core (3) receiving udn message from chan 2... 
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.cap_send_request

monitor.0: lmp TX monitor.cap_receive_request

ramfsd.0: lmp RX monitor.cap_receive_request

ramfsd.0: udn RX trivfs.bulk_init_call

ramfsd.0: udn TX trivfs.bulk_init_response

ramfsd.0: sending udn message to core(0,3)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.bulk_init_response



core (3) receiving udn message from chan 2... 
core (0) receiving udn message from chan 4... 
spawnd.3: spawnd invoked on core 3 as:
 spawnd
spawnd.3: udn TX trivfs.lookup_call

spawnd.3: sending udn message to core(0,0)
spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.lookup_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.getattr_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.getattr_call

ramfsd.0: udn TX trivfs.getattr_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.getattr_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: gbootmodules is:
/tilepro/sbin/cpu loglevel=4
/tilepro/sbin/init
/tilepro/sbin/mem_serv
/tilepro/sbin/monitor
/tilepro/sbin/ramfsd boot
/tilepro/sbin/skb boot
/tilepro/sbin/spawnd boot boottilepro=1-3
/tilepro/sbin/startd boot
/tilepro/sbin/hell
spawnd.3: lmp TX monitor.alloc_iref_request

monitor.3: lmp RX monitor.alloc_iref_request

monitor.3: lmp TX monitor.alloc_iref_reply

spawnd.3: lmp RX monitor.alloc_iref_reply

spawnd.3: udn TX octopus.set_call

spawnd.3: sending udn message to core(0,0)
spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
skb.0: udn RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.3 { iref: 771 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1

skb.0: octopus_service: found record: spawn.1.ready

skb.0: octopus_service: found record: spawn.2

skb.0: octopus_service: found record: spawn.2.ready

skb.0: octopus_service: found record: spawn.3.ready

skb.0: udn TX octopus.set_response

skb.0: sending udn message to core(0,3)
skb.0: sending udn message to core(0,3)udn backend received message chan_id : 1



core (3) receiving udn message from chan 1... 

core (0) receiving udn message from chan 2... 
core (3) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.3: udn RX octopus.set_response


core (3) receiving udn message from chan 1... 
spawnd.3: udn TX octopus.set_call

spawnd.3: sending udn message to core(0,0)
spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
skb.0: udn RX octopus.set_call

skb.0: octopus_service:  set_handler: spawn.3.ready { iref: 0 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1

skb.0: octopus_service: found record: spawn.1.ready

skb.0: octopus_service: found record: spawn.2

skb.0: octopus_service: found record: spawn.2.ready

skb.0: octopus_service: found record: spawn.3.ready

skb.0: octopus_service: transform to string: spawn.3.ready { iref: 0 }

skb.0: octopus_service: wakeup 0x444d60d8 for spawn.3.ready { iref: 0 }

skb.0: lmp TX octopus.wait_for_response

spawnd.0: lmp RX octopus.wait_for_response

spawnd.0: lmp TX octopus.set_call

skb.0: udn TX octopus.set_response

skb.0: sending udn message to core(0,3)
skb.0: sending udn message to core(0,3)udn backend received message chan_id : 1

udn backend received message chan_id : 1


core (0) receiving udn message from chan 2... 
core (3) receiving udn message from chan 1... 

core (3) receiving udn message from chan 1... 
spawnd.3: udn RX octopus.set_response


core (3) receiving udn message from chan 1... 
spawnd.3: udn TX octopus.wait_for_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2
skb.0: lmp RX octopus.set_call

skb.0: octopus_service:  set_handler: all_spawnds_up { iref: 0 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: transform to string: all_spawnds_up { iref: 0 }

skb.0: octopus_service: wakeup 0x444d8c00 for all_spawnds_up { iref: 0 }

skb.0: lmp TX octopus.wait_for_response

startd.0: lmp RX octopus.wait_for_response

startd.0: starting app /tilepro/sbin/hellotest on core 3

startd.0: lmp TX octopus.wait_for_call

skb.0: octopus_service: transform to string: all_spawnds_up { iref: 0 }

skb.0: octopus_service: wakeup 0x444d5df8 for all_spawnds_up { iref: 0 }

skb.0: udn TX octopus.wait_for_response

skb.0: sending udn message to core(0,1)
skb.0: sending udn message to core(0,1)udn backend received message chan_id : 1

udn backend received message chan_id : 1

skb.0: octopus_service: transform to string: all_spawnds_up { iref: 0 }
core (1) receiving udn message from chan 1... 


skb.0: octopus_service: wakeup 0x444efa30 for all_spawnds_up { iref: 0 }
core (1) receiving udn message from chan 1... 

skb.0: udn TX octopus.wait_for_response
spawnd.1: udn RX octopus.wait_for_response



skb.0: sending udn message to core(0,2)core (1) receiving udn message from chan 1... 

skb.0: sending udn message to core(0,2)udn backend received message chan_id : 1

udn backend received message chan_id : 1
skb.0: lmp TX octopus.set_response


core (2) receiving udn message from chan 1... 

core (2) receiving udn message from chan 1... 
spawnd.0: lmp RX octopus.set_response
spawnd.2: udn RX octopus.wait_for_response



core (2) receiving udn message from chan 1... 
spawnd.0: lmp TX monitor.alloc_iref_request

monitor.0: lmp RX monitor.alloc_iref_request

monitor.0: lmp TX monitor.alloc_iref_reply

spawnd.0: lmp RX monitor.alloc_iref_reply

spawnd.0: lmp TX octopus.set_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record spawn.3

skb.0: octopus_service: transform to string: spawn.3 { iref: 771 }

skb.0: lmp TX octopus.wait_for_response

startd.0: lmp RX octopus.wait_for_response

startd.0: lmp TX monitor.bind_lmp_client_request

monitor.0: lmp RX monitor.bind_lmp_client_request

monitor.0: lmp TX monitor.bind_lmp_reply_client

startd.0: lmp RX monitor.bind_lmp_reply_client

aaa udn_endpoint_init 
startd.0: create new incoming channel id : 0
startd.0: lmp TX monitor.bind_udn_client_request

monitor.0: lmp RX monitor.bind_udn_client_request

monitor.0: udn TX intermon.bind_udn_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.bind_udn_request

aaa udn_support get core id: 0 

monitor.3: lmp TX monitor.bind_udn_service_request

core (0) receiving udn message from chan 2... 

skb.0: udn RX octopus.wait_for_call
core (3) receiving udn message from chan 0... 

skb.0: octopus_service: get record all_spawnds_up

skb.0: octopus_service: transform to string: all_spawnds_up { iref: 0 }

skb.0: udn TX octopus.wait_for_response

skb.0: sending udn message to core(0,3)
skb.0: sending udn message to core(0,3)udn backend received message chan_id : 1



core (3) receiving udn message from chan 1... 
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 1... 
udn backend received message chan_id : 1
spawnd.3: udn RX octopus.wait_for_response


core (3) receiving udn message from chan 1... 
skb.0: lmp RX octopus.set_call
spawnd.3: lmp RX monitor.bind_udn_service_request


skb.0: octopus_service:  set_handler: spawn.0 { iref: 8 }
server received channel id 0 and destination core id 0 from the client

aaa udn_endpoint_init 
spawnd.3: create new incoming channel id : 3

skb.0: octopus_service: found record: all_spawnds_up
 udn channel init, dest_core_id: 0, out_chan_id: 0 dest_asid: 6 

skb.0: octopus_service: found record: spawn.1
spawnd.3: lmp TX monitor.bind_udn_reply_monitor


skb.0: octopus_service: found record: spawn.1.ready
monitor.3: lmp RX monitor.bind_udn_reply_monitor


skb.0: octopus_service: found record: spawn.2
monitor.3: udn TX intermon.bind_udn_reply


skb.0: octopus_service: found record: spawn.2.ready
monitor.3: sending udn message to core(0,0)

skb.0: octopus_service: found record: spawn.3.ready
monitor.3: sending udn message to core(0,0)

skb.0: octopus_service: found record: spawn.3

skb.0: lmp TX octopus.set_response

spawnd.0: lmp RX octopus.set_response

spawnd.0: lmp TX octopus.set_call

udn backend received message chan_id : 4
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:0 server_core_id:3
monitor.0: lmp TX monitor.bind_udn_reply_client

startd.0: lmp RX monitor.bind_udn_reply_client

client received channel id 3 and destination core id 3 from the server
startd.0: udn TX spawn.spawn_domain_call

startd.0: sending udn message to core(0,3)
startd.0: sending udn message to core(0,3)udn backend received message chan_id : 3


startd.0: sending udn message to core(0,3)core (3) receiving udn message from chan 3... 


core (3) receiving udn message from chan 3... 
udn backend received message chan_id : 3
udn backend received message chan_id : 3

core (3) receiving udn message from chan 3... 
spawnd.3: udn RX spawn.spawn_domain_call

spawnd.3: udn TX trivfs.lookup_call

spawnd.3: sending udn message to core(0,0)

core (0) receiving udn message from chan 4... 
spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.lookup_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.lookup_call

spawnd.3: sending udn message to core(0,0)
skb.0: lmp RX octopus.set_call
spawnd.3: sending udn message to core(0,0)

skb.0: octopus_service:  set_handler: spawn.0.ready { iref: 0 }

skb.0: octopus_service: found record: all_spawnds_up

skb.0: octopus_service: found record: spawn.1

skb.0: octopus_service: found record: spawn.1.ready

skb.0: octopus_service: found record: spawn.2

skb.0: octopus_service: found record: spawn.2.ready

skb.0: octopus_service: found record: spawn.3.ready

skb.0: octopus_service: found record: spawn.3

skb.0: octopus_service: found record: spawn.0

skb.0: lmp TX octopus.set_response

spawnd.0: lmp RX octopus.set_response

spawnd.0: lmp TX octopus.wait_for_call

skb.0: lmp RX octopus.wait_for_call

skb.0: octopus_service: get record all_spawnds_up

skb.0: octopus_service: transform to string: all_spawnds_up { iref: 0 }

skb.0: lmp TX octopus.wait_for_response

spawnd.0: lmp RX octopus.wait_for_response

udn backend received message chan_id : 2
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.lookup_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.lookup_call

spawnd.3: sending udn message to core(0,0)
spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.lookup_call

ramfsd.0: udn TX trivfs.lookup_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.lookup_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.getattr_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.getattr_call

ramfsd.0: udn TX trivfs.getattr_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.getattr_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 2

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX trivfs.read_bulk_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
ramfsd.0: udn RX trivfs.read_bulk_call

ramfsd.0: udn TX trivfs.read_bulk_response

ramfsd.0: sending udn message to core(0,3)

udn backend received message chan_id : 2
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 2... 
spawnd.3: udn RX trivfs.read_bulk_response


core (3) receiving udn message from chan 2... 
spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2


core (3) receiving udn message from chan 0... 
core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request
core (0) receiving udn message from chan 2... 

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request

monitor.3: lmp TX monitor.cap_receive_request


core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request

monitor.3: lmp TX monitor.cap_receive_request


core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2


core (3) receiving udn message from chan 0... 
core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2


core (3) receiving udn message from chan 0... 
core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request

monitor.3: lmp TX monitor.cap_receive_request


core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2


core (3) receiving udn message from chan 0... 
core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request

monitor.3: lmp TX monitor.cap_receive_request


core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request

core (0) receiving udn message from chan 2... 
spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

udn backend received message chan_id : 2
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)
udn backend received message chan_id : 2

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

udn backend received message chan_id : 0
core (0) receiving udn message from chan 2... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 2... 
monitor.3: lmp TX monitor.cap_receive_request

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: udn TX mem.allocate_call

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 2... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 2

core (0) receiving udn message from chan 2... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
udn backend received message chan_id : 0
monitor.0: sending udn message to core(0,3)

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


monitor.3: lmp TX monitor.cap_receive_request
core (0) receiving udn message from chan 2... 

spawnd.3: lmp RX monitor.cap_receive_request

spawnd.3: udn RX mem.allocate_response

spawnd.3: lmp TX monitor_blocking.alloc_monitor_ep_call


core (3) receiving udn message from chan 0... 
monitor.3: lmp RX monitor_blocking.alloc_monitor_ep_call

monitor.3: lmp TX monitor_blocking.alloc_monitor_ep_response

spawnd.3: lmp RX monitor_blocking.alloc_monitor_ep_response

spawnd.3: spawning /tilepro/sbin/hellotest on core 3

ERROR: spawnd.3 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:945
ERROR: Some errors will follow, due to the implementation of this function, but they can be ignored.

ERROR: spawnd.3 in spawn_free() /home/andreas/barrelfish/new_test2/lib/spawndomain/spawn.c:953
ERROR: method finished.

spawnd.3: udn TX spawn.spawn_domain_response

spawnd.3: sending udn message to core(0,0)

core (3) receiving udn message from chan 3... 
resume(pc=0x01000000, sp=0x02023518, tp=0x02020000, r0=0x00000000)
udn backend received message chan_id : 0

core (0) receiving udn message from chan 0... 
startd.0: udn RX spawn.spawn_domain_response


core (0) receiving udn message from chan 0... 
startd.0: lmp TX trivfs.lookup_call

ramfsd.0: lmp RX trivfs.lookup_call

ramfsd.0: lmp TX trivfs.lookup_response

startd.0: lmp RX trivfs.lookup_response

No bootscript
hellotest.3: lmp TX monitor.get_monitor_rpc_iref_request

monitor.3: lmp RX monitor.get_monitor_rpc_iref_request

monitor.3: lmp TX monitor.get_monitor_rpc_iref_reply

hellotest.3: lmp RX monitor.get_monitor_rpc_iref_reply

hellotest.3: lmp TX monitor.bind_lmp_client_request

monitor.3: lmp RX monitor.bind_lmp_client_request

monitor.3: lmp TX monitor.bind_lmp_reply_client

hellotest.3: lmp RX monitor.bind_lmp_reply_client

hellotest.3: lmp TX monitor.get_mem_iref_request

monitor.3: lmp RX monitor.get_mem_iref_request

monitor.3: lmp TX monitor.get_mem_iref_reply

hellotest.3: lmp RX monitor.get_mem_iref_reply

hellotest.3: lmp TX monitor.bind_lmp_client_request

monitor.3: lmp RX monitor.bind_lmp_client_request

monitor.3: lmp TX monitor.bind_lmp_reply_client

hellotest.3: lmp RX monitor.bind_lmp_reply_client

hellotest.3: lmp TX monitor.new_monitor_binding_request

monitor.3: lmp RX monitor.new_monitor_binding_request

monitor.3: lmp TX monitor.new_monitor_binding_reply

hellotest.3: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
hellotest.3: create new incoming channel id : 0
hellotest.3: lmp TX monitor.bind_udn_client_request

monitor.3: lmp RX monitor.bind_udn_client_request

monitor.3: udn TX intermon.bind_udn_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 3 
monitor.0: lmp TX monitor.bind_udn_service_request

mem_serv.0: lmp RX monitor.bind_udn_service_request

server received channel id 0 and destination core id 3 from the client
aaa udn_endpoint_init 
mem_serv.0: create new incoming channel id : 3

 udn channel init, dest_core_id: 3, out_chan_id: 0 dest_asid: 3 
mem_serv.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 4... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:3 server_core_id:0
monitor.3: lmp TX monitor.bind_udn_reply_client

hellotest.3: lmp RX monitor.bind_udn_reply_client

client received channel id 3 and destination core id 0 from the server
hellotest.3: lmp TX monitor.get_name_iref_request


core (3) receiving udn message from chan 0... 
monitor.3: lmp RX monitor.get_name_iref_request

monitor.3: lmp TX monitor.get_name_iref_reply

hellotest.3: lmp RX monitor.get_name_iref_reply

hellotest.3: lmp TX monitor.bind_lmp_client_request

monitor.3: lmp RX monitor.bind_lmp_client_request

monitor.3: lmp TX monitor.bind_lmp_reply_client

hellotest.3: lmp RX monitor.bind_lmp_reply_client

hellotest.3: lmp TX monitor.new_monitor_binding_request

monitor.3: lmp RX monitor.new_monitor_binding_request

monitor.3: lmp TX monitor.new_monitor_binding_reply

hellotest.3: lmp RX monitor.new_monitor_binding_reply

aaa udn_endpoint_init 
hellotest.3: create new incoming channel id : 1
hellotest.3: lmp TX monitor.bind_udn_client_request

monitor.3: lmp RX monitor.bind_udn_client_request

monitor.3: udn TX intermon.bind_udn_request

monitor.3: sending udn message to core(0,0)
udn backend received message chan_id : 4

core (0) receiving udn message from chan 4... 
monitor.0: udn RX intermon.bind_udn_request

aaa udn_support get core id: 3 
monitor.0: lmp TX monitor.bind_udn_service_request

skb.0: lmp RX monitor.bind_udn_service_request

server received channel id 1 and destination core id 3 from the client
aaa udn_endpoint_init 
skb.0: create new incoming channel id : 3

 udn channel init, dest_core_id: 3, out_chan_id: 1 dest_asid: 3 
skb.0: lmp TX monitor.bind_udn_reply_monitor


core (0) receiving udn message from chan 4... 
monitor.0: lmp RX monitor.bind_udn_reply_monitor

monitor.0: udn TX intermon.bind_udn_reply

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.bind_udn_reply

aaa intermon_bind_udn_reply my_core_id:3 server_core_id:0
monitor.3: lmp TX monitor.bind_udn_reply_client

hellotest.3: lmp RX monitor.bind_udn_reply_client

client received channel id 3 and destination core id 0 from the server
hellotest.3: udn TX octopus.get_call

hellotest.3: sending udn message to core(0,0)
hellotest.3: sending udn message to core(0,0)
udn backend received message chan_id : 3
udn backend received message chan_id : 3

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 3... 

core (0) receiving udn message from chan 3... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record serial

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(0,3)
skb.0: sending udn message to core(0,3)
udn backend received message chan_id : 1

udn backend received message chan_id : 1

core (0) receiving udn message from chan 3... 
core (3) receiving udn message from chan 1... 

core (3) receiving udn message from chan 1... 
hellotest.3: udn RX octopus.get_response


core (3) receiving udn message from chan 1... 
hellotest.3: lmp TX monitor.alloc_iref_request

monitor.3: lmp RX monitor.alloc_iref_request

monitor.3: lmp TX monitor.alloc_iref_reply

hellotest.3: lmp RX monitor.alloc_iref_reply

hellotest.3: udn TX mem.allocate_call

hellotest.3: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 3... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0

udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 3... 
monitor.3: lmp TX monitor.cap_receive_request

hellotest.3: lmp RX monitor.cap_receive_request

hellotest.3: udn RX mem.allocate_response

hellotest.3: udn TX mem.allocate_call

hellotest.3: sending udn message to core(0,0)

udn backend received message chan_id : 3
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 3... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 3... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0
monitor.3: udn RX intermon.cap_send_request


core (0) receiving udn message from chan 3... 
monitor.3: lmp TX monitor.cap_receive_request

hellotest.3: lmp RX monitor.cap_receive_request

hellotest.3: udn RX mem.allocate_response

hellotest.3: udn TX mem.allocate_call

hellotest.3: sending udn message to core(0,0)

udn backend received message chan_id : 3
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 3... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 3... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0

monitor.3: udn RX intermon.cap_send_request

core (0) receiving udn message from chan 3... 
monitor.3: lmp TX monitor.cap_receive_request

hellotest.3: lmp RX monitor.cap_receive_request

hellotest.3: udn RX mem.allocate_response

hellotest.3: udn TX mem.allocate_call

hellotest.3: sending udn message to core(0,0)
udn backend received message chan_id : 3

core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 3... 
mem_serv.0: udn RX mem.allocate_call

mem_serv.0: udn TX mem.allocate_response

mem_serv.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 3... 
udn backend received message chan_id : 0

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 3

core (0) receiving udn message from chan 3... 
mem_serv.0: lmp TX monitor.cap_send_request

monitor.0: lmp RX monitor.cap_send_request

monitor.0: udn TX intermon.cap_send_request

monitor.0: sending udn message to core(0,3)
monitor.0: sending udn message to core(0,3)udn backend received message chan_id : 0


core (3) receiving udn message from chan 0... 

core (3) receiving udn message from chan 0... 
udn backend received message chan_id : 0

monitor.3: udn RX intermon.cap_send_request

core (0) receiving udn message from chan 3... 
monitor.3: lmp TX monitor.cap_receive_request

hellotest.3: lmp RX monitor.cap_receive_request

hellotest.3: udn RX mem.allocate_response

hellotest.3: Hello world (debug_printf)

Hello world (normal printf)
arg[0] = hellotest
hellotest.3: udn TX octopus.get_call

hellotest.3: sending udn message to core(0,0)
hellotest.3: sending udn message to core(0,0)
udn backend received message chan_id : 3

udn backend received message chan_id : 3
core (3) receiving udn message from chan 0... 

core (0) receiving udn message from chan 3... 

core (0) receiving udn message from chan 3... 
skb.0: udn RX octopus.get_call

skb.0: octopus_service: get record spawn.3

skb.0: octopus_service: transform to string: spawn.3 { iref: 771 }

skb.0: udn TX octopus.get_response

skb.0: sending udn message to core(0,3)
skb.0: sending udn message to core(0,3)

core (0) receiving udn message from chan 3... 
hellotest.3: udn RX octopus.get_response

hellotest.3: lmp TX monitor.bind_lmp_client_request

monitor.3: lmp RX monitor.bind_lmp_client_request

monitor.3: lmp TX monitor.bind_lmp_service_request

spawnd.3: lmp RX monitor.bind_lmp_service_request

spawnd.3: lmp TX monitor.bind_lmp_reply_monitor

monitor.3: lmp RX monitor.bind_lmp_reply_monitor

monitor.3: lmp TX monitor.bind_lmp_reply_client

hellotest.3: lmp RX monitor.bind_lmp_reply_client

hellotest.3: lmp TX spawn.exit_call

spawnd.3: lmp RX spawn.exit_call

